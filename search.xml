<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Domjudge安装记录</title>
    <url>/2020/12/01/Domjudge%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>本文参考于：<a href="https://github.com/cn-xcpc-tools/cn-xcpc-docs" target="_blank" rel="noopener">https://github.com/cn-xcpc-tools/cn-xcpc-docs</a> </p>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>腾讯云学生机</li>
<li>Ubuntu Server 18.04.1 LTS 64位</li>
</ul>
<h3 id="安装依赖包和功能"><a href="#安装依赖包和功能" class="headerlink" title="安装依赖包和功能"></a>安装依赖包和功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade &amp;&amp; sudo apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc g++ make zip unzip mariadb-server \</span><br><span class="line">        apache2 php php-cli libapache2-mod-php php-zip \</span><br><span class="line">        php-gd php-curl php-mysql php-json php-xml php-intl php-mbstring \</span><br><span class="line">        acl bsdmainutils ntp phpmyadmin python-pygments \</span><br><span class="line">        libcgroup-dev linuxdoc-tools linuxdoc-tools-text \</span><br><span class="line">        groff texlive-latex-recommended texlive-latex-extra \</span><br><span class="line">        texlive-fonts-recommended texlive-lang-european composer</span><br></pre></td></tr></table></figure>
<p>安装时选择 <code>apache2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo phpenmod json</span><br></pre></td></tr></table></figure>
<h3 id="编译Domjudge"><a href="#编译Domjudge" class="headerlink" title="编译Domjudge"></a>编译Domjudge</h3><p> <a href="\upload\Domjudge\domjudge-7.1.1.tar.gz">domjudge-7.1.1.tar.gz</a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Downloads</span><br><span class="line">wget https://www.domjudge.org/releases/domjudge-7.1.1.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf domjudge-7.1.1.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd domjudge-7.1.1</span><br><span class="line">./configure --prefix=/opt/domjudge --with-baseurl=127.0.0.1</span><br><span class="line">make domserver &amp;&amp; sudo make install-domserver</span><br><span class="line">make docs &amp;&amp; sudo make install-docs</span><br></pre></td></tr></table></figure>
<h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;domjudge&#x2F;domserver</span><br><span class="line">sudo bin&#x2F;dj_setup_database -u root install</span><br></pre></td></tr></table></figure>
<h3 id="配置-Web-服务器"><a href="#配置-Web-服务器" class="headerlink" title="配置 Web 服务器"></a>配置 Web 服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/domjudge/domserver</span><br><span class="line">sudo ln -s /opt/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf</span><br><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo a2enconf domjudge</span><br><span class="line">sudo systemctl reload apache2</span><br><span class="line">sudo chown www-data:www-data -R /opt/domjudge/domserver/webapp/var/*</span><br></pre></td></tr></table></figure>
<p>现在你应该可以访问 <code>http://127.0.0.1/domjudge</code> 或者公网并使用用户名 <code>admin</code> 与 <code>/opt/domjudge/domserver/etc/initial_admin_password.secret</code> 内生成的密码登录 domjudge 后台了。</p>
<h3 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h3><p>编辑 <code>/etc/mysql/conf.d/mysql.cnf</code>，追加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_connections = 1000</span><br><span class="line">max_allowed_packet = 16MB</span><br><span class="line">innodb_log_file_size = 48MB</span><br></pre></td></tr></table></figure>
<p>其中 <code>max_allowed_packet</code> 数值改成两倍于题目测试数据文件的大小，<code>innodb_log_file_size</code> 数值改成十倍于题目测试数据文件的大小。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>
<h3 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h3><p>编辑 <code>/opt/domjudge/domserver/etc/apache.conf</code>，取消以下几行内容前的注释：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_php7.c&gt;</span><br><span class="line">php_value max_file_uploads      101</span><br><span class="line">php_value upload_max_filesize   128M</span><br><span class="line">php_value post_max_size         128M</span><br><span class="line">php_value memory_limit          512M</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>编辑 <code>/etc/php/7.2/apache2/php.ini</code>，搜索 <code>date.timezone</code> 关键字，取消其行前注释，并将其值设为 <code>Asia/Shanghai</code>。搜索 <code>max_execution_time</code> 关键字，将其值由30改为300，防止生成队伍密码时 PHP 执行超时。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
<h3 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h3><p>编辑 <code>/etc/apache2/apache2.conf</code>，搜索 <code>KeepAlive</code> 关键字，将其值设为 <code>Off</code>，并在其后新增一行内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MaxClients 1000</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
<h2 id="搭建judgehost"><a href="#搭建judgehost" class="headerlink" title="搭建judgehost"></a>搭建judgehost</h2><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装依赖包和功能-1"><a href="#安装依赖包和功能-1" class="headerlink" title="安装依赖包和功能"></a>安装依赖包和功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade &amp;&amp; sudo apt-get update</span><br><span class="line">sudo apt install make sudo debootstrap libcgroup-dev lsof \</span><br><span class="line">        php-cli php-curl php-json php-xml php-zip procps \</span><br><span class="line">        gcc g++ openjdk-8-jre-headless \</span><br><span class="line">        openjdk-8-jdk ghc fp-compiler \</span><br><span class="line">        libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev</span><br></pre></td></tr></table></figure>
<h3 id="编译-Domjudge"><a href="#编译-Domjudge" class="headerlink" title="编译 Domjudge"></a>编译 Domjudge</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Downloads</span><br><span class="line">wget https://www.domjudge.org/releases/domjudge-7.1.1.tar.gz</span><br><span class="line">tar -zxvf domjudge-7.1.1.tar.gz</span><br><span class="line">cd domjudge-7.1.1</span><br><span class="line">./configure --prefix=/opt/domjudge --with-baseurl=127.0.0.1</span><br><span class="line">make judgehost &amp;&amp; sudo make install-judgehost</span><br></pre></td></tr></table></figure>
<p>这会将 judgehost 安装在 <code>/opt/domjudge/judgehost</code> 里。</p>
<h2 id="配置-judgehost"><a href="#配置-judgehost" class="headerlink" title="配置 judgehost"></a>配置 judgehost</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 judgehost 拥有多个 CPU 核心，你可以添加额外的用户来支持绑定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不同的 judgehost 进程到不同的 CPU 核心上，如下：</span></span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-0</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-1</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-2</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-3</span><br><span class="line"><span class="meta">#</span><span class="bash"> ... 如果有更多的 CPU 核心，请自行添加更多的用户</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-sudoers"><a href="#配置-sudoers" class="headerlink" title="配置 sudoers"></a>配置 sudoers</h3><p>将 /opt/domjudge/judgehost/etc/sudoers-domjudge 复制到 /etc/sudoers.d/ 目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /opt/domjudge/judgehost/etc/sudoers-domjudge /etc/sudoers.d/</span><br></pre></td></tr></table></figure>
<h3 id="修改-rest-密码"><a href="#修改-rest-密码" class="headerlink" title="修改 rest 密码"></a>修改 rest 密码</h3><p>使用 vim 等文本编辑器编辑 /opt/domjudge/judgehost 目录下 etc/restapi.secret 这个文件。文件的格式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">default http://example.edu/domjudge/api/  judgehosts  MzfJYWF5agSlUfmiGEy5mgkfqU</span><br></pre></td></tr></table></figure>
<p>格式为 endpoint api_url username password ，endpoint 可以保持不变，api_url 根据 judgeserver 的地址进行修改，username 和 password 要与 domserver上的 etc/restapi.secret 保持一致。</p>
<h3 id="构建-chroot-环境"><a href="#构建-chroot-环境" class="headerlink" title="构建 chroot 环境"></a>构建 chroot 环境</h3><p>使用 vim 等文本编辑器编辑 ~/domjudge/judgehost/bin/dj_make_chroot 脚本，将 ubuntu 镜像改为国内源。（第 172 行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu mirror, modify to match closest mirror</span></span><br><span class="line">[ -z "$DEBMIRROR" ] &amp;&amp; DEBMIRROR="http://mirrors.aliyun.com/ubuntu/"</span><br></pre></td></tr></table></figure>
<p>修改之后保存并运行此脚本(bash 运行)。这一步会从源上下载必要的软件包，所以请耐心等待。</p>
<h3 id="设置cgroup"><a href="#设置cgroup" class="headerlink" title="设置cgroup"></a>设置cgroup</h3><p>使用 vim 等文本编辑器编辑 /etc/default/grub 这个文件，对其中的这一行做如下修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT="quiet cgroup_enable=memory swapaccount=1"</span><br></pre></td></tr></table></figure>
<p>如果下面的步骤仍然报错 那就修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX="quiet cgroup_enable=memory swapaccount=1"</span><br></pre></td></tr></table></figure>
<p>然后执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>之后<strong>重启计算机</strong>。</p>
<h3 id="启动-judgehost"><a href="#启动-judgehost" class="headerlink" title="启动 judgehost"></a>启动 judgehost</h3><p>如果需要使用cgroup，则每次重启之后都要运行 <code>/opt/domjudge/judgehost/bin/create_cgroups</code><br><code>/opt/domjudge/judgehost/bin/judgedaemon</code> 即可启动，若提示 <code>error: Call to undefined function curl_init()</code>，则可以安装 php-curl 解决</p>
<p>如果想要断开连接并且还可以正常使用判题机，这样来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash /opt/domjudge/judgehost/bin/create_cgroups</span><br><span class="line">nohup /opt/domjudge/judgehost/bin/judgedaemon &amp;</span><br></pre></td></tr></table></figure>
<p>退出连接的时候记得用exit，不要直接关闭 到这里，domjudge就可以正常投入使用了。</p>
<h3 id="配置多-judgehost-的-systemd-及-rsyslog"><a href="#配置多-judgehost-的-systemd-及-rsyslog" class="headerlink" title="配置多 judgehost 的 systemd 及 rsyslog"></a>配置多 judgehost 的 systemd 及 rsyslog</h3><p>使用 vim 等文本编辑器在 /lib/systemd/system 下新建一个文本文件叫做 create-cgroups.service，写入下列内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Make sure cgroups exist for DOMjudge judgedaemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/opt/domjudge/judgehost/bin/create_cgroups</span><br><span class="line">RemainAfterExit=true</span><br></pre></td></tr></table></figure>
<p>在 /lib/systemd/system 下再新建一个文本文件叫做 <a href="mailto:domjudge-judgehost@.service">domjudge-judgehost@.service</a>，写入下列内容： 注意 <code>User=&lt;username&gt;</code> 要用自己编译 judgehost 时的用户名，因为 /etc/sudoers.d/sudoers-domjudge 列表里是当时的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=DOMjudge JudgeDaemon</span><br><span class="line">Requires=create-cgroups.service</span><br><span class="line">After=create-cgroups.service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line">ExecStart=/opt/domjudge/judgehost/bin/judgedaemon -n %i</span><br><span class="line">User=&lt;username&gt;</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3</span><br><span class="line">PrivateTmp=yes</span><br><span class="line"></span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=judgehost-%i</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>在 /etc/rsyslog.d/ 下新建一个文本文件叫做 judgehost.conf，写入下列内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:programname, isequal, "judgehost-0" /var/log/judgehost/judgehost-0.log</span><br><span class="line">:programname, isequal, "judgehost-1" /var/log/judgehost/judgehost-1.log</span><br><span class="line">:programname, isequal, "judgehost-2" /var/log/judgehost/judgehost-2.log</span><br><span class="line">:programname, isequal, "judgehost-3" /var/log/judgehost/judgehost-3.log</span><br></pre></td></tr></table></figure>
<p>重启日志服务，启动四个 judgehost：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart rsyslog</span><br><span class="line">sudo systemctl start domjudge-judgehost@0</span><br><span class="line">sudo systemctl start domjudge-judgehost@1</span><br><span class="line">sudo systemctl start domjudge-judgehost@2</span><br><span class="line">sudo systemctl start domjudge-judgehost@3</span><br></pre></td></tr></table></figure>
<p>judgedaemon的日志会保存在 /var/log/judgehost 下</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年CCCC-总决赛</title>
    <url>/2020/11/30/2020%E5%B9%B4CCCC-%E6%80%BB%E5%86%B3%E8%B5%9B/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>因为考研，所以没参加，但是早上忍不住还是打了补题场，9点开打，大概三小时不到一点，然后<code>261/290</code>分，还可以吧</p>
<h3 id="L1-1-嫑废话上代码-5分"><a href="#L1-1-嫑废话上代码-5分" class="headerlink" title="L1-1 嫑废话上代码 (5分)"></a>L1-1 嫑废话上代码 (5分)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Talk is cheap. Show me the code."</span>)</span><br></pre></td></tr></table></figure>
<h3 id="L1-2-猫是液体-5分"><a href="#L1-2-猫是液体-5分" class="headerlink" title="L1-2 猫是液体  (5分)"></a>L1-2 猫是液体  (5分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a * b * c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-3-洛希极限-10分"><a href="#L1-3-洛希极限-10分" class="headerlink" title="L1-3 洛希极限(10分)"></a>L1-3 洛希极限(10分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db a, b;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; op &gt;&gt; b) &#123;</span><br><span class="line">        op = !op;</span><br><span class="line">        db res = a * (op ? <span class="number">2.455</span> : <span class="number">1.26</span>);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; b) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">" T_T"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">" ^_^"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-4-调和平均-10分"><a href="#L1-4-调和平均-10分" class="headerlink" title="L1-4 调和平均 (10分)"></a>L1-4 调和平均 (10分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">db a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    db sum = <span class="number">0</span>, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span><br><span class="line">        sum += <span class="number">1.0</span> / x;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = n / sum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-5-胎压监测-15分"><a href="#L1-5-胎压监测-15分" class="headerlink" title="L1-5 胎压监测 (15分)"></a>L1-5 胎压监测 (15分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Max = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) Max = <span class="built_in">max</span>(Max, a[i]);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a[i] - Max) &gt; a[<span class="number">6</span>] || a[i] &lt; a[<span class="number">5</span>]) vec.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vec.empty()) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Normal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vec.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Warning: please check #"</span> &lt;&lt; vec[<span class="number">0</span>] &lt;&lt; <span class="string">"!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Warning: please check all the tires!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-6-吃火锅-15分"><a href="#L1-6-吃火锅-15分" class="headerlink" title="L1-6 吃火锅 (15分)"></a>L1-6 吃火锅 (15分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s, str = <span class="string">"chi1 huo3 guo1"</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">"."</span>) <span class="keyword">break</span>;</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">find</span>(str) != s.npos) &#123;</span><br><span class="line">            vec.push_back(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (vec.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-_-#"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-7-前世档案-20分"><a href="#L1-7-前世档案-20分" class="headerlink" title="L1-7 前世档案 (20分)"></a>L1-7 前世档案 (20分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    ll <span class="built_in">begin</span> = <span class="number">1l</span>l &lt;&lt; m;</span><br><span class="line">    --<span class="built_in">begin</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        ll id = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == <span class="string">'y'</span>) id = id &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> id = id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; id - <span class="built_in">begin</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L1-8-刮刮彩票-20分"><a href="#L1-8-刮刮彩票-20分" class="headerlink" title="L1-8 刮刮彩票 (20分)"></a>L1-8 刮刮彩票 (20分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>], vis[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum[] = &#123;<span class="number">10000</span>, <span class="number">36</span>, <span class="number">720</span>, <span class="number">360</span>, <span class="number">80</span>, <span class="number">252</span>, <span class="number">108</span>, <span class="number">72</span>, <span class="number">54</span>, <span class="number">180</span>, <span class="number">72</span>, <span class="number">180</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">306</span>, <span class="number">1080</span>, <span class="number">144</span>, <span class="number">1800</span>, <span class="number">3600</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j]) &#123;</span><br><span class="line">                x = i, y = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                vis[a[i][j]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) <span class="keyword">if</span> (!vis[i]) a[x][y] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[x][y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (op &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            cnt += a[op][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            cnt += a[i][op - <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            cnt += a[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">3</span>; i &lt;= <span class="number">3</span>; ++i, --j) &#123;</span><br><span class="line">            cnt += a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum[cnt - <span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L2-1-简单计算器-25分"><a href="#L2-1-简单计算器-25分" class="headerlink" title="L2-1 简单计算器 (25分)"></a>L2-1 简单计算器 (25分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; op;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        num.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        op.push(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = num.top();</span><br><span class="line">        num.pop();</span><br><span class="line">        <span class="keyword">int</span> n2 = num.top();</span><br><span class="line">        num.pop();</span><br><span class="line">        s = op.top();</span><br><span class="line">        op.pop();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">"+"</span>) n1 = n2 + n1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">"-"</span>) n1 = n2 - n1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">"*"</span>) n1 = n2 * n1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">"/"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: "</span> &lt;&lt; n2 &lt;&lt; <span class="string">"/"</span> &lt;&lt; n1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n1 = n2 / n1;</span><br><span class="line">        &#125;</span><br><span class="line">        num.push(n1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L2-2-口罩发放-25分"><a href="#L2-2-口罩发放-25分" class="headerlink" title="L2-2 口罩发放 (25分)"></a>L2-2 口罩发放 (25分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> name, id, time;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> _idx)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; id &gt;&gt; op &gt;&gt; time;</span><br><span class="line">        idx = _idx;</span><br><span class="line">        <span class="keyword">if</span> (id.<span class="built_in">size</span>() != <span class="number">18</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : id) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it &lt; <span class="string">'0'</span> || it &gt; <span class="string">'9'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> E &amp;other) &#123;</span><br><span class="line">        <span class="keyword">if</span> (time == other.time) <span class="keyword">return</span> idx &lt; other.idx;</span><br><span class="line">        <span class="keyword">return</span> time &lt; other.time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d, p, n, m;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">vector</span>&lt;E&gt; V;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;E&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">bool</span> F = a[i].input(i);</span><br><span class="line">        <span class="keyword">if</span> (F) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].op == <span class="number">1</span>) V.push_back(a[i]);</span><br><span class="line">            vec.push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mp.count(it.id) || day &gt; mp[it.id] + p) &#123;</span><br><span class="line">            mp[it.id] = day;</span><br><span class="line">            --m;</span><br><span class="line">            it.out();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; d &gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; ++i) &#123;</span><br><span class="line">        gao(i);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : V) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.count(it.id)) <span class="keyword">continue</span>;</span><br><span class="line">        it.out();</span><br><span class="line">        mp[it.id]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line"><span class="comment">//    cerr &lt;&lt; "Time elapsed: " &lt;&lt; 1.0 * clock() / CLOCKS_PER_SEC &lt;&lt; " s.\n";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L2-3-完全二叉树的层序遍历-25分"><a href="#L2-3-完全二叉树的层序遍历-25分" class="headerlink" title="L2-3 完全二叉树的层序遍历 (25分)"></a>L2-3 完全二叉树的层序遍历 (25分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> t[N];</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    gao(id &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    gao(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    t[id] = a[idx++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    gao(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cout</span> &lt;&lt; t[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L2-4-网红点打卡攻略-25分"><a href="#L2-4-网红点打卡攻略-25分" class="headerlink" title="L2-4 网红点打卡攻略 (25分)"></a>L2-4 网红点打卡攻略 (25分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> Max = <span class="number">0x3f3f3f3f</span>, ans = <span class="number">-1</span>, cnt;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        s.insert(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m != n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() != n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[pre][a[i]] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span>;</span><br><span class="line">        res += G[pre][a[i]];</span><br><span class="line">        pre = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (G[a[m]][<span class="number">0</span>] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span>;</span><br><span class="line">    res += G[a[m]][<span class="number">0</span>];</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; Max) ans = id, Max = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(G, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        G[u][v] = w;</span><br><span class="line">        G[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        gao(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L3-1-那就别担心了-30分"><a href="#L3-1-那就别担心了-30分" class="headerlink" title="L3-1 那就别担心了 (30分)"></a>L3-1 那就别担心了 (30分)</h3><p>垃圾题目，关于<code>Yes/No</code>只需要从<code>A</code>出发，然后只要一个终点就好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, st, ed;</span><br><span class="line"><span class="keyword">int</span> in_degree[N], out_degree[N], back_in_degree[N], vis[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], g[N][N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G, R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(rt);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : R[u]) &#123;</span><br><span class="line">            q.push(it);</span><br><span class="line">            g[u][it] = <span class="number">1</span>;</span><br><span class="line">            out_degree[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                g[i][j] += g[i][k] * g[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g[st][ed] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span> (g[st][ed] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] &amp;&amp; out_degree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            vec.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vec.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    G.resize(n + <span class="number">1</span>);</span><br><span class="line">    R.resize(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        R[u].push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; st &gt;&gt; ed;</span><br><span class="line">    BFS(st);</span><br><span class="line">    gao();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L3-2-传送门-18-30分"><a href="#L3-2-传送门-18-30分" class="headerlink" title="L3-2 传送门 (18/30分)"></a>L3-2 传送门 (18/30分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1, x2, y;</span><br><span class="line"></span><br><span class="line">    E() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    E(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y) : x1(x1), x2(x2), y(y) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> E &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y != other.y) <span class="keyword">return</span> y &lt; other.y;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x1 != other.x1) <span class="keyword">return</span> x1 &lt; other.x1;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x2 &lt; other.x2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll f[N];</span><br><span class="line"><span class="built_in">set</span>&lt;E&gt; s;</span><br><span class="line"><span class="built_in">string</span> op;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : s) &#123;</span><br><span class="line">        swap(f[it.x1], f[it.x2]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res += i * f[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b, c; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">"+"</span>) s.insert(E(a, b, c));</span><br><span class="line">        <span class="keyword">else</span> s.erase(E(a, b, c));</span><br><span class="line">        gao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="L3-3-可怜的复杂度-13-30分"><a href="#L3-3-可怜的复杂度-13-30分" class="headerlink" title="L3-3 可怜的复杂度 (13/30分)"></a>L3-3 可怜的复杂度 (13/30分)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> b[N], a[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">ll res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = l; r &lt;= n; ++r) &#123;</span><br><span class="line">            vec.push_back(a[r]);</span><br><span class="line">            mp[vec]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n + <span class="number">1</span>) &#123;</span><br><span class="line">        res += f();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        a[x] = m * b[x] + i;</span><br><span class="line">        gao(x + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    gao(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; _T;</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>个人足迹图绘制</title>
    <url>/2020/10/10/%E4%B8%AA%E4%BA%BA%E8%B6%B3%E8%BF%B9%E5%9B%BE%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<p>travel_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">浙江:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">杭州</span></span><br><span class="line"><span class="string">江西:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">南昌</span></span><br><span class="line"><span class="string">吉林:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">吉林</span></span><br><span class="line"><span class="string">辽宁:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">沈阳</span></span><br><span class="line"><span class="string">河北:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">秦皇岛</span></span><br><span class="line"><span class="string">广东:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">深圳</span></span><br><span class="line"><span class="string">江苏:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">南京</span></span><br><span class="line"><span class="string">福建:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">厦门</span></span><br><span class="line"><span class="string">陕西:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">西安</span></span><br><span class="line"><span class="string">山东:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">青岛</span></span><br><span class="line"><span class="string">北京:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">北京</span></span><br></pre></td></tr></table></figure>
<p>main.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省和直辖市</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"travel_config.yml"</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> ymlfile:</span><br><span class="line">    province_city_dict = yaml.safe_load(ymlfile)</span><br><span class="line"></span><br><span class="line">province_dict = dict(zip(province_city_dict.keys(), [<span class="number">1</span>] * len(province_city_dict.keys())))</span><br><span class="line">print(province_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># maptype='china' 只显示全国直辖市和省级</span></span><br><span class="line">map = Map(init_opts=opts.InitOpts(width=<span class="string">'1200px'</span>, height=<span class="string">'800px'</span>))</span><br><span class="line">map.set_global_opts(</span><br><span class="line">    title_opts=opts.TitleOpts(title=<span class="string">"个人足迹地图"</span>),</span><br><span class="line">    visualmap_opts=opts.VisualMapOpts(max_=<span class="number">1</span>, is_piecewise=<span class="literal">True</span>,</span><br><span class="line">                                      pieces=[</span><br><span class="line">                                          &#123;<span class="string">"max"</span>: <span class="number">1</span>, <span class="string">"min"</span>: <span class="number">1</span>, <span class="string">"label"</span>: <span class="string">"去过"</span>, <span class="string">"color"</span>: <span class="string">"#4EA397"</span>&#125;,</span><br><span class="line">                                          &#123;<span class="string">"max"</span>: <span class="number">0</span>, <span class="string">"min"</span>: <span class="number">0</span>, <span class="string">"label"</span>: <span class="string">"未去过"</span>, <span class="string">"color"</span>: <span class="string">"#FFFFFF"</span>&#125;,</span><br><span class="line">                                      ])  <span class="comment"># 最大数据范围，分段</span></span><br><span class="line">)</span><br><span class="line">map.add(<span class="string">"个人足迹地图"</span>, data_pair=province_dict.items(), maptype=<span class="string">"china"</span>, is_roam=<span class="literal">True</span>)</span><br><span class="line">map.render(<span class="string">'全国.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署django</title>
    <url>/2020/05/06/Ubuntu%E9%83%A8%E7%BD%B2django/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>又是工具人的一天</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li>ubuntu16.04</li>
<li>python3.7.1</li>
<li>nginx</li>
<li>uwsgi</li>
</ul>
<h1 id="python3-7-1-安装"><a href="#python3-7-1-安装" class="headerlink" title="python3.7.1 安装"></a>python3.7.1 安装</h1><ul>
<li>安装环境依赖</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev </span><br><span class="line">libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev </span><br><span class="line">liblzma-dev libffi-dev libc6-dev</span><br></pre></td></tr></table></figure>
<ul>
<li>下载python3.7.1 安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz</span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.7.1</span><br></pre></td></tr></table></figure>
<ul>
<li>进入解压目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Python-3.7.1/</span><br></pre></td></tr></table></figure>
<ul>
<li>创建安装目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3  --enable-optimizations</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<ul>
<li>删除原来的软连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/bin/python3</span><br><span class="line">rm -rf /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<ul>
<li>建立新的软连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加python3的软链接</span></span><br><span class="line">ln -s /usr/local/python3/bin/python3.7 /usr/bin/python3</span><br><span class="line"><span class="meta">#</span><span class="bash">添加 pip3 的软链接</span></span><br><span class="line">ln -s /usr/local/python3/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<ul>
<li>检查版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<h1 id="获取项目文件"><a href="#获取项目文件" class="headerlink" title="获取项目文件"></a>获取项目文件</h1><ul>
<li><p>新建 or git 得到项目文件</p>
</li>
<li><p>创建虚拟环境</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清华源安装方式  pip3 install virtualenv -i https://pypi.python.org/simple/</span></span><br><span class="line">python3 -m venv env</span><br><span class="line"><span class="meta">#</span><span class="bash"> env为虚拟环境名字</span></span><br></pre></td></tr></table></figure>
<ul>
<li>激活环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source env/bin/activate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出虚拟环境  deactivate</span></span><br></pre></td></tr></table></figure>
<ul>
<li>安装对应的库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h1 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h1><ul>
<li>安装uwsgi</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>
<ul>
<li>测试uwsgi</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --http :8000 --file web/wsgi.py --static-map=/static=static</span><br></pre></td></tr></table></figure>
<p>访问<code>localhost:8000</code> 看能否访问</p>
<ul>
<li>新建uwsgi文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim uwsgi.ini</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">master = true</span><br><span class="line">processes = 1</span><br><span class="line">threads = 2</span><br><span class="line">chdir = /www/wwwroot/project_plane/web/ # mangge.py 目录</span><br><span class="line">wsgi-file= /www/wwwroot/project_plane/web/web/wsgi.py # wsgi.py 路径</span><br><span class="line">http = 0.0.0.0:8080 # 运行端口</span><br><span class="line">chmod-socket = 660</span><br><span class="line">vacuum = true</span><br><span class="line">max-requests = 1000</span><br></pre></td></tr></table></figure>
<ul>
<li>运行uwsgi文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>
<p>查看否有报错</p>
<p>如果有则可以访问 <code>localhost:8080</code></p>
<p>到这里uwsgi就配置完成了</p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>安装宝塔后新建站点</p>
<p>添加反向代理</p>
<p>到这里 就算部署完成了</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>v2rayN搭建</title>
    <url>/2020/03/20/v2rayN%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>前段时间沉迷VPS,就用手头的VPS搭建了v2rayN</p>
<h2 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/new_install.sh &amp;&amp; bash new_install.sh</span><br></pre></td></tr></table></figure>
<p>安装时，一路默认即可，该输入 Y 的输入 Y，没什么难度。</p>
<p>安装完成，会出现面板地址及默认账号与密码，如下图。（注意新版本在端口号后面还有一个字符串，一定要全部保存,）</p>
<p>如果不记得了可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bt default</span><br></pre></td></tr></table></figure>
<p>查看</p>
<p>进入对应的地址后，只选择安装nginx</p>
<p>然后添加站点</p>
<p><img src="/upload\v2rayN搭建\1.png" alt="1"></p>
<p><img src="/upload\v2rayN搭建\2.png" alt="1"></p>
<h2 id="安装v2rayN"><a href="#安装v2rayN" class="headerlink" title="安装v2rayN"></a>安装v2rayN</h2><p>通过官方脚本安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<p><img src="/upload\v2rayN搭建\3.png" alt="1"></p>
<p>记住你的port和UUID</p>
<p>如果不记得了可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口 Port</span></span><br><span class="line">cat /etc/v2ray/config.json | grep port</span><br><span class="line"><span class="comment"># 查看 id (UUID)</span></span><br><span class="line">cat /etc/v2ray/config.json | grep id</span><br></pre></td></tr></table></figure>
<p>然后配置网站的SSL</p>
<p><img src="/upload\v2rayN搭建\4.png" alt="1"></p>
<p>通知勾选强制HTTPS</p>
<p>修改配置文件：<br>接下来进入 修改网站配置文件 点击配置文件，找到 #SSL-END，大概在 22 行左右，在其下面添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /cs</span><br><span class="line">&#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:你的端口号;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">    proxy_read_timeout 300s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、其中第一行的 cs 是你自己 ws 的 path，斜杠不要删除，可以自己修改,也可以不改；<br>2、还记得用官方脚本安装 v2ray 后出现的 port 吗，我叫大家记住的，这个 port 后面的就是你的端口号。修改上面代码后保存，如下图：</p>
<p><img src="/upload\v2rayN搭建\5.png" alt="1"></p>
<h3 id="接下来才是重点，配置-V2ray-配置文件："><a href="#接下来才是重点，配置-V2ray-配置文件：" class="headerlink" title="接下来才是重点，配置 V2ray 配置文件："></a>接下来才是重点，配置 V2ray 配置文件：</h3><p>进入 /etc/v2ray 目录，编辑 config.json 文件 将里面全部代码改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"policy"</span>: &#123;</span><br><span class="line">    <span class="string">"levels"</span>: &#123;</span><br><span class="line">      <span class="string">"0"</span>: &#123;</span><br><span class="line">        <span class="string">"uplinkOnly"</span>: 0,</span><br><span class="line">        <span class="string">"downlinkOnly"</span>: 0,</span><br><span class="line">        <span class="string">"connIdle"</span>: 150,</span><br><span class="line">        <span class="string">"handshake"</span>: 4</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"inbound"</span>: &#123;</span><br><span class="line">    <span class="string">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"port"</span>: 31914,    //这里填写你的 v2ray 端口号，复制脚本请产出这句注释</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>: <span class="string">"e1bc89df-c245-4da6-90cc-2d20ad80a611"</span>,    //这里填写你的 v2ray UUID，复制脚本请删除这句注释</span><br><span class="line">          <span class="string">"level"</span>: 1,</span><br><span class="line">          <span class="string">"alterId"</span>: 32</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"streamSettings"</span>: &#123;</span><br><span class="line">      <span class="string">"network"</span>: <span class="string">"ws"</span>,</span><br><span class="line">      <span class="string">"security"</span>: <span class="string">"auto"</span>,</span><br><span class="line">      <span class="string">"wsSettings"</span>: &#123;</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"/cs"</span>,   //这里填是你自己 ws 的 path,如果修改配置文件的时候没有修改过就不管，复制脚本请删除这句注释</span><br><span class="line">        <span class="string">"headers"</span>: &#123;</span><br><span class="line">          <span class="string">"Host"</span>: <span class="string">"www.xxx.com"</span>  //这里填写你的域名，复制脚本请删除这句注释</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"outbound"</span>: &#123;</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"outboundDetour"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123; &#125;,</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"routing"</span>: &#123;</span><br><span class="line">    <span class="string">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"rules"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">          <span class="string">"ip"</span>: [</span><br><span class="line">            <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">            <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">            <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">            <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">            <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">            <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">            <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">            <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">            <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">            <span class="string">"::1/128"</span>,</span><br><span class="line">            <span class="string">"fc00::/7"</span>,</span><br><span class="line">            <span class="string">"fe80::/10"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动v2rayN</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此命令启动 v2ray</span></span><br><span class="line">systemctl start v2ray</span><br><span class="line"><span class="comment">#更多命令</span></span><br><span class="line">service v2ray start|stop|status|reload|restart|force-reload</span><br></pre></td></tr></table></figure>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p><img src="/upload\v2rayN搭建\6.png" alt="1"></p>
<h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>检测IP是否被封可以通过</p>
<p><a href="https://www.vps234.com/ipchecker/" target="_blank" rel="noopener">https://www.vps234.com/ipchecker/</a></p>
<p>进行检测</p>
<p>查看端口可以通过</p>
<p><a href="https://www.toolsdaquan.com/ipcheck/" target="_blank" rel="noopener">https://www.toolsdaquan.com/ipcheck/</a></p>
<p>测速可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载脚本</span></span><br><span class="line">wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh </span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod +x superspeed.sh</span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">./superspeed.sh</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https://git.io/superspeed)</span><br></pre></td></tr></table></figure>
<p>v2rayN 代理 git 操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:10809</span><br><span class="line">git config --global https.proxy https://127.0.0.1:10809</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line">git config –-get –-global http.proxy</span><br><span class="line"></span><br><span class="line">取消</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流24题</title>
    <url>/2020/03/11/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>之前写的网络流24题，后来因为比赛耽搁了，想了想还是搬到博客上好了</p>
<h2 id="餐巾计划问题"><a href="#餐巾计划问题" class="headerlink" title="餐巾计划问题"></a>餐巾计划问题</h2><p><a href="https://www.luogu.org/problemnew/show/P1251" target="_blank" rel="noopener">传送门</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    ll cap, flow, cost;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN];</span><br><span class="line">ll dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll cap, ll cost)</span> </span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].cap = cap;</span><br><span class="line">    edge[tot].cost = cost;</span><br><span class="line">    edge[tot].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line"></span><br><span class="line">    edge[tot].to = u;</span><br><span class="line">    edge[tot].cap = <span class="number">0</span>;</span><br><span class="line">    edge[tot].cost = -cost;</span><br><span class="line">    edge[tot].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tot].nxt = head[v];</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dis[i] = INFLL;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].cap &gt; edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCostMaxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, ll &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (SPFA(s, t)) &#123;</span><br><span class="line">        ll Min = INFLL;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            Min = <span class="built_in">min</span>(Min, <span class="number">1l</span>l * edge[i].cap - edge[i].flow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            edge[i].flow += Min;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += edge[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, c, d, e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        addedge(S, i, x, <span class="number">0</span>);</span><br><span class="line">        addedge(i + n, T, x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            addedge(i, i + <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + b &lt;= n) &#123;</span><br><span class="line">            addedge(i, i + n + b, INF, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + d &lt;= n) &#123;</span><br><span class="line">            addedge(i, i + n + d, INF, e);</span><br><span class="line">        &#125;</span><br><span class="line">        addedge(S, i + n, INF, a);</span><br><span class="line">    &#125;</span><br><span class="line">    ll cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="飞行员配对方案问题"><a href="#飞行员配对方案问题" class="headerlink" title="飞行员配对方案问题"></a>飞行员配对方案问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2756" target="_blank" rel="noopener">传送门</a></p>
<p>最大流裸题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], dep[maxn];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, n, m, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        addedge(S, i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(i, T, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span> &amp;&amp; v == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        addedge(u, v, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = Dicnic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].to == S || edge[i ^ <span class="number">1</span>].to == S) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].to == T || edge[i ^ <span class="number">1</span>].to == T) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, edge[i].to, edge[i ^ <span class="number">1</span>].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="软件补丁问题"><a href="#软件补丁问题" class="headerlink" title="软件补丁问题"></a>软件补丁问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2761" target="_blank" rel="noopener">传送门</a></p>
<p>最短路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> b1[maxn], b2[maxn], f1[maxn], f2[maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn], vis[maxn];</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((b1[id] | S) != S) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (b2[id] &amp; S) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis[T] = <span class="number">0</span>;</span><br><span class="line">    vis[T] = <span class="literal">true</span>;</span><br><span class="line">    q.push(T);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!judge(u, i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> now = u ^(u &amp; f1[i]);</span><br><span class="line">            now |= f2[i];</span><br><span class="line">            <span class="keyword">if</span> (dis[now] &gt; dis[u] + cost[i]) &#123;</span><br><span class="line">                dis[now] = dis[u] + cost[i];</span><br><span class="line">                <span class="keyword">if</span> (!vis[now]) &#123;</span><br><span class="line">                    vis[now] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(now);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    T = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    T--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, cost + i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">                b1[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[j] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                b2[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                f1[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">                f2[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SPFA();</span><br><span class="line">    <span class="keyword">if</span> (dis[<span class="number">0</span>] == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">        dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="太空飞行计划问题"><a href="#太空飞行计划问题" class="headerlink" title="太空飞行计划问题"></a>太空飞行计划问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2762" target="_blank" rel="noopener">传送门</a></p>
<p>源点和实验室连边，流量为实验结果支付金额，实验室和实验仪器连边，流量为INF，实验器材与汇点连边，流量为器材成本，跑最大流。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], dep[maxn];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, n, m, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="string">' '</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        addedge(S, i, x);</span><br><span class="line">        sum += x;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span>.getline(buf, <span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; ~<span class="built_in">sscanf</span>(buf + j, <span class="string">"%d"</span>, &amp;x); ++j) &#123;</span><br><span class="line">            j += !x;</span><br><span class="line">            addedge(i, n + x, INF);</span><br><span class="line">            <span class="keyword">for</span> (j += !x; x; x /= <span class="number">10</span>) ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        addedge(n + i, T, x);</span><br><span class="line">    &#125;</span><br><span class="line">    sum -= Dicnic();</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; !tmp; --i) tmp = i * (dep[i] != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tmp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i, <span class="string">" \n"</span>[i == tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; !tmp; --i) tmp = i * (dep[i + n] != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tmp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[i + n] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i, <span class="string">" \n"</span>[i == tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="试题库问题"><a href="#试题库问题" class="headerlink" title="试题库问题"></a>试题库问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2763" target="_blank" rel="noopener">传送门</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;k, &amp;n);</span><br><span class="line">    G.resize(k + <span class="number">1</span>);</span><br><span class="line">    S = <span class="number">0</span>, T = k + n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        addedge(i + n, T, x);</span><br><span class="line">        sum += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, p, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">        addedge(S, i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            addedge(i, x + n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Dinnic();</span><br><span class="line">    <span class="keyword">if</span> (ans != sum) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].to &gt; n &amp;&amp; edge[i].flow == <span class="number">0</span>) &#123;</span><br><span class="line">                G[edge[i].to - n].push_back(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d:"</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最小路径覆盖问题"><a href="#最小路径覆盖问题" class="headerlink" title="最小路径覆盖问题"></a>最小路径覆盖问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2764" target="_blank" rel="noopener">传送门</a></p>
<p>最小路径覆盖问题裸题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], dep[maxn];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, n, m, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? fa[x] : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">    fa[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow == <span class="number">0</span> &amp;&amp; edge[i].to &gt; n) &#123;</span><br><span class="line">            output(edge[i].to - n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addedge(u, v + n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(S, i, <span class="number">1</span>);</span><br><span class="line">        addedge(i + n, T, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Dicnic();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].to == S || edge[i].to == T) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow == <span class="number">0</span>) &#123;</span><br><span class="line">                Unin(edge[i].to - n, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i) == i) &#123;</span><br><span class="line">            output(i);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最长不下降子序列问题"><a href="#最长不下降子序列问题" class="headerlink" title="最长不下降子序列问题"></a>最长不下降子序列问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2766" target="_blank" rel="noopener">传送门</a></p>
<p>第一个问题用dp求解</p>
<p>第二个问题</p>
<p>$dp[i]==1$</p>
<p>源点和i的入点连边</p>
<p>$dp[i] == len$</p>
<p>$i$的出点和汇点连边</p>
<p>然后$a[i]&gt;=a[j]$且$dp[i]=dp[j]+1$则两个点连边</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">550</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">550</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt;= arr[i]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">max</span>(len, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line">    S = <span class="number">0</span>, T = n * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            addedge(S, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == len) &#123;</span><br><span class="line">            addedge(i + n, T, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addedge(i, i + n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt;= arr[i] &amp;&amp; dp[i] == dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                addedge(j + n, i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Dicnic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    addedge(S, <span class="number">1</span>, INF);</span><br><span class="line">    addedge(<span class="number">1</span>, <span class="number">1</span> + n, INF);</span><br><span class="line">    <span class="keyword">if</span> (dp[n] == len) &#123;</span><br><span class="line">        addedge(n, n * <span class="number">2</span>, INF);</span><br><span class="line">        addedge(n * <span class="number">2</span>, T, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += Dicnic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方格取数问题"><a href="#方格取数问题" class="headerlink" title="方格取数问题"></a>方格取数问题</h2><p><a href="https://www.luogu.org/problemnew/show/P2774" target="_blank" rel="noopener">传送门</a></p>
<p>将图用黑白色染色，其中$(i+j) \pmod {2} = 1$的为黑色</p>
<p>源点和黑色相连，白色与汇点相连</p>
<p>黑色白色有关的额相连</p>
<p>跑最小割，答案为$sum-$最小割</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll arr[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n * m + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i][j]);</span><br><span class="line">            ans += arr[i][j];</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span>) &#123;</span><br><span class="line">                addedge(S, <span class="built_in">get</span>(i, j), arr[i][j]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addedge(<span class="built_in">get</span>(i, j), T, arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + dir[k][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> y = j + dir[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">                    addedge(<span class="built_in">get</span>(i, j), <span class="built_in">get</span>(x, y), INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans -= Dicnic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="圆桌问题"><a href="#圆桌问题" class="headerlink" title="圆桌问题"></a>圆桌问题</h2><p><a href="https://www.luogu.org/problemnew/show/P3254" target="_blank" rel="noopener">传送门</a></p>
<p>源点与单位连边，流量为代表数</p>
<p>餐桌和汇点连边，流量为餐桌容量</p>
<p>每个单位都和每个餐桌连边，跑最大流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">310</span>], brr[<span class="number">310</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">310</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        addedge(S, i, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, brr + i);</span><br><span class="line">        addedge(i + n, T, brr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            addedge(i, j + n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Dicnic();</span><br><span class="line">    <span class="keyword">if</span> (ans == sum) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].to &gt; n &amp;&amp; edge[i].flow == <span class="number">0</span>) &#123;</span><br><span class="line">                    G[u].push_back(edge[i].to - n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = G[i].<span class="built_in">size</span>(); j &lt; len; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, G[i][j], <span class="string">" \n"</span>[j == len - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="骑士共存问题"><a href="#骑士共存问题" class="headerlink" title="骑士共存问题"></a>骑士共存问题</h2><p><a href="https://www.luogu.org/problemnew/show/P3355" target="_blank" rel="noopener">传送门</a></p>
<p>将图染色 染成黑白色</p>
<p>黑色与源点相连， 白色与汇点相连，相关联的黑白点相连。</p>
<p>跑最小割，答案为$n\cdot n - m-$ 最小割</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="keyword">int</span> N, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dep[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">            edge[i].flow -= w;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">            used += w;</span><br><span class="line">            <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dicnic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">        ans += DFS(S, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-2</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">-2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">-1</span>, <span class="number">-2</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">-1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">1</span>,  <span class="number">-2</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">1</span>,  <span class="number">2</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">2</span>,  <span class="number">-1</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">2</span>,  <span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) * n + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n * n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">        vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span>) &#123;</span><br><span class="line">                addedge(S, <span class="built_in">get</span>(i, j), <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addedge(<span class="built_in">get</span>(i, j), T, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + dir[k][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> y = j + dir[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; n || vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">                    addedge(<span class="built_in">get</span>(i, j), <span class="built_in">get</span>(x, y), INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Dicnic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n * n - m - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h2><p><a href="https://www.luogu.org/problemnew/show/P4014" target="_blank" rel="noopener">传送门</a></p>
<p>费用流分别跑最大最小值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap, flow, cost;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> cap, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost) : to(to), nxt(nxt), cap(cap), flow(flow), cost(cost) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], cap, <span class="number">0</span>, cost);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], <span class="number">0</span>, <span class="number">0</span>, -cost);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].cap &gt; edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCostMaxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (SPFA(s, t)) &#123;</span><br><span class="line">        <span class="keyword">int</span> Min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            Min = <span class="built_in">min</span>(Min, edge[i].cap - edge[i].flow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            edge[i].flow += Min;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += edge[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i][j]);</span><br><span class="line">            addedge(i, j + n, <span class="number">1</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(S, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        addedge(i + n, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cost);</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            addedge(i, j + n, <span class="number">1</span>, -arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(S, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        addedge(i + n, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运输问题"><a href="#运输问题" class="headerlink" title="运输问题"></a>运输问题</h2><p><a href="https://www.luogu.org/problemnew/show/P4015" target="_blank" rel="noopener">传送门</a></p>
<p>最小费用最大流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap, flow, cost;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> cap, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost) : to(to), nxt(nxt), cap(cap), flow(flow), cost(cost) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], cap, <span class="number">0</span>, cost);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], <span class="number">0</span>, <span class="number">0</span>, -cost);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].cap &gt; edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCostMaxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (SPFA(s, t)) &#123;</span><br><span class="line">        <span class="keyword">int</span> Min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            Min = <span class="built_in">min</span>(Min, edge[i].cap - edge[i].flow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            edge[i].flow += Min;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += edge[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">110</span>], brr[<span class="number">110</span>], crr[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, brr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;crr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cost, flow;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(S, i, arr[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        addedge(i + n, T, brr[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            addedge(i, j + n, INF, crr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cost);</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        addedge(S, i, arr[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        addedge(i + n, T, brr[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            addedge(i, j + n, INF, -crr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="负载平衡问题"><a href="#负载平衡问题" class="headerlink" title="负载平衡问题"></a>负载平衡问题</h2><p><a href="https://www.luogu.org/problemnew/show/P4016" target="_blank" rel="noopener">传送门</a></p>
<p>费用流</p>
<p>如果需要移出的和源点相连，流量为移出的量，费用为0</p>
<p>如果需要移入的和汇点相连，流量为移入的量，费用为0</p>
<p>每个点和相邻的连边，流量为INF， 费用为1</p>
<p>跑费用流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap, flow, cost;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> cap, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost) : to(to), nxt(nxt), cap(cap), flow(flow), cost(cost) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], cap, <span class="number">0</span>, cost);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], <span class="number">0</span>, <span class="number">0</span>, -cost);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].cap &gt; edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCostMaxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (SPFA(s, t)) &#123;</span><br><span class="line">        <span class="keyword">int</span> Min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            Min = <span class="built_in">min</span>(Min, edge[i].cap - edge[i].flow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            edge[i].flow += Min;</span><br><span class="line">            edge[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += edge[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    Init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum /= n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; sum) &#123;</span><br><span class="line">            addedge(S, i, arr[i] - sum, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addedge(i, T, sum - arr[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            addedge(<span class="number">1</span>, <span class="number">2</span>, INF, <span class="number">1</span>);</span><br><span class="line">            addedge(<span class="number">1</span>, n, INF, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            addedge(n, n - <span class="number">1</span>, INF, <span class="number">1</span>);</span><br><span class="line">            addedge(n, <span class="number">1</span>, INF, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addedge(i, i + <span class="number">1</span>, INF, <span class="number">1</span>);</span><br><span class="line">            addedge(i, i - <span class="number">1</span>, INF, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flow = minCostMaxflow(S, T, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛22 I</title>
    <url>/2020/03/02/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B22-I/</url>
    <content><![CDATA[<p><a href="&quot;https://ac.nowcoder.com/acm/contest/4462/I&quot;" title="题目传送门">题目传送门</a></p>
<p>思路:对于每个点都可以通过一些简单计算得到激光枪射中它的最小角度和最大角度,将这些角度排序,枚举起点。</p>
<p>在遍历过程中,对最小角度我们都对这个点进行标记,如果遇到最大角度,那么所有之前标记的点都可以被射中,那么我们就讲这些点的标记清空,最后取最小值即可</p>
<p>时间复杂度$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-03-02 13:10:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-8</span>, PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    db angle;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> type, <span class="keyword">int</span> idx, db _angle) : type(type), idx(idx) &#123;</span><br><span class="line">        angle = <span class="built_in">fmod</span>(_angle + <span class="number">2</span> * PI, <span class="number">2</span> * PI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sgn(angle - other.angle) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> type &lt; other.type;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> angle &lt; other.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, d;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; vec;</span><br><span class="line"><span class="keyword">int</span> mark[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        db x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        db dis = x * x + y * y;</span><br><span class="line">        <span class="keyword">if</span> (sgn(dis - d * d) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        db angle = <span class="built_in">atan2</span>(y, x);</span><br><span class="line">        db sub = <span class="built_in">asin</span>(d / <span class="built_in">sqrt</span>(dis));</span><br><span class="line">        vec.push_back(node(<span class="number">0</span>, i, angle - sub));</span><br><span class="line">        vec.push_back(node(<span class="number">1</span>, i, angle + sub));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vec.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(vec));</span><br><span class="line">    <span class="keyword">int</span> res = vec.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// for (auto it : vec) &#123;</span></span><br><span class="line">    <span class="comment">//     dbg(it.idx);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = vec.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l;</span><br><span class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i + k) % len;</span><br><span class="line">            <span class="keyword">if</span> (vec[j].type == <span class="number">0</span>) &#123;</span><br><span class="line">                mark[vec[j].idx] = <span class="literal">true</span>;</span><br><span class="line">                l.push_back(vec[j].idx);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark[vec[j].idx]) &#123;</span><br><span class="line">                tmp++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> it : l) &#123;</span><br><span class="line">                    mark[it] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                l.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp += l.<span class="built_in">size</span>();</span><br><span class="line">        res = <span class="built_in">min</span>(res, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>拉格朗日插值</title>
    <url>/2020/03/01/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h1 id="拉格朗日差值公式"><a href="#拉格朗日差值公式" class="headerlink" title="拉格朗日差值公式"></a>拉格朗日差值公式</h1><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>如果$P$是一个关于$x$的$n$次多项式,我们已经知道$P(i), i\in [0, n]$的值,则</p>
<script type="math/tex; mode=display">
P(x) = \sum_{i = 0}^{n} (-1)^{n - i} P(i) \frac{x(x-1)(x-2)\cdots (x-n)}{(n-i)!i!(x-i)}</script><h2 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h2><p>给出$n+1$个点$x_i$以及值$P(x_i)$,则</p>
<script type="math/tex; mode=display">
P(x) = \sum_{i=0}^{n}P(x_i) \prod_{j=0,j\neq i}^n \frac{x-x_j}{x_i-x_j}</script><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h3 id="洛谷P4781"><a href="#洛谷P4781" class="headerlink" title="洛谷P4781"></a>洛谷P4781</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll x[N], y[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">(ll n, ll K)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ll tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            tmp = <span class="number">1l</span>l * tmp * (K - x[j]) % p * qpow(x[i] - x[j], p - <span class="number">2</span>) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        res = (res + y[i] * tmp % p + p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    --n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = gao(n, k);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-2019-ICPC-China-Nanchang-National-Invitational-and-International-Silk-Road-Programming-Contest-B-Polynomial"><a href="#The-2019-ICPC-China-Nanchang-National-Invitational-and-International-Silk-Road-Programming-Contest-B-Polynomial" class="headerlink" title="The 2019 ICPC China Nanchang National Invitational and International Silk-Road Programming Contest - B Polynomial"></a>The 2019 ICPC China Nanchang National Invitational and International Silk-Road Programming Contest - B Polynomial</h3><p>题意:给出一个关于$x$的$n$次多项式的$f(i), i\in [0, n]$,问$\sum_{i=L}^{R} f(i) \mod 9999991$</p>
<p>思路:已知一个关于$x$的$n$次多项式的前缀和为一个关于$x$的$n+1$次多项式,于是通过拉格朗日差值得到$f(n+1)$然后再进行拉格朗日差值得到<br>$\sum<em>{i=0}^{L} f(i)$以及$\sum</em>{i=0}^{R} f(i)$,减一减就可以得到答案</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, M = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">9999991</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll f[N], fac[N], facinv[N];</span><br><span class="line">ll inv[M];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= _n)</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    <span class="keyword">int</span> t = (_n &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>, base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _n; ++i) &#123;</span><br><span class="line">        base = base * (x - i) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _n; ++i, t *= <span class="number">-1</span>) &#123;</span><br><span class="line">        res += <span class="number">1l</span>l * t * f[i] * base % p * facinv[_n - i] % p * facinv[i] % p *</span><br><span class="line">               inv[x - i] % p;</span><br><span class="line">        res = (res + p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % p;</span><br><span class="line">    facinv[N - <span class="number">1</span>] = qpow(fac[N - <span class="number">1</span>], p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        facinv[i - <span class="number">1</span>] = facinv[i] * i % p;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; p; ++i)</span><br><span class="line">        inv[i] = inv[p % i] * (p - p / i) % p;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, f + i);</span><br><span class="line">        &#125;</span><br><span class="line">        f[n + <span class="number">1</span>] = gao(n, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">            f[i] = (f[i] + f[i - <span class="number">1</span>]) % p;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= m; ++cas) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (gao(n + <span class="number">1</span>, r) - gao(n + <span class="number">1</span>, l - <span class="number">1</span>) + p) % p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(20);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装python3.7</title>
    <url>/2020/02/28/centos7%E5%AE%89%E8%A3%85python3-7/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>由于centos7没有自带的python3,所以需要进行编译安装</p>
<h2 id="安装编译-以及-相关的工具"><a href="#安装编译-以及-相关的工具" class="headerlink" title="安装编译 以及 相关的工具"></a>安装编译 以及 相关的工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall "Development tools"</span><br><span class="line"></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">yum install libffi-devel -y</span><br></pre></td></tr></table></figure>
<h2 id="下载安装包解压"><a href="#下载安装包解压" class="headerlink" title="下载安装包解压"></a>下载安装包解压</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz</span><br><span class="line">tar -xvJf  Python-3.7.0.tar.xz</span><br></pre></td></tr></table></figure>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/python3 #创建编译安装目录</span><br><span class="line">cd Python-3.7.0</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure>
<h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Excel Union</title>
    <url>/2020/02/28/Python-Excel-Union/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>由于受不了每次将一堆$excel$整合在一个$excel$中，所以就有了这篇文章</p>
<h2 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br></pre></td></tr></table></figure>
<p>$xlrd$是$python$中读取$exce$l数据的</p>
<p>$xlsxwriter$是$python$中向$excel$写入数据的</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历的文件目录</span></span><br><span class="line">file_path = <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后的excel存储目录</span></span><br><span class="line">tar_file = file_path + <span class="string">'/mimxed.xlsx'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目标目录下的所有文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_path</span><span class="params">(dirname)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment"># 当前主目录,当前主目录下的所有目录,当前主目录下的所有文件</span></span><br><span class="line">    <span class="keyword">for</span> maindir, subdir, file_name_list <span class="keyword">in</span> os.walk(dirname):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> file_name_list:</span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">'xls'</span>) <span class="keyword">or</span> filename.endswith(<span class="string">'xlsx'</span>):</span><br><span class="line">                apath = os.path.join(maindir, filename)  <span class="comment"># 合并成一个完整路径</span></span><br><span class="line">                result.append(apath)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取excel文件的内容数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat_and_insert</span><span class="params">(fdir)</span>:</span></span><br><span class="line">    records = []</span><br><span class="line">    <span class="keyword">if</span> len(fdir) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> dir <span class="keyword">in</span> fdir:</span><br><span class="line">            <span class="comment"># 读取文件</span></span><br><span class="line">            data = xlrd.open_workbook(dir)</span><br><span class="line">            <span class="comment"># 第一个sheet的名字</span></span><br><span class="line">            first_sheet = data.sheet_by_index(<span class="number">0</span>).name</span><br><span class="line">            <span class="comment"># print(dir, '&gt;' * 10, first_sheet)</span></span><br><span class="line">            <span class="comment"># 获取sheet页的名称</span></span><br><span class="line">            sheet = data.sheet_by_name(first_sheet)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取表的数目</span></span><br><span class="line">            nrows = sheet.nrows</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(nrows):  <span class="comment"># 参数可根据实际情况调整</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> sheet.row_values(i)[<span class="number">2</span>] == <span class="string">''</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                records.append(sheet.row_values(i))</span><br><span class="line">    <span class="keyword">return</span> records</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_file</span><span class="params">(alist, tarfile)</span>:</span></span><br><span class="line">    <span class="comment"># 新建目标文件</span></span><br><span class="line">    wh = xlsxwriter.Workbook(tarfile)</span><br><span class="line">    wadd = wh.add_worksheet(<span class="string">'total'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(alist) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> row_num, row_data <span class="keyword">in</span> enumerate(alist):</span><br><span class="line">            wadd.write_row(row_num + <span class="number">1</span>, <span class="number">0</span>, row_data)</span><br><span class="line">    wh.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    print(start)</span><br><span class="line">    filename = all_path(file_path)</span><br><span class="line">    <span class="comment"># print(filename)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    records = concat_and_insert(filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    insert_file(records, tar_file)</span><br><span class="line"></span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    print(end)</span><br><span class="line">    print(<span class="string">"持续时间&#123;&#125;"</span>.format(end - start))</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 620 (Div. 2)</title>
    <url>/2020/02/21/Codeforces_Round_620_(Div.-2)/</url>
    <content><![CDATA[<h2 id="A-Two-Rabbits"><a href="#A-Two-Rabbits" class="headerlink" title="A. Two Rabbits"></a>A. Two Rabbits</h2><p>题意：两只$rabbit$，分别在$x,y$，相向而跳，一只跳$x$，一只跳$y$，问能能否整数秒相遇</p>
<p>思路：判断$y-x$能否整除$a+b$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 10:07:03</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll x, y, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> ((y - x) % (a + b)) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (y - x) / (a + b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Longest-Palindrome"><a href="#B-Longest-Palindrome" class="headerlink" title="B. Longest Palindrome"></a>B. Longest Palindrome</h2><p>题意：给出$n$个长度为$m$的不同的字符串，你可以选任意个并随意拼接，问最长的回文串长度</p>
<p>思路：每次都把$t$和$rev(t)$选入即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 10:09:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> res[N], mark[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        mp[s[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mark[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">string</span> t = s[i];</span><br><span class="line">        reverse(all(t));</span><br><span class="line">        <span class="keyword">if</span> (t == s[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == <span class="number">-1</span>) &#123;</span><br><span class="line">                mid = i;</span><br><span class="line">                mark[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp.count(t) &amp;&amp; !mark[mp[t]]) &#123;</span><br><span class="line">            res[++tot] = i;</span><br><span class="line">            mark[i] = mark[mp[t]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = tot * <span class="number">2</span> * m;</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="number">-1</span>)</span><br><span class="line">        tmp += m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (!tmp)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        ans += s[res[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[mid];</span><br><span class="line">    reverse(all(ans));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Air-Conditioner"><a href="#C-Air-Conditioner" class="headerlink" title="C. Air Conditioner"></a>C. Air Conditioner</h2><p>题意：一个餐馆中有个空调，每分钟可以选择上调 $1$个单位的温度或下调 $1$ 个单位的温度，当然你也可以选择不变，初始的温度为 $m$，有 $n$个食客，每个食客会在 $t_i$ 时间点到达，他所能适应的最低温度是 $l_i$ ，最高温度是 $h_i$ ，他只会在 $t_i$ 时刻逗留。问能否让所有人舒服</p>
<p>思路：按照$t$排序，每次空调的温度会从$ [ l,r ] $<br>变成$ [l -  (t<em>i - t</em>{i-1})  , r +  (t<em>{i}  - t</em>{i - 1}) ] $<br>然后和顾客的$ [ l_i,r_i ] $去$min$看能否满足即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 10:20:04</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; l &gt;&gt; r; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> t &lt; other.t; &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i].input();</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> l = m, r = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = a[i].t - a[i - <span class="number">1</span>].t;</span><br><span class="line">        l -= diff;</span><br><span class="line">        r += diff;</span><br><span class="line">        l = <span class="built_in">max</span>(l, a[i].l);</span><br><span class="line">        r = <span class="built_in">min</span>(r, a[i].r);</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Shortest-and-Longest-LIS"><a href="#D-Shortest-and-Longest-LIS" class="headerlink" title="D. Shortest and Longest LIS"></a>D. Shortest and Longest LIS</h2><p>题意：给出一个长度为$n-1$的字符串，字符串内为大于号和小于号，显然让你随意排列$1-n$个数，使得满足字符串的大小顺序，然后$LIS$长度分别最大和最小</p>
<p>思路：刚开始构造一个$n-1$顺序排列，然后遇到小于号，将连续的小于号部分翻转即可，然后得到长度最小的，同理可以得到长度最大的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 10:24:19</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = n; i &lt;= n; ++i, --j) &#123;</span><br><span class="line">        a[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; s[j] == <span class="string">'&lt;'</span>)</span><br><span class="line">            ++j;</span><br><span class="line">        reverse(a + i, a + j + <span class="number">1</span>);</span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; s[j] == <span class="string">'&gt;'</span>)</span><br><span class="line">            ++j;</span><br><span class="line">        reverse(a + i, a + j + <span class="number">1</span>);</span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-1-Trees-and-Queries"><a href="#E-1-Trees-and-Queries" class="headerlink" title="E. 1-Trees and Queries"></a>E. 1-Trees and Queries</h2><p>题意：给定一棵树，以及$q$次查询，每次查询给出$x,y,a,b,k$表示增加一条$x\rightarrow y$的边，问是否存在$a\rightarrow b$的路径，长度为$k$, 每条边可走多次</p>
<p>思路：很显然直接判断$a \rightarrow b,a \rightarrow x \rightarrow y \rightarrow b, a \rightarrow y \rightarrow x \rightarrow b$三种情况即可</p>
<p>（见过的最水的E题了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 10:33:14</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"><span class="keyword">int</span> fa[N][DEG], deg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    deg[root] = <span class="number">0</span>;</span><br><span class="line">    fa[root][<span class="number">0</span>] = root;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i) &#123;</span><br><span class="line">            fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            deg[v] = deg[u] + <span class="number">1</span>;</span><br><span class="line">            fa[v][<span class="number">0</span>] = u;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deg[u] &gt; deg[v])</span><br><span class="line">        swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> hu = deg[u], hv = deg[v];</span><br><span class="line">    <span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (det &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            tv = fa[tv][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tu == tv)</span><br><span class="line">        <span class="keyword">return</span> tu;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[tu][i] == fa[tv][i]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tu = fa[tu][i];</span><br><span class="line">        tv = fa[tv][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = LCA(u, v);</span><br><span class="line">    <span class="keyword">return</span> deg[u] + deg[v] - <span class="number">2</span> * deg[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dis(u, v) &gt;= k &amp;&amp; (dis(u, v) - k) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    G.resize(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    BFS(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _q = <span class="number">1</span>, x, y, a, b, k; _q &lt;= q; ++_q) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b &gt;&gt; k;</span><br><span class="line">        <span class="comment">// a-&gt;b</span></span><br><span class="line">        <span class="keyword">int</span> tmp = dis(a, b);</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt;= k &amp;&amp; (tmp - k) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// a-&gt;x-&gt;y-&gt;b</span></span><br><span class="line">        tmp = dis(a, x) + dis(y, b) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt;= k &amp;&amp; (tmp - k) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// a-&gt;y-&gt;x-&gt;b</span></span><br><span class="line">        tmp = dis(a, y) + dis(x, b) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt;= k &amp;&amp; (tmp - k) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F1-Animal-Observation-easy-version"><a href="#F1-Animal-Observation-easy-version" class="headerlink" title="F1. Animal Observation (easy version)"></a>F1. Animal Observation (easy version)</h2><p>题意：Gildong 计划拍摄森林中的野生动物们。森林被划分为 $m$ 个地区，依次编号为 $1$ 到 $m$，他的拍摄计划持续 $n$ 天。</p>
<p>每一天，他会选择森林中连续的 $k$ 个地区，并且录一段长为 $2$ 天的录像。（如果是最后一天，那就录一段长度为$1$ 天的录像）这样所有在这两天之内在这 $k$ 个地区中出现过的动物都会被拍摄到。</p>
<p>他知道未来 $n$ 天内每一天每一个地区会出现多少野生动物。他想拍摄下尽可能多的野生动物。注意如果一个动物被拍摄了两次，那么只会被计算一次。</p>
<p>你的任务是求出拍摄到的动物数量的最大值。</p>
<p>思路：见F2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 11:57:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">10</span>, M = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll a[M][N], s[M][N];</span><br><span class="line">ll f[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    ll t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = -INFLL;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            modify(id &lt;&lt; <span class="number">1</span>, l, mid, pos, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            modify(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, v);</span><br><span class="line">        t[id] = <span class="built_in">max</span>(t[id &lt;&lt; <span class="number">1</span>], t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ll res = -INFLL;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg[<span class="number">3</span>];  <span class="comment">// f, x, y</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            s[i][j] = s[i][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seg[<span class="number">0</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    seg[<span class="number">1</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    seg[<span class="number">2</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + k - <span class="number">1</span> &lt;= m; ++j) &#123;</span><br><span class="line">            f[j] = <span class="built_in">max</span>(seg[<span class="number">0</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, j - k),</span><br><span class="line">                       seg[<span class="number">0</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j + k, m));</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], seg[<span class="number">1</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j - k + <span class="number">1</span>, j) + s[i][j - <span class="number">1</span>]);</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j],</span><br><span class="line">                       seg[<span class="number">2</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j + <span class="number">1</span>, j + k) - s[i][j + k - <span class="number">1</span>]);</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], <span class="number">0l</span>l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + k - <span class="number">1</span> &lt;= m; ++j) &#123;</span><br><span class="line">            f[j] += s[i][j + k - <span class="number">1</span>] - s[i][j - <span class="number">1</span>] + s[i + <span class="number">1</span>][j + k - <span class="number">1</span>] -</span><br><span class="line">                    s[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            seg[<span class="number">0</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j]);</span><br><span class="line">            seg[<span class="number">1</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j] - s[i + <span class="number">1</span>][j + k - <span class="number">1</span>]);</span><br><span class="line">            seg[<span class="number">2</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j] + s[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; seg[<span class="number">0</span>].t[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F2-Animal-Observation-hard-version"><a href="#F2-Animal-Observation-hard-version" class="headerlink" title="F2. Animal Observation (hard version)"></a>F2. Animal Observation (hard version)</h2><p>题意：Gildong 计划拍摄森林中的野生动物们。森林被划分为 $m$ 个地区，依次编号为 $1$ 到 $m$，他的拍摄计划持续 $n$ 天。</p>
<p>每一天，他会选择森林中连续的 $k$ 个地区，并且录一段长为 $2$ 天的录像。（如果是最后一天，那就录一段长度为$1$ 天的录像）这样所有在这两天之内在这 $k$ 个地区中出现过的动物都会被拍摄到。</p>
<p>他知道未来 $n$ 天内每一天每一个地区会出现多少野生动物。他想拍摄下尽可能多的野生动物。注意如果一个动物被拍摄了两次，那么只会被计算一次。</p>
<p>你的任务是求出拍摄到的动物数量的最大值。</p>
<p>思路：$f[i][j]$表示第$i$天拍$[j,j+k-1]$的区间的前$i$天的最大值，那么</p>
<script type="math/tex; mode=display">
\begin{equation*}
\begin{aligned}
    &g[i][j] = 
    \left\{
    \begin{aligned}
    & f[i-1][l]-(S[i][l+k-1]-S[i][j-1]) \quad &if \ l \in [j-k, j]\\
    & f[i-1][l]-(S[i][j+k-1]-S[i][l-1]) \quad &if \ l \in [j, j+k]\\
    & f[i-1][l] &otherwise
    \end{aligned}
    \right.\\
    &f[i][j] = g[i][j] + S[i][j+k-1] - S[i][j-1] + S[i + 1][j+k-1] - S[i + 1][j-1]
\end{aligned}
\end{equation*}</script><p>所以可以用$segment \ tree$维护三种情况</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-21 11:41:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">10</span>, M = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll a[M][N], s[M][N];</span><br><span class="line">ll f[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    ll t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = -INFLL;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            modify(id &lt;&lt; <span class="number">1</span>, l, mid, pos, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            modify(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, v);</span><br><span class="line">        t[id] = <span class="built_in">max</span>(t[id &lt;&lt; <span class="number">1</span>], t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ll res = -INFLL;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg[<span class="number">3</span>];  <span class="comment">// f, x, y</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            s[i][j] = s[i][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seg[<span class="number">0</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    seg[<span class="number">1</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    seg[<span class="number">2</span>].build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + k - <span class="number">1</span> &lt;= m; ++j) &#123;</span><br><span class="line">            f[j] = <span class="built_in">max</span>(seg[<span class="number">0</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, j - k),</span><br><span class="line">                       seg[<span class="number">0</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j + k, m));</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], seg[<span class="number">1</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j - k + <span class="number">1</span>, j) + s[i][j - <span class="number">1</span>]);</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j],</span><br><span class="line">                       seg[<span class="number">2</span>].query(<span class="number">1</span>, <span class="number">1</span>, m, j + <span class="number">1</span>, j + k) - s[i][j + k - <span class="number">1</span>]);</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], <span class="number">0l</span>l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + k - <span class="number">1</span> &lt;= m; ++j) &#123;</span><br><span class="line">            f[j] += s[i][j + k - <span class="number">1</span>] - s[i][j - <span class="number">1</span>] + s[i + <span class="number">1</span>][j + k - <span class="number">1</span>] -</span><br><span class="line">                    s[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            seg[<span class="number">0</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j]);</span><br><span class="line">            seg[<span class="number">1</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j] - s[i + <span class="number">1</span>][j + k - <span class="number">1</span>]);</span><br><span class="line">            seg[<span class="number">2</span>].modify(<span class="number">1</span>, <span class="number">1</span>, m, j, f[j] + s[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; seg[<span class="number">0</span>].t[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 608 (Div. 2)</title>
    <url>/2020/02/11/Codeforces_Round_608_(Div.-2)/</url>
    <content><![CDATA[<h2 id="A-Suits"><a href="#A-Suits" class="headerlink" title="A. Suits"></a>A. Suits</h2><p>水</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-11 10:15:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    res += <span class="built_in">min</span>(a, d) * e;</span><br><span class="line">    d -= <span class="built_in">min</span>(a, d);</span><br><span class="line">    res += <span class="built_in">min</span>(b, <span class="built_in">min</span>(c, d)) * f;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    res += <span class="built_in">min</span>(b, <span class="built_in">min</span>(c, d)) * f;</span><br><span class="line">    d -= <span class="built_in">min</span>(b, <span class="built_in">min</span>(c, d));</span><br><span class="line">    res += <span class="built_in">min</span>(a, d) * e;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, c, d, e, f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span>(gao1(a, b, c, d, e, f), gao2(a, b, c, d, e, f)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Blocks"><a href="#B-Blocks" class="headerlink" title="B. Blocks"></a>B. Blocks</h2><p>题意：</p>
<p>给一个01串，每次可以将$i, i+1$翻转，问能否将其翻转成为全黑全白，输出方案（方案次数$\leq 3\cdot n$）</p>
<p>思路：</p>
<p>尝试全黑和全白，暴力翻转</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-11 10:21:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'W'</span>)</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i]) &#123;</span><br><span class="line">            a[i] ^= <span class="number">1</span>, a[i + <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[n]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = res.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">" \n"</span>[i==len - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line">            a[i] ^= <span class="number">1</span>, a[i + <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a[n]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = res.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">" \n"</span>[i == len - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Shawarma-Tent"><a href="#C-Shawarma-Tent" class="headerlink" title="C. Shawarma Tent"></a>C. Shawarma Tent</h2><p>题意：</p>
<p>有一个学校在$(sx,sy)$位置，有$n$个学生，每个人家的坐标在$(x_i,y_i)$</p>
<p>现在想要开一个$shawarma $，如果这个学生可以经过$shawarma $后到达学校依旧是最短距离，那么认定这个学生给$shawarma $带来贡献</p>
<p>求最大的贡献值和坐标</p>
<p>思路：</p>
<p>很显然把$shawarma $开在学校的上下左右是最优的，暴力算一遍取$max$即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-11 10:29:54</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sx, sy;</span><br><span class="line"><span class="keyword">int</span> x[N], y[N];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; sx &gt;&gt; sy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">-1</span>, _x = <span class="number">0</span>, _y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ex = sx + dir[i][<span class="number">0</span>], ey = sy + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(x[i] - sx) + <span class="built_in">abs</span>(y[i] - sy) ==</span><br><span class="line">                <span class="built_in">abs</span>(x[i] - ex) + <span class="built_in">abs</span>(y[i] - ey) + <span class="number">1</span>) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; Max) &#123;</span><br><span class="line">            Max = cnt, _x = ex, _y = ey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; _x &lt;&lt; <span class="string">" "</span> &lt;&lt; _y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Portals"><a href="#D-Portals" class="headerlink" title="D. Portals"></a>D. Portals</h2><p>题意：</p>
<p>有$n$个城堡，刚开始你有$k$个军队，有$m$条路径</p>
<p>你现在按照$1 - n$的顺序攻打城堡</p>
<p>每个城堡你需要至少$a_i$个军队，但是攻打城堡不耗费军队，攻打后你可以招$b_i$个军队，同时每个城堡有$c_i$的重要性</p>
<p>当你派至少一个军队留在城堡的时候算占领</p>
<p>占领只有当你刚攻打城堡的时候可以占领或者通过$m$条路径占领</p>
<p>$m$条有向路径，$u&gt;v$</p>
<p>问最后占领的城堡的最大重要性</p>
<p>如果不能攻打所有城堡输出$-1$</p>
<p>思路：</p>
<p>首先判断$-1$</p>
<p>其次对每个城堡维护一个$Max_i$，表示最远的可以通过路径可以占领的城堡下标</p>
<p>对每个城堡按照$(c_i,i)$排序，一个城堡的重要性有价值只有$Max_i+1-n$的城堡在少一个士兵的情况下依旧可以攻打，然后贪心即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-11 10:35:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c; &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> Max[N], remind[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i].input();</span><br><span class="line">        Max[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        Max[v] = <span class="built_in">max</span>(Max[v], u);</span><br><span class="line">    &#125;</span><br><span class="line">    remind[<span class="number">1</span>] = k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (remind[i] &lt; a[i].a) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remind[i + <span class="number">1</span>] = remind[i] + a[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;pII&gt; pq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pq.push(pII(a[i].c, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</span><br><span class="line">        pII t = pq.top();</span><br><span class="line">        pq.pop();</span><br><span class="line">        <span class="keyword">bool</span> F = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Max[t.second] + <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remind[i] - <span class="number">1</span> &lt; a[i].a) &#123;</span><br><span class="line">                F = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (F) &#123;</span><br><span class="line">            res += t.first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Max[t.second] + <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                remind[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Common-Number"><a href="#E-Common-Number" class="headerlink" title="E. Common Number"></a>E. Common Number</h2><p>题意：</p>
<p>定义</p>
<script type="math/tex; mode=display">
f(x)=
\begin{equation}  
\left\{  
             \begin{array}{**lr**}  
             \frac{x}{2}  \quad & if \; x \; is \; even \\
             x-1 \quad & otherwise
             \end{array}  
\right.  
\end{equation}</script><p>定义$path{x}$为通过一系列计算得到的结果</p>
<p>求最大的$y$满足$|{x|1\leq x \leq n, y \in path{x}|\geq k$</p>
<p>思路：</p>
<p>很显然这是一棵树</p>
<p>其中$2x$的父亲是$x$，$2x+1$的父亲是$2x$</p>
<p>所以就变成了最大的数，它的子树大小$\geq k$</p>
<p>那么很显然可以二分</p>
<p>我们分奇偶进行计算</p>
<p>偶数的时候要算上偶数加一的子树大小</p>
<p>对于一个数计算他的子树大小可以让他不断乘2计算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: Hsueh-</span></span><br><span class="line"><span class="comment"> * Date: 2020-02-11 11:13:58</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...)             \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;                      \</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="meta">#x <span class="meta-string">&lt;&lt; " -&gt; "; \</span></span></span><br><span class="line">        err(x);               \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span>&amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(A) A.begin(), A.end()</span></span><br><span class="line"><span class="keyword">using</span> pII = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll n, k;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">        res += <span class="built_in">min</span>(t, n - x + <span class="number">1</span>);</span><br><span class="line">        x &lt;&lt;= <span class="number">1</span>, t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    ll res = <span class="number">-1</span>;</span><br><span class="line">    ll l = <span class="number">1</span>, r = n / <span class="number">2</span>, x = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f(mid &lt;&lt; <span class="number">1</span>) + f(mid &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) &gt;= k) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            x = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, x);</span><br><span class="line">    l = <span class="number">1</span>, r = (n + <span class="number">1</span>) / <span class="number">2</span>, x = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f(<span class="number">2</span> * mid - <span class="number">1</span>) &gt;= k) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            x = <span class="number">2</span> * mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span>(res, x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>最大团 Bron-Kerbosch</title>
    <url>/2020/02/03/%E6%9C%80%E5%A4%A7%E5%9B%A2_Bron-Kerbosch/</url>
    <content><![CDATA[<h2 id="Bron-Kerbosch"><a href="#Bron-Kerbosch" class="headerlink" title="Bron-Kerbosch"></a>Bron-Kerbosch</h2><h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h2><p>Bron-Kerbosch 算法用于计算图中的最大的全连通分量，即计算图的最大团。</p>
<h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h2><p>Bron-Kerbosch 算法的基础形式是一个递归回溯的搜索算法，其通过给定三个集合: $R,P,X$ 来递归的进行搜索</p>
<ul>
<li>初始化集合 $R,X$ 分别为空，集合 $P$ 为所有顶点的集合</li>
<li>每次从集合 $P$ 中取顶点 ${v_i}$，当集合中没有顶点时，有两种情况：<ul>
<li>集合 $R$ 是最大团，此时集合 $X$ 为空</li>
<li>无最大团，此时回溯</li>
</ul>
</li>
<li>对于每一个从集合 $P$ 中取得的顶点 $v_i$，有如下处理<ul>
<li>将顶点 ${v_i}$ 加到集合$R$ 中，集合 $P,X$ 与顶点 ${v_i}$ 的邻接顶点集合 $N{v_i}$ 相交，之后递归集合 $R,P,X$</li>
<li>从集合 $P$ 中删除顶点 ${v_i}$，并将顶点 ${v_i}$ 添加到集合$X$ 中</li>
<li>若集合 $P,X$ 都为空，则集合$R$ 即为最大团</li>
</ul>
</li>
</ul>
<p>总的来看，就是每次从集合 $P$ 中取 $v_i$ 后，再从 $P \cap N{v_i}$集合中取相邻结点，保证集合 $R$ 中任意顶点间都两两相邻</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BronKerbosch1(R,P,X):</span><br><span class="line">    <span class="keyword">if</span> P and X are both empty:</span><br><span class="line">        report R as a maximal clique</span><br><span class="line">    <span class="keyword">for</span> each vertex v <span class="keyword">in</span> P:</span><br><span class="line">        BronKerbosch1(R ⋃ &#123;v&#125;, P ⋂ N(v), X ⋂ N(v))</span><br><span class="line">        P := P \ &#123;v&#125;</span><br><span class="line">        X := X ⋃ &#123;v&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-算法优化"><a href="#3-算法优化" class="headerlink" title="3. 算法优化"></a>3. 算法优化</h2><p>对于基础的算法，由于其递归搜索了所有情况，对其中有些不是最大团的也进行了搜索，效率不高，为了节省时间让算法更快的回溯，可以通过设定关键点来进行搜索。</p>
<p>由于对于任意的最大团，其必须包括顶点${u}$ 或 $N-N{u}$，不然其必然需要通过添加它们来进行扩充，这显然矛盾，所以仅需测试顶点 ${u}$ 以及 $N-N{u}$ 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BronKerbosch2(R,P,X):</span><br><span class="line">    <span class="keyword">if</span> P and X are both empty:</span><br><span class="line">        report R as a maximal clique</span><br><span class="line">    choose a pivot vertex u <span class="keyword">in</span> P ⋃ X</span><br><span class="line">    <span class="keyword">for</span> each vertex v <span class="keyword">in</span> P \ N(u):</span><br><span class="line">       BronKerbosch2(R ⋃ &#123;v&#125;, P ⋂ N(v), X ⋂ N(v))</span><br><span class="line">       P := P \ &#123;v&#125;</span><br><span class="line">       X := X ⋃ &#123;v&#125;</span><br></pre></td></tr></table></figure>
<p>由于其是通过选择特殊点，来进行最小化递归调用，一定程度上节省了时间，但还可以与降序的方式结合使用，来保证在线性的时间内求子图的最大团</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BronKerbosch3(G):</span><br><span class="line">    P = V(G)</span><br><span class="line">    R = X = empty</span><br><span class="line">    <span class="keyword">for</span> each vertex v <span class="keyword">in</span> a degeneracy ordering of G:</span><br><span class="line">        BronKerbosch2(R ⋃ &#123;v&#125;, P ⋂ N(v), X ⋂ N(v))</span><br><span class="line">        P := P \ &#123;v&#125;</span><br><span class="line">        X := X ⋃ &#123;v&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-算法实现"><a href="#4-算法实现" class="headerlink" title="4. 算法实现"></a>4. 算法实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> group[N], vis[N], res, cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> _cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = u + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] + _cnt &lt;= res) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (G[u][i]) &#123;</span><br><span class="line">            <span class="keyword">bool</span> F = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _cnt; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!G[i][vis[j]]) &#123;</span><br><span class="line">                    F = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!F) <span class="keyword">continue</span>;</span><br><span class="line">            vis[_cnt] = i;</span><br><span class="line">            <span class="keyword">if</span> (gao(i, _cnt + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_cnt &gt; res) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _cnt; ++i) &#123;</span><br><span class="line">            group[i] = vis[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res = _cnt;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxclique</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    res = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        vis[<span class="number">0</span>] = i;</span><br><span class="line">        gao(i, <span class="number">1</span>);</span><br><span class="line">        cnt[i] = res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[u][v] = G[v][u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    G[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    G[i][j] ^= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxclique();</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, group[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 4578</title>
    <url>/2019/11/05/HDU-4578/</url>
    <content><![CDATA[<h1 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h1><p>区间维护加法，乘法，赋值，求三次方的和</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>an <strong>very</strong> old problem</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">int</span> sum[<span class="number">3</span>], lazy[<span class="number">3</span>];<span class="comment">//+ * =</span></span><br><span class="line">        node() &#123;</span><br><span class="line">            sum[<span class="number">0</span>] = sum[<span class="number">1</span>] = sum[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            lazy[<span class="number">0</span>] = lazy[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            lazy[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node(<span class="keyword">int</span> _l, <span class="keyword">int</span> _r) &#123;</span><br><span class="line">            l = _l;</span><br><span class="line">            r = _r;</span><br><span class="line">            sum[<span class="number">0</span>] = sum[<span class="number">1</span>] = sum[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            lazy[<span class="number">0</span>] = lazy[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            lazy[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = t[id].r - t[id].l + <span class="number">1</span>;</span><br><span class="line">        t[id].sum[<span class="number">2</span>] = (t[id].sum[<span class="number">2</span>] + (len * v % p * v % p * v % p) + (<span class="number">3</span> * v % p * v % p * t[id].sum[<span class="number">0</span>] % p) +</span><br><span class="line">                        (<span class="number">3</span> * v % p * t[id].sum[<span class="number">1</span>] % p)) % p;</span><br><span class="line">        t[id].sum[<span class="number">1</span>] = (t[id].sum[<span class="number">1</span>] + (<span class="number">2</span> * v % p * t[id].sum[<span class="number">0</span>] % p) + (len * v % p * v % p)) % p;</span><br><span class="line">        t[id].sum[<span class="number">0</span>] = (t[id].sum[<span class="number">0</span>] + len * v % p) % p;</span><br><span class="line">        t[id].lazy[<span class="number">0</span>] = (t[id].lazy[<span class="number">0</span>] + v) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        t[id].sum[<span class="number">0</span>] = (t[id].sum[<span class="number">0</span>] * v) % p;</span><br><span class="line">        t[id].sum[<span class="number">1</span>] = (t[id].sum[<span class="number">1</span>] * v % p * v) % p;</span><br><span class="line">        t[id].sum[<span class="number">2</span>] = (t[id].sum[<span class="number">2</span>] * v % p * v % p * v) % p;</span><br><span class="line">        t[id].lazy[<span class="number">0</span>] = t[id].lazy[<span class="number">0</span>] * v % p;</span><br><span class="line">        t[id].lazy[<span class="number">1</span>] = t[id].lazy[<span class="number">1</span>] * v % p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">equ</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = t[id].r - t[id].l + <span class="number">1</span>;</span><br><span class="line">        t[id].sum[<span class="number">0</span>] = len * v % p;</span><br><span class="line">        t[id].sum[<span class="number">1</span>] = t[id].sum[<span class="number">0</span>] * v % p;</span><br><span class="line">        t[id].sum[<span class="number">2</span>] = t[id].sum[<span class="number">1</span>] * v % p;</span><br><span class="line">        t[id].lazy[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        t[id].lazy[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        t[id].lazy[<span class="number">2</span>] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node(l, r);</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t[id].l &gt;= t[id].r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (t[id].lazy[<span class="number">2</span>]) &#123;</span><br><span class="line">            equ(id &lt;&lt; <span class="number">1</span>, t[id].lazy[<span class="number">2</span>]);</span><br><span class="line">            equ(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, t[id].lazy[<span class="number">2</span>]);</span><br><span class="line">            t[id].lazy[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[id].lazy[<span class="number">1</span>] != <span class="number">1</span>) &#123;</span><br><span class="line">            mul(id &lt;&lt; <span class="number">1</span>, t[id].lazy[<span class="number">1</span>]);</span><br><span class="line">            mul(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, t[id].lazy[<span class="number">1</span>]);</span><br><span class="line">            t[id].lazy[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[id].lazy[<span class="number">0</span>]) &#123;</span><br><span class="line">            add(id &lt;&lt; <span class="number">1</span>, t[id].lazy[<span class="number">0</span>]);</span><br><span class="line">            add(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, t[id].lazy[<span class="number">0</span>]);</span><br><span class="line">            t[id].lazy[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lson = id &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rson = id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">        t[id].sum[<span class="number">0</span>] = (t[lson].sum[<span class="number">0</span>] + t[rson].sum[<span class="number">0</span>]) % p;</span><br><span class="line">        t[id].sum[<span class="number">1</span>] = (t[lson].sum[<span class="number">1</span>] + t[rson].sum[<span class="number">1</span>]) % p;</span><br><span class="line">        t[id].sum[<span class="number">2</span>] = (t[lson].sum[<span class="number">2</span>] + t[rson].sum[<span class="number">2</span>]) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> op, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t[id].l &gt;= ql &amp;&amp; t[id].r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">                add(id, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                mul(id, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">                equ(id, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        down(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (t[id].l + t[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, ql, qr, op, v);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, ql, qr, op, v);</span><br><span class="line">        up(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t[id].l &gt;= ql &amp;&amp; t[id].r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id].sum[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        down(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (t[id].l + t[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) res = (res + query(id &lt;&lt; <span class="number">1</span>, ql, qr, idx)) % p;</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) res = (res + query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, ql, qr, idx)) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; q == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> op, a, b, c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;op, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            <span class="keyword">if</span> (op &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">                seg.update(<span class="number">1</span>, a, b, op - <span class="number">1</span>, c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, seg.query(<span class="number">1</span>, a, b, c - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>2020_HZNU_winter_camp_最短路</title>
    <url>/2019/11/05/HZNU_winter_camp_%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="HDU-1874"><a href="#HDU-1874" class="headerlink" title="HDU 1874"></a>HDU 1874</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                dis[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span> (i == j) dis[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            w = <span class="built_in">min</span>(w, dis[u][v]);</span><br><span class="line">            dis[u][v] = dis[v][u] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="keyword">int</span> S, T;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;S, &amp;T);</span><br><span class="line">        <span class="keyword">if</span> (dis[S][T] == INF) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[S][T]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-1869"><a href="#HDU-1869" class="headerlink" title="HDU 1869"></a>HDU 1869</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[i][j] &gt; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                dis[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span> (i == j) dis[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            dis[u][v] = dis[v][u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="built_in">puts</span>(ok() ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-2066"><a href="#HDU-2066" class="headerlink" title="HDU 2066"></a>HDU 2066</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> w) : to(to), w(w) &#123;&#125;</span><br><span class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> S, D, s[N], d[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, w;</span><br><span class="line"></span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    qnode(<span class="keyword">int</span> u, <span class="keyword">int</span> w) : u(u), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;qnode&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(qnode(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = G[u].<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i].to, w = G[u][i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(qnode(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;S, &amp;D) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            G[u].push_back(Edge(v, w));</span><br><span class="line">            G[v].push_back(Edge(u, w));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s + i);<span class="comment">// 0-&gt;s[i] s[i]-&gt;0</span></span><br><span class="line">            G[<span class="number">0</span>].push_back(Edge(s[i], <span class="number">0</span>));</span><br><span class="line">            G[s[i]].push_back(Edge(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> res = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= D; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, d + i);</span><br><span class="line">            res = <span class="built_in">min</span>(res, dis[d[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-1217"><a href="#HDU-1217" class="headerlink" title="HDU 1217"></a>HDU 1217</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">double</span> dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">max</span>(dis[i][j], dis[i][k] * dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i][i] &gt; <span class="number">1.0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas++ &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dis[i][i] = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            mp[s] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="keyword">double</span> c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; c &gt;&gt; b;</span><br><span class="line">            dis[mp[a]][mp[b]] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (ok() ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-4725"><a href="#HDU-4725" class="headerlink" title="HDU 4725"></a>HDU 4725</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; E[N];</span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">int</span> n, m, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(-dist[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[now].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[now][i].first;</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[now] + E[now][i].second) &#123;</span><br><span class="line">                dist[v] = dist[now] + E[now][i].second;</span><br><span class="line">                q.push(make_pair(-dist[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, INF, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        E[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, cas = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            E[temp * <span class="number">2</span> - <span class="number">1</span> + n].push_back(make_pair(i, <span class="number">0</span>));</span><br><span class="line">            E[i].push_back(make_pair(temp * <span class="number">2</span> + n, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y, z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            E[x].push_back(make_pair(y, z));</span><br><span class="line">            E[y].push_back(make_pair(x, z));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">                E[n + <span class="number">2</span> * i].push_back(make_pair(n + <span class="number">2</span> * i - <span class="number">3</span>, c));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != n) &#123;</span><br><span class="line">                E[n + <span class="number">2</span> * i].push_back(make_pair(n + <span class="number">2</span> * i + <span class="number">1</span>, c));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra();</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == INF) dist[n] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++cas, dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-2962"><a href="#HDU-2962" class="headerlink" title="HDU 2962"></a>HDU 2962</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, h, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> h, <span class="keyword">int</span> w) : to(to), h(h), w(w) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, w;</span><br><span class="line"></span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    qnode(<span class="keyword">int</span> u, <span class="keyword">int</span> w) : u(u), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;qnode&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(qnode(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = G[u].<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h &gt; G[u][i].h) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i].to, w = G[u][i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(qnode(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (cas) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        cas++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, cas);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> Min = INF, Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, h, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;u, &amp;v, &amp;h, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (h == <span class="number">-1</span>) &#123;</span><br><span class="line">                h = INF;</span><br><span class="line">            &#125;</span><br><span class="line">            Min = <span class="built_in">min</span>(Min, h);</span><br><span class="line">            Max = <span class="built_in">max</span>(Max, h);</span><br><span class="line">            G[u].push_back(Edge(v, h, w));</span><br><span class="line">            G[v].push_back(Edge(u, h, w));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> st, ed, limit;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;st, &amp;ed, &amp;limit);</span><br><span class="line">        Max = <span class="built_in">min</span>(Max, limit);</span><br><span class="line">        Dijkstra(st, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> l = Min, r = Max, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            Dijkstra(st, mid);</span><br><span class="line">            <span class="keyword">if</span> (dis[ed] != INF) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">                res = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="number">-1</span>) &#123;</span><br><span class="line">            Dijkstra(st, res);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"maximum height = %d\n"</span>, res);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"length of shortest route = %d\n"</span>, dis[ed]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cannot reach destination\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-4857"><a href="#HDU-4857" class="headerlink" title="HDU 4857"></a>HDU 4857</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> in[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            --in[v];</span><br><span class="line">            <span class="keyword">if</span> (in[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) in[i] = <span class="number">0</span>;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            in[u]++;</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        topsort();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ans.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == <span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HYSBZ-2456"><a href="#HYSBZ-2456" class="headerlink" title="HYSBZ 2456"></a>HYSBZ 2456</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, num; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">			<span class="keyword">if</span> (!tot)</span><br><span class="line">			&#123;</span><br><span class="line">				ans = num;</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (num == ans) ++tot;</span><br><span class="line">			<span class="keyword">else</span> --tot;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HihoCoder-1081"><a href="#HihoCoder-1081" class="headerlink" title="HihoCoder 1081"></a>HihoCoder 1081</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> w) : to(to), w(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, T;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, w;</span><br><span class="line"></span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    qnode(<span class="keyword">int</span> u, <span class="keyword">int</span> w) : u(u), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;qnode&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(qnode(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = G[u].<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i].to, w = G[u][i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(qnode(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;S, &amp;T) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            G[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            G[u].push_back(Edge(v, w));</span><br><span class="line">            G[v].push_back(Edge(u, w));</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(S);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[T]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HihoCoder-1089"><a href="#HihoCoder-1089" class="headerlink" title="HihoCoder 1089"></a>HihoCoder 1089</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) dis[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> dis[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            w = <span class="built_in">min</span>(dis[u][v], w);</span><br><span class="line">            dis[u][v] = dis[v][u] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, dis[i][j], <span class="string">" \n"</span>[j == n]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>讲课</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流拓展</title>
    <url>/2019/11/05/%E7%BD%91%E7%BB%9C%E6%B5%81%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>给定一个有向图$G=(V, E)$，其中每条边$(u, v)$都有一个非负的容量值，记做$c(u, v)\geq 0$，同时图中存在两个特殊点源点$S$, 汇点$T$。其中从源点$S$到汇点$T$的最大可行流量，这个问题也被称为<strong>最大流问题</strong></p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li>容量限制：对于任意的$ &lt; u, v > \in V,f(u,v)\leq c(u,v)$</li>
<li>反对称性：对于任意的$ &lt; u,v > \in V,f(u,v)=-f(v,u)$</li>
<li>流量守恒：对于任意的$u$，若$u$不为$S$且不为$T$，那么$\sum f(u,v)=0$，即$u$到相邻节点的流量和为$0$，因为流入$u$的流量和$u$流出的流量相等，节点$u$本身不会产生和消耗流量。</li>
</ul>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>寻找增广路，不断更新残余网络，直到找不到任何增广路</p>
<h2 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于一个网络流$G=(V,E)$，其割的定义是一种点的划分方式，将所有点划分为$S$和$T=V-S$两部分，其中源点$s\in S$，汇点$t \in T$。对于一个割$(S,T)$，定义净流$f(S,T)$表示穿过割$S,T$的流量和。</p>
<script type="math/tex; mode=display">
f(S,t)=\sum f(u,v) | u\in S, v \in T</script><p>其中任意一个割的净流$f(S,T)$总是和网络流的流量$f$相等</p>
<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>根据网络流的定义，只有源点$s$会产生流量，汇点$t$会接收流量。因此对于任意非$s$和$t$的点$u$，净流量一定是$0$，也就是$\sum f(u,v)=0$。而源点$s$的流量最终都会经过割$(S,T)$的边到达汇点$t$，所以网络流的流$f$等于割的净流$f(S,T)$</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>在所有可能的割中，存在一个容量最小的割，我们称其为<strong>最小割</strong></p>
<p>对于任意网络流图而言，其最大流一定小于等于最小割</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>对于一个网络流图$G=(V,E)$，其中有源点$s$和汇点$t$，我们可以推出一个最大流最小割定理</p>
<ul>
<li>流$f$是图$G$的最大流</li>
<li>残留网络$Gf$不存在增广路</li>
<li>对于$G$的某一个割$(S,T)$，此时$f=C(S,T)$</li>
</ul>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>$1 \Rightarrow 2$</p>
<p>利用反证法，假设$f$是$G$的最大流，但是残留网络中存在增广路$p$，流量为$fp$，那么我们又$f’=f+fp&gt;f$。和$1$矛盾</p>
<p>$2 \Rightarrow 3$</p>
<p>假设参与网络$Gf$不存在增广路，所以在参与网络$Gf$中不存在路径从$s$到达$t$。我们定义$S$集合为：当前残留网络汇中$s$能够到达的点。同时定义$T = V - S$</p>
<p>此时$(S,T)$构成一个割$S,T$。且对于任意的$u \in S, v \in T$有$f(u,v)=c(u,v)$。若$f(u,v)<c(u,v)$则由$Gf(u,v)>0$，$s$可以到达$v$，与$v$属于$T$矛盾</p>
<p>$3 \Rightarrow 1$</p>
<p>由于$f$的上界是最小割，当$f$到达割的容量的时候，显然达到了最大值，因此$f$是最大流</p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="二分图多重匹配"><a href="#二分图多重匹配" class="headerlink" title="二分图多重匹配"></a>二分图多重匹配</h3><p><img src="z\网络流拓展\1.png" alt="1"></p>
<p>$S$连向$A$，流量为$A$中点可以连接的数量，$A$连向$B$表示可以匹配，$B$连向$T$，流量为可以连接的数量</p>
<h3 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a>最小路径覆盖</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>给定一个有向无环图，用最少的路径数量去保证所有点都被覆盖住</p>
<p><img src="/upload\网络流拓展\2.png" alt="2"></p>
<p>对于每条路径，起点入度都为$0$，终点的出度都为$0$，中间节点的出入读都为$0$</p>
<p>每个点最多有一个前驱，同时最多有一个后继节点</p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p><img src="/upload\网络流拓展\3.png" alt="3"></p>
<p>将每个点$u$拆成$u,u’$，其中$S$连向每个$u$，每个$u’$连向$T$，对于每条边$(u,v)$，建立边$u\rightarrow v’$，跑网络流，最终答案为点数$-$最大流</p>
<h3 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>给定一有向图，从中选择一些点组成点集$V$。对于每个$V$中的节点，其后续节点仍然需要在$V$中。最权值最大的子图</p>
<h4 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h4><p><img src="/upload\网络流拓展\4.png" alt="4"></p>
<p>首先建立源点$s$和汇点$t$，将源点$s$和所有权值为正的点相连，流量为权值，将所有权值为负的点和汇点$t$相连，流量为权值的绝对值，权值为$0$的点不做选择，同时将原来的边的流量设置为无穷大，答案为所有正权值和$-$最小割</p>
<h4 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h4><ul>
<li>最小割一定是简单割<ul>
<li>简单割指得是：割$(S,T)$中每一条割边都与$s$或者$t$关联，这样的割叫做简单割。 </li>
</ul>
</li>
<li>简单割一定和一个闭合子图对应<ul>
<li>闭合子图$V$和源点$s$构成$S$集，其余点和汇点$t$构成$T$集</li>
</ul>
</li>
</ul>
<h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><ul>
<li><p>闭合子图是简单割 </p>
<ul>
<li>若闭合子图对应的割$(S,T)$不是简单割，则存在一条边$(u,v)$，$u\in S$，$v \in T$，且$c(u,v)=\infty$。说明u的后续节点$v$不在$S$中，产生矛盾 </li>
</ul>
</li>
<li><p>简单割是闭合子图 </p>
<ul>
<li>对于$V$中任意一个点$u$，$u\in S$。$u$的任意一条出边$c(u,v)=\infty$，不会在简单割的割边集中，因此$v$不属于$T$，$v\in S$。所以$V$的所有点均在$S$中，因此$S-s$是闭合子图</li>
</ul>
</li>
<li><p>最小割就是最大权的闭合子图 </p>
<ul>
<li>割的容量$C(S,T)=T$中所有正权点的点权之和等于$+S$中所有负权点的权值绝对值之和</li>
<li>闭合子图的权值$W=S$中所有正权点的权值之和$-S$中所有负权点的权值绝对值之和</li>
<li>$C(S,T)+W=T$中所有正权点的权值之和$+S$中所有正权点的权值之和$=$所有正权点的权值之和</li>
<li>所以$W=$所有正权点的权值之和$-C(S,T)$</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和优化建图2-SAT</title>
    <url>/2019/10/25/%E5%89%8D%E7%BC%80%E5%92%8C%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE2-SAT/</url>
    <content><![CDATA[<h2 id="BZOJ-3495-PA2010-Riddle"><a href="#BZOJ-3495-PA2010-Riddle" class="headerlink" title="BZOJ #3495. PA2010 Riddle"></a>BZOJ #3495. PA2010 Riddle</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有$n$个城镇被分成了$k$个郡，有m条连接城镇的无向边。</p>
<p>要求给每个郡选择一个城镇作为首都，满足每条边至少有一个端点是首都。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每个城市只有是或者不是两个状态，很显然的$2-SAT$，其中$M$条边$(u, v)$很显然建边$u’\rightarrow v, v’\rightarrow u$</p>
<p>对于每个郡只有一个城镇是首都</p>
<p>我们考虑前缀和。</p>
<p>首先新增$n$个点，对于$i$对应的新的节点为$i+n$。那么我们的$i+n$表示当前郡的前$i$个是否应有城市是否为首都，那么如果$i-1+n$选了，$i+n$必定选了，$i+n$没选，$i-1+n$必定没选。同时如果$i$选了，那么$i-1+n$必定没选，如果$i - 1 + n$选了，$i$一定没选</p>
<p>我们令$u1=i-1,u2=i,v1=i-1+n,v2=i+n$</p>
<p>那么需要建边</p>
<ul>
<li>$v1\rightarrow v2$</li>
<li>$v2’\rightarrow v1’$</li>
<li>$u2\rightarrow v1’$</li>
<li>$v1 \rightarrow u2’$</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt) : to(to), nxt(nxt) &#123;&#125;</span><br><span class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u]);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Low[N], DFN[N], Stack[N], Belong[N];</span><br><span class="line"><span class="keyword">int</span> Index, top;</span><br><span class="line"><span class="keyword">int</span> scc;</span><br><span class="line"><span class="keyword">bool</span> Instack[N];</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Low[u] = DFN[u] = ++Index;</span><br><span class="line">    Stack[top++] = u;</span><br><span class="line">    Instack[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">        v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!DFN[v]) &#123;</span><br><span class="line">            Tarjan(v);</span><br><span class="line">            <span class="keyword">if</span> (Low[u] &gt; Low[v]) Low[u] = Low[v];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Instack[v] &amp;&amp; Low[u] &gt; DFN[v]) &#123;</span><br><span class="line">            Low[u] = DFN[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Low[u] == DFN[u]) &#123;</span><br><span class="line">        scc++;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = Stack[--top];</span><br><span class="line">            Instack[v] = <span class="literal">false</span>;</span><br><span class="line">            Belong[v] = scc;</span><br><span class="line">            num[scc]++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(DFN, <span class="number">0</span>, <span class="keyword">sizeof</span> DFN);</span><br><span class="line">    <span class="built_in">memset</span>(Instack, <span class="literal">false</span>, <span class="keyword">sizeof</span> Instack);</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num);</span><br><span class="line">    Index = scc = top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!DFN[i]) &#123;</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Belong[i] == Belong[i ^ <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k) != EOF) &#123;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">            --x, --y;</span><br><span class="line">            addedge(x &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, y &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            addedge(y &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i, y = i + n;</span><br><span class="line">            addedge(x &lt;&lt; <span class="number">1</span>, y &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            addedge(y &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, x &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, w; i &lt;= k; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + j);</span><br><span class="line">                --a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= w; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j - <span class="number">1</span>], y = a[j];</span><br><span class="line">                addedge((x + n) &lt;&lt; <span class="number">1</span>, (y + n) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                addedge(((y + n) &lt;&lt; <span class="number">1</span>) ^ <span class="number">1</span>, ((x + n) &lt;&lt; <span class="number">1</span>) ^ <span class="number">1</span>);</span><br><span class="line">                addedge(y &lt;&lt; <span class="number">1</span>, (x + n) &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">                addedge((x + n) &lt;&lt; <span class="number">1</span>, y &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve(<span class="number">4</span> * n) ? <span class="string">"TAK"</span> : <span class="string">"NIE"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树优化建图</title>
    <url>/2019/10/14/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="线段树优化建图"><a href="#线段树优化建图" class="headerlink" title="线段树优化建图"></a>线段树优化建图</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>需要多次一个区间向另一个区间连边的建图，求图的一些信息</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>建立两颗线段树，分别为$treeIn, treeOut$表示入边和出边</p>
<p>那么</p>
<ul>
<li>到了$treeIn$的某个节点表示这个点所表示的区间进入</li>
<li>到了$treeOut$的某个节点表示从这个点表示的区间出去</li>
</ul>
<p>连边：</p>
<ul>
<li>$treeIn$父亲节点向儿子节点连权值为$0$的边，表示进入这个父亲节点的边也可以到儿子节点</li>
<li>$treeOut$儿子节点向父亲节点连权值为$0$的边，表示从这个父亲节点出去的边也可以从儿子也可以走</li>
</ul>
<p>那么对于每次连边最多连$log_2^n$条边</p>
<p>所以有$4<em>n$个点，$4</em>n+m*log_2^n$条边</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>CF 786B</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> w) : v(v), w(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Edge&gt;&gt; G;</span><br><span class="line"><span class="keyword">int</span> n, q, s, treeIn[N &lt;&lt; <span class="number">2</span>], treeOut[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">ll dis[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        treeIn[id] = l;</span><br><span class="line">        treeOut[id] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    treeIn[id] = ++cnt;</span><br><span class="line">    treeOut[id] = ++cnt;</span><br><span class="line">    G[treeOut[id &lt;&lt; <span class="number">1</span>]].push_back(Edge(treeOut[id], <span class="number">0</span>));</span><br><span class="line">    G[treeOut[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]].push_back(Edge(treeOut[id], <span class="number">0</span>));</span><br><span class="line">    G[treeIn[id]].push_back(Edge(treeIn[id &lt;&lt; <span class="number">1</span>], <span class="number">0</span>));</span><br><span class="line">    G[treeIn[id]].push_back(Edge(treeIn[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateIn</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> from, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        G[from].push_back(Edge(treeIn[id], cost));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) updateIn(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, from, cost);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) updateIn(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, from, cost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateOut</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> to, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        G[treeOut[id]].push_back(Edge(to, cost));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) updateOut(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, to, cost);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) updateOut(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, to, cost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> v, <span class="keyword">int</span> w) : v(v), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; pq;</span><br><span class="line">    pq.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = pq.top().v;</span><br><span class="line">        pq.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;item: G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[item.v] &gt; dis[u] + item.w) &#123;</span><br><span class="line">                dis[item.v] = dis[u] + item.w;</span><br><span class="line">                pq.push(node(item.v, dis[item.v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;q, &amp;s) != EOF) &#123;</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(N &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        cnt = n;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> _q = <span class="number">1</span>, op, u, v, l, r, w; _q &lt;= q; ++_q) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">                G[u].push_back(Edge(v, w));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;u, &amp;l, &amp;r, &amp;w);</span><br><span class="line">                updateIn(<span class="number">1</span>, <span class="number">1</span>, n, l, r, u, w);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;v, &amp;l, &amp;r, &amp;w);</span><br><span class="line">                updateOut(<span class="number">1</span>, <span class="number">1</span>, n, l, r, v, w);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                assert(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, dis[i] == INF ? <span class="number">-1</span> : dis[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>The 2018 ACM-ICPC Asia Beijing Regional Contest</title>
    <url>/2019/10/14/The-2018-ACM-ICPC-Asia-Beijing-Regional-Contest/</url>
    <content><![CDATA[<h2 id="A-Jin-Yong’s-Wukong-Ranking-List"><a href="#A-Jin-Yong’s-Wukong-Ranking-List" class="headerlink" title="A. Jin Yong’s Wukong Ranking List"></a>A. Jin Yong’s Wukong Ranking List</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[N][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp.count(str)) <span class="keyword">return</span> mp[str];</span><br><span class="line">    mp[str] = ++tot;</span><br><span class="line">    <span class="keyword">return</span> mp[str];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    G.<span class="built_in">clear</span>();G.resize(tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = getId(s[i][<span class="number">0</span>]), v= getId(s[i][<span class="number">1</span>]);</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        ++d[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i]) <span class="keyword">continue</span>;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt != tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i][<span class="number">0</span>] &gt;&gt; s[i][<span class="number">1</span>];</span><br><span class="line">            getId(s[i][<span class="number">0</span>]);</span><br><span class="line">            getId(s[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> F = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gao(i)) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; s[i][<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; s[i][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                F = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (F) <span class="built_in">cout</span> &lt;&lt; <span class="string">"0\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Heshen’s-Account-Book"><a href="#B-Heshen’s-Account-Book" class="headerlink" title="B. Heshen’s Account Book"></a>B. Heshen’s Account Book</h2><p>模拟题</p>
<p>$Tips：$</p>
<ul>
<li>注意行末和下一行的连接</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> pSI = pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N], num[N], pos;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isdigit</span>(str[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function">pSI <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pSI tmp = pSI(<span class="string">""</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; len &amp;&amp; t[pos] == <span class="string">' '</span>) ++pos;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; len &amp;&amp; t[pos] != <span class="string">' '</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.second == <span class="number">-1</span>) tmp.second = vis[pos];</span><br><span class="line">        tmp.first += t[pos];</span><br><span class="line">        ++pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    s = t = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">if</span> (!t.empty() &amp;&amp; <span class="built_in">isdigit</span>(t.<span class="built_in">end</span>()[<span class="number">-1</span>]) &amp;&amp; <span class="built_in">isdigit</span>(s[<span class="number">0</span>])) &#123;</span><br><span class="line">            t += s;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t += <span class="string">" "</span>;</span><br><span class="line">            t += s;</span><br><span class="line">            ++pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre + <span class="number">1</span>; i &lt; length; ++i) vis[i] = n;</span><br><span class="line">        pre = length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len = t.<span class="built_in">size</span>();</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        pSI tmp = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span> (tmp.second == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (f(tmp.first)) &#123;</span><br><span class="line">            ++num[tmp.second];</span><br><span class="line">            vec.push_back(tmp.first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, sze = vec.<span class="built_in">size</span>(); i &lt; sze; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">" \n"</span>[i == sze - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Frog-and-Portal"><a href="#D-Frog-and-Portal" class="headerlink" title="D. Frog and Portal"></a>D. Frog and Portal</h2><p>构造</p>
<p>一个数可以被拆解成若干个斐波那契数，那么构造一种传送门方案使得走法是若干个斐波那契数累加即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll m;</span><br><span class="line">ll f[N];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">50</span>; ++i) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"2\n1 1\n2 1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">50</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m &gt;= f[i]) &#123;</span><br><span class="line">                a[++*a] = i;</span><br><span class="line">                m -= f[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= *a; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="number">2</span> * i - <span class="number">1</span>, <span class="number">200</span> - a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="number">2</span> * *a, <span class="number">2</span> * *a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Approximate-Matching"><a href="#H-Approximate-Matching" class="headerlink" title="H. Approximate Matching"></a>H. Approximate Matching</h2><p>题意：给出一个长度为$n$个长度模式串，问有多少个长度为$m$文本串使得$Approximate Matching($找到一个最多一个字符不一样的子串$)$</p>
<p>思路：构建$ACAM$，在$ACAM$上$dp$</p>
<p>$dp[i][j]$表示文本串的$i$个字符在$trie$的$j$节点转移即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt;  #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">ll f[<span class="number">50</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nx[<span class="number">2</span>], fail;</span><br><span class="line">        <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line">        node() &#123;</span><br><span class="line">            <span class="built_in">memset</span>(nx, <span class="number">-1</span>, <span class="keyword">sizeof</span> nx);</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; t[N];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> root, tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        t[tot] = node();</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        root = newnode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[now].nx[s[i] - <span class="string">'0'</span>] == <span class="number">-1</span>)</span><br><span class="line">                t[now].nx[s[i] - <span class="string">'0'</span>] = newnode();</span><br><span class="line">            now = t[now].nx[s[i] - <span class="string">'0'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++t[now].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        t[root].fail = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[root].nx[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                t[root].nx[i] = root;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t[t[root].nx[i]].fail = root;</span><br><span class="line">                q.push(t[root].nx[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[now].nx[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    t[now].nx[i] = t[t[now].fail].nx[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[now].nx[i]].fail = t[t[now].fail].nx[i];</span><br><span class="line">                    q.push(t[now].nx[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ll <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= tot; ++j)</span><br><span class="line">                f[i][j] = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>][root] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[j].cnt &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t[j].nx[k] != <span class="number">-1</span>) &#123;</span><br><span class="line">                        f[i + <span class="number">1</span>][t[j].nx[k]] += f[i][j];</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = <span class="number">1l</span>l &lt;&lt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i].cnt) <span class="keyword">continue</span>;</span><br><span class="line">            res -= f[m][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; acam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        acam.Init();</span><br><span class="line">        acam.insert(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            str[i] = ((str[i] - <span class="string">'0'</span>) ^ <span class="number">1</span>) + <span class="string">'0'</span>;</span><br><span class="line">            acam.insert(str);</span><br><span class="line">            str[i] = ((str[i] - <span class="string">'0'</span>) ^ <span class="number">1</span>) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        acam.build();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, acam.gao());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line"><span class="comment">//    cerr &lt;&lt; "Time elapsed: " &lt;&lt; 1.0 * clock() / CLOCKS_PER_SEC &lt;&lt; " s.\n";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-Palindromes"><a href="#I-Palindromes" class="headerlink" title="I. Palindromes"></a>I. Palindromes</h2><p>题意：询问第$k$大的回文数字</p>
<p>思路：打表找规律</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, str[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">1</span>] &gt; <span class="string">'1'</span>) &#123;</span><br><span class="line">            str[<span class="number">1</span>]--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">2</span>] == <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">                    str[i] = str[i + <span class="number">1</span>];</span><br><span class="line">                str[<span class="number">1</span>] = <span class="string">'9'</span>;</span><br><span class="line">                str[len] = <span class="number">0</span>; len--;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">                reverse(str + <span class="number">1</span>, str + len);</span><br><span class="line">                str[len] = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">                    str[i] = str[i + <span class="number">1</span>];</span><br><span class="line">                str[len] = <span class="number">0</span>; len--;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">                reverse(str + <span class="number">1</span>, str + len + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Rikka-with-Triangles"><a href="#J-Rikka-with-Triangles" class="headerlink" title="J. Rikka with Triangles"></a>J. Rikka with Triangles</h2><p>题意：给出$n$个点，求所有锐角三角形的面积和。$n\leq2000$</p>
<p>思路：枚举每个点进行极角排序，双指针枚举计算所有三角形面积$rea1$以及直角三角形和钝角三角形面积和$res2$那么答案为$\frac{res1 - 2 \times res2}{3}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> LL = __int128;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>) &#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> sgn;</span><br><span class="line">    <span class="keyword">if</span> (c = getchar(), c == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (c != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(c)) c = getchar();</span><br><span class="line">    sgn = (c == <span class="string">'-'</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    ret = (c == <span class="string">'-'</span>) ? <span class="number">0</span> : (c - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span> (c = getchar(), <span class="built_in">isdigit</span>(c)) ret = ret * <span class="number">10</span> + (c - <span class="string">'0'</span>);</span><br><span class="line">    ret *= sgn;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Point(LL x, LL y) : x(x), y(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> &amp;&amp; other.y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; other.y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span> &amp;&amp; other.y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (x &lt; <span class="number">0</span> &amp;&amp; other.x &gt; <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((*<span class="keyword">this</span>) ^ other) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[N], qrr[N];</span><br><span class="line"></span><br><span class="line">LL sumx[N], sumy[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            qrr[++cnt] = p[j] - p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(qrr + <span class="number">1</span>, qrr + <span class="number">1</span> + cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) &#123;</span><br><span class="line">            qrr[j + cnt] = qrr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sumx[<span class="number">0</span>] = sumy[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) &#123;</span><br><span class="line">            sumx[j] = (sumx[j - <span class="number">1</span>] + qrr[j].x) % mod;</span><br><span class="line">            sumy[j] = (sumy[j - <span class="number">1</span>] + qrr[j].y) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q = <span class="number">1</span>, s = <span class="number">1</span>, t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            q = <span class="built_in">max</span>(q, j);</span><br><span class="line">            Point _90 = Point(-qrr[j].y, qrr[j].x);</span><br><span class="line">            Point _180 = Point(-qrr[j].x, -qrr[j].y);</span><br><span class="line">            <span class="keyword">while</span> (q &lt; cnt &amp;&amp; (qrr[q + <span class="number">1</span>] ^ qrr[j]) == <span class="number">0</span>) ++q;</span><br><span class="line">            <span class="keyword">while</span> (s &lt; cnt &amp;&amp; (s &lt; q || ((qrr[s + <span class="number">1</span>] ^ _90) &gt; <span class="number">0</span> &amp;&amp; (qrr[s + <span class="number">1</span>] ^ qrr[j]) &lt;= <span class="number">0</span>))) ++s;</span><br><span class="line">            <span class="keyword">while</span> (t &lt; cnt &amp;&amp; (t &lt; s || ((qrr[t + <span class="number">1</span>] ^ _180) &gt; <span class="number">0</span> &amp;&amp; (qrr[t + <span class="number">1</span>] ^ _90) &lt;= <span class="number">0</span>))) ++t;</span><br><span class="line">            res1 = (res1 + (sumy[s] - sumy[q] + mod) % mod * (qrr[j].x % mod) % mod -</span><br><span class="line">                    (sumx[s] - sumx[q] + mod) % mod * (qrr[j].y) % mod + mod) % mod;</span><br><span class="line">            res2 = (res2 + (sumy[t] - sumy[s] + mod) % mod * (qrr[j].x % mod) % mod -</span><br><span class="line">                    (sumx[t] - sumx[s] + mod) % mod * (qrr[j].y) % mod + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((res1 - res2 * <span class="number">2</span> % mod + mod) % mod * qpow(<span class="number">3</span>, mod - <span class="number">2</span>) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(p[i].x), <span class="built_in">read</span>(p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = gao();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line"><span class="comment">//    cerr &lt;&lt; "Time elapsed: " &lt;&lt; 1.0 * clock() / CLOCKS_PER_SEC &lt;&lt; " s.\n";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Regional</tag>
      </tags>
  </entry>
  <entry>
    <title>有上下界的网络流学习</title>
    <url>/2019/10/08/%E6%9C%89%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="无源汇有上下界可行流-也就是循环流"><a href="#无源汇有上下界可行流-也就是循环流" class="headerlink" title="无源汇有上下界可行流(也就是循环流)"></a>无源汇有上下界可行流(也就是循环流)</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>给定一个网络，求出一个流，是的每条边的流量满足$[L_i, R_i]$，同时每个点的流入量$=$流出量</p>
<h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>将一个不满足流量守恒的初始流调整为满足流量守恒的流</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果存在可行解，那么每条边的流量一定大于$L_i$，因此我们假设让每条边的初始流量为下限，得到一个初始流同时建立残余网络（每条边的流量为$R_i-L_i$）。但是初始流不一定满足流量守恒。</p>
<p>建立附加顶点$SS,TT$后分以下三种情况</p>
<ul>
<li>流入量$=$流出量</li>
<li>流入量$\neq$流出量<ul>
<li>流入量$&gt;$流出量，增加一条边到附加点$TT$</li>
<li>流入量$&lt;$流出量，增加一条边从附加点到$SS$到当前点</li>
</ul>
</li>
</ul>
<p>其中$SS、TT$的流量的绝对值一定相同</p>
<p>最后检查最大流是否为$SS$的所有流量即可</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//ZOJ2314   给定一个网络流模型，问否是每条边流量都能满足[L_i, R_i]  如果可以输出YES并且输出每条边的流量，否则输出NO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dicnic</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt, flow;</span><br><span class="line">    </span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">    &#125; edge[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> S, T;</span><br><span class="line">    <span class="keyword">int</span> head[N], dep[N], tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> _S, <span class="keyword">int</span> _T)</span> </span>&#123;</span><br><span class="line">        S = _S, T = _T;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u], w);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(S);</span><br><span class="line">        dep[S] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[T] &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">        <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">                edge[i].flow -= w;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">                used += w;</span><br><span class="line">                <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            res += DFS(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dicnic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, low[N], totFlow[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(totFlow, <span class="number">0</span>, <span class="keyword">sizeof</span> totFlow);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    dicnic.Init();</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    dicnic.<span class="built_in">set</span>(S, T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;u, &amp;v, low + i, &amp;w);</span><br><span class="line">        dicnic.addedge(u, v, w - low[i]);</span><br><span class="line">        totFlow[u] -= low[i];</span><br><span class="line">        totFlow[v] += low[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (totFlow[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += totFlow[i];</span><br><span class="line">            dicnic.addedge(S, i, totFlow[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dicnic.addedge(i, T, -totFlow[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = dicnic.gao();</span><br><span class="line">    <span class="keyword">if</span> (tmp == sum) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, low[i] + dicnic.edge[<span class="number">2</span> * i - <span class="number">1</span>].flow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有源汇有上下界可行流"><a href="#有源汇有上下界可行流" class="headerlink" title="有源汇有上下界可行流"></a>有源汇有上下界可行流</h2><h3 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h3><p>现在的网络有一个源点$S$和汇点$T$,求出一个流使得源点的总流出量等于汇点的总流入量,其他的点满足流量守恒,而且每条边的流量满足上界和下界限制</p>
<h3 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h3><p>将有源汇右上下界可行流转换为无源汇上下界可行流</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>由于存在$S, T$两个点，他们的流入量$\neq$流出量，但是$S$的流出量$=$$T$的流出量，增加一条变$T\rightarrow S$，流量为无限的边，就使得每个点的流入量等于流出量，在增加虚拟源汇点$SS,TT$即可转换为无源汇右上下界可行流</p>
<h2 id="有源汇有上下界最大流"><a href="#有源汇有上下界最大流" class="headerlink" title="有源汇有上下界最大流"></a>有源汇有上下界最大流</h2><h3 id="模型-2"><a href="#模型-2" class="headerlink" title="模型"></a>模型</h3><p>现在的网络有一个源点s和汇点t,求出一个流使得源点的总流出量等于汇点的总流入量,其他的点满足流量守恒,而且每条边的流量满足上界和下界限制.在这些前提下要求总流量最大</p>
<h3 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h3><p>先进行有源汇有上下界可行流判断，然后在残余网络上跑$S-T$的最大流即可</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ZOJ 3229  一个人给m个女神拍照，总共拍摄n天，其中每天会给C个女神拍照，每天拍照限定数量为D，同时给每个女神拍照数量限制为[L_i, R_i], 对于每个女神拍照总数不能少于Gi，问总的拍照数量最大值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dicnic</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt, flow;</span><br><span class="line">    </span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">    &#125; edge[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> S, T;</span><br><span class="line">    <span class="keyword">int</span> head[N], dep[N], tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> _S, <span class="keyword">int</span> _T)</span> </span>&#123;</span><br><span class="line">        S = _S, T = _T;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u], w);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(S);</span><br><span class="line">        dep[S] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">        <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">                edge[i].flow -= w;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">                used += w;</span><br><span class="line">                <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            res += DFS(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dicnic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, low[N][M], totFlow[N * M], pos[N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pos, <span class="number">-1</span>, <span class="keyword">sizeof</span> pos);</span><br><span class="line">    <span class="built_in">memset</span>(totFlow, <span class="number">0</span>, <span class="keyword">sizeof</span> totFlow);</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">    dicnic.Init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        dicnic.addedge(i + n, T, INF - x);</span><br><span class="line">        totFlow[i + n] -= x;</span><br><span class="line">        totFlow[T] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">        dicnic.addedge(S, i, y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, ith, up, down; j &lt;= x; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;ith, &amp;down, &amp;up);</span><br><span class="line">            ++ith;</span><br><span class="line">            pos[i][ith] = dicnic.tot;</span><br><span class="line">            dicnic.addedge(i, n + ith, up - down);</span><br><span class="line">            totFlow[i] -= down;</span><br><span class="line">            totFlow[n + ith] += down;</span><br><span class="line">            low[i][ith] = down;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    dicnic.addedge(T, S, INF);</span><br><span class="line">    <span class="keyword">int</span> SS = n + m + <span class="number">2</span>, TT = n + m + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = S; i &lt;= T; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (totFlow[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dicnic.addedge(i, TT, -totFlow[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totFlow[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += totFlow[i];</span><br><span class="line">            dicnic.addedge(SS, i, totFlow[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dicnic.<span class="built_in">set</span>(SS, TT);</span><br><span class="line">    <span class="keyword">if</span> (dicnic.gao() == sum) &#123;</span><br><span class="line">        dicnic.<span class="built_in">set</span>(S, T);</span><br><span class="line">        <span class="keyword">int</span> res = dicnic.gao();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pos[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, low[i][j] + dicnic.edge[pos[i][j] ^ <span class="number">1</span>].flow);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有源汇有上下界最小流"><a href="#有源汇有上下界最小流" class="headerlink" title="有源汇有上下界最小流"></a>有源汇有上下界最小流</h2><h3 id="模型-3"><a href="#模型-3" class="headerlink" title="模型"></a>模型</h3><p>现在的网络有一个源点s和汇点t,求出一个流使得源点的总流出量等于汇点的总流入量,其他的点满足流量守恒,而且每条边的流量满足上界和下界限制.在这些前提下要求总流量最小.</p>
<h3 id="核心-3"><a href="#核心-3" class="headerlink" title="核心"></a>核心</h3><p>跑完有源汇有上下界可行流后删除原图中的所有流量</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>先跑出一个有源汇可行流，假如我们能在残量网络上找到一条$S-T$的路径使得去掉这条路径上的流量之后仍然满足流量下限,我们就可以得到一个更小的流。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//bzoj2502 给定一个DAG，每轮选择一个点开始清除一条路上的所有路径，问最小轮数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dicnic</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt, flow;</span><br><span class="line">    </span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">    &#125; edge[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> S, T;</span><br><span class="line">    <span class="keyword">int</span> head[N], dep[N], tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> _S, <span class="keyword">int</span> _T)</span> </span>&#123;</span><br><span class="line">        S = _S, T = _T;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u], w);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(S);</span><br><span class="line">        dep[S] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">        <span class="keyword">int</span> w, used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">                edge[i].flow -= w;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">                used += w;</span><br><span class="line">                <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            res += DFS(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            edge[i].flow = edge[i ^ <span class="number">1</span>].flow = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dicnic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, totFlow[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dicnic.Init();</span><br><span class="line">    <span class="built_in">memset</span>(totFlow, <span class="number">0</span>, <span class="keyword">sizeof</span> totFlow);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, m; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, x; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            dicnic.addedge(i, x, INF);</span><br><span class="line">            totFlow[i]--, totFlow[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = n + <span class="number">1</span>, SS = n + <span class="number">2</span>, TT = n + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dicnic.addedge(S, i, INF);</span><br><span class="line">        dicnic.addedge(i, T, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (totFlow[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dicnic.addedge(i, TT, -totFlow[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dicnic.addedge(SS, i, totFlow[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dicnic.addedge(T, S, INF);</span><br><span class="line">    dicnic.<span class="built_in">set</span>(SS, TT);</span><br><span class="line">    dicnic.gao();</span><br><span class="line">    <span class="keyword">int</span> Max = dicnic.edge[dicnic.tot - <span class="number">1</span>].flow;</span><br><span class="line">    dicnic.edge[dicnic.tot - <span class="number">1</span>].flow = dicnic.edge[dicnic.tot - <span class="number">2</span>].flow = <span class="number">0</span>;</span><br><span class="line">    dicnic.Del(SS), dicnic.Del(TT);</span><br><span class="line">    dicnic.<span class="built_in">set</span>(T, S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max - dicnic.gao());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>期望</title>
    <url>/2019/09/05/%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<h2 id="LOJ-2538-「PKUWC2018」Slay-the-Spire"><a href="#LOJ-2538-「PKUWC2018」Slay-the-Spire" class="headerlink" title="LOJ-2538 「PKUWC2018」Slay the Spire"></a>LOJ-2538 「PKUWC2018」Slay the Spire</h2><p>$f[i][j]$表示前$i$张用了$j$张强化，那么转移为</p>
<script type="math/tex; mode=display">
f[i][j] = 
\begin{cases}
f[i - 1][j] + f[i - 1][j - 1] * a[i] \quad j\leq k-1\\
f[i-1][j]+f[i][j] \quad otherwise
\end{cases}</script><p>$g[i][j]$表示前$i$张用了$j$张攻击，那么转移为</p>
<script type="math/tex; mode=display">
g[i][j]=
\begin{cases}
g[i - 1][j]+C_{i-1}^{j-1}*b[i] \quad j\leq m-(k-1)\\
g[i - 1][j - 1] + g[i - 1][j] + C_{i-1}^{j-1}*b[i] \quad otherwise
\end{cases}</script><p>那么答案为$\sum_{i=0}^{m} f[i]\cdot g[m-i]$</p>
<h2 id="LightOJ-1151-Snakes-and-Ladders"><a href="#LightOJ-1151-Snakes-and-Ladders" class="headerlink" title="LightOJ-1151 Snakes and Ladders"></a>LightOJ-1151 Snakes and Ladders</h2><p>题意: 每次抛骰子走$1-6$步，问走到$100$的期望，其中有$n$个格子进行传送</p>
<p>思路：如果没有传送则，$f[i]=\frac{1}{6}\cdot \sum_{j=1}^{6} f[i+j]$如果有传送，则$f[i]=f[nxt[i]]$</p>
<p>高斯消元</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>几何</title>
    <url>/2019/09/03/%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<h2 id="2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Shenyang Regional Contest"></a>2018-2019 ACM-ICPC, Asia Shenyang Regional Contest</h2><h3 id="L-Machining-Disc-Rotors"><a href="#L-Machining-Disc-Rotors" class="headerlink" title="L. Machining Disc Rotors"></a>L. Machining Disc Rotors</h3><p>题意：给定一个圆，被$n$个圆切割，求剩下部分最远距离</p>
<p>思路：最远距离一定是两个交点或者原本圆的直径(水)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-11</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    db x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(db _x, db _y) &#123;</span><br><span class="line">        x = _x, y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">len</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">distance</span><span class="params">(Point &amp;other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x - other.x, y - other.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(db r)</span> </span>&#123;</span><br><span class="line">        db l = len();</span><br><span class="line">        <span class="keyword">if</span> (!sgn(l)) &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> &#123;x * r, y * r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;-y, x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;y, -x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;-x, -y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point p;</span><br><span class="line">    db r;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span>, &amp;p.x, &amp;p.y, &amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Circle() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Circle(Point _p, db _r) &#123;</span><br><span class="line">        p = _p, r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Circle(db _x, db _y, db _r) &#123;</span><br><span class="line">        p = Point(_x, _y);</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcicle</span><span class="params">(Circle v)</span> </span>&#123;</span><br><span class="line">        db d = p.distance(v.p);</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        db l = <span class="built_in">fabs</span>(r - v.r);</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) &lt; <span class="number">0</span> &amp;&amp; sgn(d - l) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - l) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrosscircle</span><span class="params">(Circle v, Point &amp;p1, Point &amp;p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = relationcicle(v);</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">1</span> || rel == <span class="number">5</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        db d = p.distance(v.p);</span><br><span class="line">        db l = (d * d + r * r - v.r * v.r) / (<span class="number">2</span> * d);</span><br><span class="line">        db h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        Point tmp = p + (v.p - p).trunc(l);</span><br><span class="line">        p1 = tmp + ((v.p - p).rotleft().trunc(h));</span><br><span class="line">        p2 = tmp + ((v.p - p).rotright().trunc(h));</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">2</span> || rel == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; o, a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">db r;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(Circle tmp)</span> </span>&#123;</span><br><span class="line">    Point p[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> res = o.pointcrosscircle(tmp, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">        vec.push_back(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : vec) &#123;</span><br><span class="line">        p = p.change();</span><br><span class="line">        <span class="keyword">bool</span> F = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            db dis = p.distance(a[i].p);</span><br><span class="line">            <span class="keyword">if</span> (sgn(dis - a[i].r) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                F = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (F) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;n, &amp;r);</span><br><span class="line">    o = Circle(<span class="number">0.0</span>, <span class="number">0.0</span>, r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i].input();</span><br><span class="line">        gao(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    db res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = vec.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; ++j) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, vec[i].distance(vec[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check()) &#123;</span><br><span class="line">        res = <span class="number">2</span> * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.15f\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= _T; ++cas) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, cas);</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2018-German-Collegiate-Programming-Contest-GCPC-18"><a href="#2018-German-Collegiate-Programming-Contest-GCPC-18" class="headerlink" title="2018 German Collegiate Programming Contest (GCPC 18)"></a>2018 German Collegiate Programming Contest (GCPC 18)</h2><h3 id="B-Battle-Royale"><a href="#B-Battle-Royale" class="headerlink" title="B. Battle Royale"></a>B. Battle Royale</h3><p>题意：求两个点不穿过圆的最短距离</p>
<p>思路：高中数学水一水</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    db x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(db _x, db _y) &#123;</span><br><span class="line">        x = _x, y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    db <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    db <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.x + y * other.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">distance</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A, B, o;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">    Point s, e;</span><br><span class="line"></span><br><span class="line">    Line() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Line(Point _s, Point _e) &#123;</span><br><span class="line">        s = _s, e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">dispointtoline</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p - s) ^ (e - s)) / length();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">dispointtoseg</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sgn((p - s) * (e - s)) &lt; <span class="number">0</span> || sgn((p - e) * (s - e)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(p.distance(s), p.distance(e));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; l;</span><br><span class="line"></span><br><span class="line">db r;</span><br><span class="line"></span><br><span class="line"><span class="function">db <span class="title">f</span><span class="params">(db a, db b, db c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>((a * a + b * b - c * c) / (<span class="number">2.0</span> * a * b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;A.x, &amp;A.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;B.x, &amp;B.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span>, &amp;o.x, &amp;o.y, &amp;r);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span>, &amp;o.x, &amp;o.y, &amp;r);</span><br><span class="line">    l = Line(A, B);</span><br><span class="line">    db dis = l.dispointtoseg(o);</span><br><span class="line">    db res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (sgn(dis - r) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        res = A.distance(B);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dis = A.distance(B);</span><br><span class="line">        db dis1 = A.distance(o);</span><br><span class="line">        db c1 = <span class="built_in">sqrt</span>(dis1 * dis1 - r * r);</span><br><span class="line">        res += c1;</span><br><span class="line">        db dis2 = B.distance(o);</span><br><span class="line">        db c2 = <span class="built_in">sqrt</span>(dis2 * dis2 - r * r);</span><br><span class="line">        res += c2;</span><br><span class="line">        db arc = f(dis1, dis2, dis);</span><br><span class="line">        db arc1 = f(dis1, r, c1);</span><br><span class="line">        db arc2 = f(dis2, r, c2);</span><br><span class="line">        db arc3 = arc - arc1 - arc2;</span><br><span class="line">        res += r * arc3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ACM-ICPC-Asia-Beijing-Regional-Contest-2018-Reproduction"><a href="#ACM-ICPC-Asia-Beijing-Regional-Contest-2018-Reproduction" class="headerlink" title="ACM-ICPC Asia Beijing Regional Contest 2018 Reproduction"></a>ACM-ICPC Asia Beijing Regional Contest 2018 Reproduction</h2><h3 id="J-Rikka-with-Triangles"><a href="#J-Rikka-with-Triangles" class="headerlink" title="J. Rikka with Triangles"></a>J. Rikka with Triangles</h3><p>题意：给出$n$个点，求所有锐角三角形的面积和。$n\leq2000$</p>
<p>思路：枚举每个点进行极角排序，双指针枚举计算所有三角形面积$rea1$以及直角三角形和钝角三角形面积和$res2$那么答案为$\frac{res1 - 2 \times res2}{3}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #x &lt;&lt; " -&gt; "; err(x); &#125; while (0)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">err</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">arg</span>, <span class="title">const</span> <span class="title">Ts</span> &amp;... <span class="title">args</span>) &#123;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arg &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> LL = __int128;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>) &#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> sgn;</span><br><span class="line">    <span class="keyword">if</span> (c = getchar(), c == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (c != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(c)) c = getchar();</span><br><span class="line">    sgn = (c == <span class="string">'-'</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    ret = (c == <span class="string">'-'</span>) ? <span class="number">0</span> : (c - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span> (c = getchar(), <span class="built_in">isdigit</span>(c)) ret = ret * <span class="number">10</span> + (c - <span class="string">'0'</span>);</span><br><span class="line">    ret *= sgn;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(LL x, LL y) : x(x), y(y) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LL <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> &amp;&amp; other.y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; other.y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span> &amp;&amp; other.y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (x &lt; <span class="number">0</span> &amp;&amp; other.x &gt; <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((*<span class="keyword">this</span>) ^ other) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[N], qrr[N];</span><br><span class="line"></span><br><span class="line">LL sumx[N], sumy[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            qrr[++cnt] = p[j] - p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(qrr + <span class="number">1</span>, qrr + <span class="number">1</span> + cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) &#123;</span><br><span class="line">            qrr[j + cnt] = qrr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sumx[<span class="number">0</span>] = sumy[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) &#123;</span><br><span class="line">            sumx[j] = (sumx[j - <span class="number">1</span>] + qrr[j].x) % mod;</span><br><span class="line">            sumy[j] = (sumy[j - <span class="number">1</span>] + qrr[j].y) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q = <span class="number">1</span>, s = <span class="number">1</span>, t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            q = <span class="built_in">max</span>(q, j);</span><br><span class="line">            Point _90 = Point(-qrr[j].y, qrr[j].x);</span><br><span class="line">            Point _180 = Point(-qrr[j].x, -qrr[j].y);</span><br><span class="line">            <span class="keyword">while</span> (q &lt; cnt &amp;&amp; (qrr[q + <span class="number">1</span>] ^ qrr[j]) == <span class="number">0</span>) ++q;</span><br><span class="line">            <span class="keyword">while</span> (s &lt; cnt &amp;&amp; (s &lt; q || ((qrr[s + <span class="number">1</span>] ^ _90) &gt; <span class="number">0</span> &amp;&amp; (qrr[s + <span class="number">1</span>] ^ qrr[j]) &lt;= <span class="number">0</span>))) ++s;</span><br><span class="line">            <span class="keyword">while</span> (t &lt; cnt &amp;&amp; (t &lt; s || ((qrr[t + <span class="number">1</span>] ^ _180) &gt; <span class="number">0</span> &amp;&amp; (qrr[t + <span class="number">1</span>] ^ _90) &lt;= <span class="number">0</span>))) ++t;</span><br><span class="line">            res1 = (res1 + (sumy[s] - sumy[q] + mod) % mod * (qrr[j].x % mod) % mod -</span><br><span class="line">                    (sumx[s] - sumx[q] + mod) % mod * (qrr[j].y) % mod + mod) % mod;</span><br><span class="line">            res2 = (res2 + (sumy[t] - sumy[s] + mod) % mod * (qrr[j].x % mod) % mod -</span><br><span class="line">                    (sumx[t] - sumx[s] + mod) % mod * (qrr[j].y) % mod + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((res1 - res2 * <span class="number">2</span> % mod + mod) % mod * qpow(<span class="number">3</span>, mod - <span class="number">2</span>) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(p[i].x), <span class="built_in">read</span>(p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = gao();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"></span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line"><span class="comment">//    cerr &lt;&lt; "Time elapsed: " &lt;&lt; 1.0 * clock() / CLOCKS_PER_SEC &lt;&lt; " s.\n";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>The Preliminary Contest for ICPC Asia Nanjing 2019</title>
    <url>/2019/09/02/The-Preliminary-Contest-for-ICPC-Asia-Nanjing-2019/</url>
    <content><![CDATA[<h2 id="D-Robots"><a href="#D-Robots" class="headerlink" title="D. Robots"></a>D. Robots</h2><p>题意：给定一个$DAG$，机器人每次等概率的选择一个点走或者停留，每次花费是当前天数，求$1\rightarrow n$的花费期望</p>
<p>思路：$f_u$表示到$u$的期望，那么很显然$f_u = \frac{f_u}{out_u + 1} + \sum f_v + 1$，$g_u$表示花费期望，那么$g_u=\frac{g_u}{out_u+1}+\sum g_v + f_u$。看错题可还行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> db = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">db f[N], g[N];</span><br><span class="line"><span class="keyword">int</span> d1[N], d2[N], in[N], out[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(n);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (out[u]) &#123;</span><br><span class="line">            f[u] += out[u] + <span class="number">1</span>;</span><br><span class="line">            f[u] /= out[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) &#123;</span><br><span class="line">            f[v] += f[u];</span><br><span class="line">            --d1[v];</span><br><span class="line">            <span class="keyword">if</span> (d1[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(n);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (out[u]) &#123;</span><br><span class="line">            g[u] += f[u] * (out[u] + <span class="number">1</span>);</span><br><span class="line">            g[u] /= out[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            g[v] += g[u];</span><br><span class="line">            --d2[v];</span><br><span class="line">            <span class="keyword">if</span> (d2[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            f[i] = <span class="number">0.0</span>;</span><br><span class="line">            g[i] = <span class="number">0.0</span>;</span><br><span class="line">            d1[i] = <span class="number">0</span>;</span><br><span class="line">            d2[i] = <span class="number">0</span>;</span><br><span class="line">            in[i] = <span class="number">0</span>;</span><br><span class="line">            out[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">            d1[u]++;</span><br><span class="line">            d2[u]++;</span><br><span class="line">            out[u]++, in[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        gao();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, g[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>online</tag>
      </tags>
  </entry>
  <entry>
    <title>Manthan, Codefest 19 (open for everyone, rated, Div. 1 + Div. 2)</title>
    <url>/2019/08/26/Manthan,-Codefest-19-(open-for-everyone,-rated,-Div.-1-+-Div.-2)/</url>
    <content><![CDATA[<h2 id="A-XORinacci"><a href="#A-XORinacci" class="headerlink" title="A. XORinacci"></a>A. XORinacci</h2><p>签到</p>
<h2 id="B-Uniqueness"><a href="#B-Uniqueness" class="headerlink" title="B. Uniqueness"></a>B. Uniqueness</h2><p>题意：删除一个最短的子串，使得剩下的数字唯一出现</p>
<p>思路：枚举左端点，右边不断向左扩展。</p>
<h2 id="C-Magic-Grid"><a href="#C-Magic-Grid" class="headerlink" title="C. Magic Grid"></a>C. Magic Grid</h2><p>题意：构造一个$n\cdot n$的矩阵，里面填入$0-n^2-1$，使得每行每列异或和都相同。</p>
<p>思路：对于每个$4\cdot 4$的矩阵都构造出</p>
<script type="math/tex; mode=display">
  \begin{matrix}
   0 & 1 & 2 & 3 \\
  4 & 5 & 6 & 7 \\
  8 & 9 & 10 & 11\\
  12 & 13 & 14 & 15
  \end{matrix}</script><h2 id="D-Restore-Permutation"><a href="#D-Restore-Permutation" class="headerlink" title="D. Restore Permutation"></a>D. Restore Permutation</h2><p>题意：给出一个序列，$a_i$ 的权值是满足$j&lt;i \&amp; a_j&lt;a_i$的$a_j$和，现在给出权值，问原序列</p>
<p>思路：倒过来求，在权值线段树上二分</p>
<h2 id="E-Let-Them-Slide"><a href="#E-Let-Them-Slide" class="headerlink" title="E. Let Them Slide"></a>E. Let Them Slide</h2><p>题意：有$n$个滑块，滑块长度不同，每个滑块第$i$列有权值，单独求每列的和的最大值。</p>
<p>思路：$multiset$维护第$i$列可选取的滑块，维护即可。</p>
]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>2019中国大学生程序设计竞赛（CCPC） - 网络选拔赛</title>
    <url>/2019/08/23/2019%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%EF%BC%88CCPC%EF%BC%89---%E7%BD%91%E7%BB%9C%E9%80%89%E6%8B%94%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="A-amp"><a href="#A-amp" class="headerlink" title="A.\^\&amp;\^"></a>A.\^\&amp;\^</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll A, B, C;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;A, &amp;B);</span><br><span class="line">        C = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((A &gt;&gt; i) % <span class="number">2</span> &amp;&amp; (B &gt;&gt; i) % <span class="number">2</span>)</span><br><span class="line">                C |= (<span class="number">1l</span>l &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (C == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((A &gt;&gt; i) % <span class="number">2</span>) + ((B &gt;&gt; i) % <span class="number">2</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                    C |= (<span class="number">1l</span>l &lt;&lt; i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-array"><a href="#B-array" class="headerlink" title="B. array"></a>B. array</h2><p>权值线段树线段树维护每个数出现的下标，树上二分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, m, a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = b[l]; </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        t[id] = <span class="built_in">max</span>(t[id &lt;&lt; <span class="number">1</span>], t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = INF;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">        t[id] = <span class="built_in">max</span>(t[id &lt;&lt; <span class="number">1</span>], t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) <span class="keyword">return</span> t[id];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) res = <span class="built_in">max</span>(res, ask(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) res = <span class="built_in">max</span>(res, ask(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; k || ask(id &lt;&lt; <span class="number">1</span>, l, mid, k, mid) &lt;= R) <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, k, R);</span><br><span class="line">        <span class="keyword">if</span> (t[id &lt;&lt; <span class="number">1</span>] &lt;= R) <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, k, R);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span>, l, mid, k, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _T; <span class="built_in">cin</span> &gt;&gt; _T; </span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q); m = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), b[a[i]] = i; </span><br><span class="line">        b[m] = INF;</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">        <span class="keyword">int</span> lstans = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> _q = <span class="number">1</span>, op, x, k; _q &lt;= q; ++_q) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;op, &amp;x);</span><br><span class="line">            x ^= lstans;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                seg.update(<span class="number">1</span>, <span class="number">1</span>, m, a[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">                k ^= lstans;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lstans = seg.query(<span class="number">1</span>, <span class="number">1</span>, m, k, x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-K-th-occurrence"><a href="#C-K-th-occurrence" class="headerlink" title="C. K-th occurrence"></a>C. K-th occurrence</h2><p>队友太强了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DA</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t1[N], t2[N], c[N];</span><br><span class="line">    <span class="keyword">int</span> sa[N];</span><br><span class="line">    <span class="keyword">int</span> Rank[N];</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span>[N];</span><br><span class="line">    <span class="keyword">int</span> str[N];</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) str[i] = s[i];</span><br><span class="line">        str[n] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">int</span> i, j, p, *x = t1, *y = t2;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) c[x[i] = str[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) sa[--c[x[i]]] = i;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//直接利用sa数组排序第二关键字</span></span><br><span class="line">            <span class="comment">//后面的j个数第二关键字为空的最小</span></span><br><span class="line">            <span class="keyword">for</span> (i = n - j; i &lt; n; ++i) &#123;</span><br><span class="line">                y[p++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (sa[i] &gt;= j) y[p++] = sa[i] - j;</span><br><span class="line">            <span class="comment">//这样数组y保存的就是按照第二关键字排序的结果</span></span><br><span class="line">            <span class="comment">//基数排序第一关键字</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) c[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) c[x[y[i]]]++;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">            <span class="comment">//根据sa和x数组计算新的x数组</span></span><br><span class="line">            swap(x, y);</span><br><span class="line">            p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                x[sa[i]] = cmp(y, sa[i - <span class="number">1</span>], sa[i], j) ? p - <span class="number">1</span> : p++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//下次基数排序的最大值</span></span><br><span class="line">            m = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        --n;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; ++i) Rank[sa[i]] = i;</span><br><span class="line">        <span class="comment">//build height</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k) --k;</span><br><span class="line">            j = sa[Rank[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (str[i + k] == str[j + k]) ++k;</span><br><span class="line">            <span class="built_in">height</span>[Rank[i]] = k; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RMQ</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> Min[N][M]; </span><br><span class="line">        <span class="keyword">int</span> mm[N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">            mm[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                mm[i] = ((i &amp; (i - <span class="number">1</span>)) == <span class="number">0</span>) ? mm[i - <span class="number">1</span>] + <span class="number">1</span> : mm[i - <span class="number">1</span>];</span><br><span class="line">                Min[i][<span class="number">0</span>] = b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mm[n]; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">                    Min[i][j] = <span class="built_in">min</span>(Min[i][j - <span class="number">1</span>], Min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> k = mm[y - x + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(Min[x][k], Min[y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;rmq;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initrmq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rmq.init(n, <span class="built_in">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="keyword">return</span> rmq.queryMin(x, y);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;da;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = x, res = x;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (da.lcp(x, mid) &gt;= len) &#123;</span><br><span class="line">            res = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = x, r = n, res = x;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (da.lcp(x, mid) &gt;= len) &#123;</span><br><span class="line">            res = mid;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> sum, ls, rs;</span><br><span class="line">        node() &#123;</span><br><span class="line">            ls = rs = sum = <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;t[N * <span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> rt[N], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        cnt = <span class="number">0</span>; </span><br><span class="line">        <span class="built_in">memset</span>(rt, <span class="number">0</span>, <span class="keyword">sizeof</span> rt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        id = ++cnt;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(t[id].ls, l, mid);</span><br><span class="line">        build(t[id].rs, mid + <span class="number">1</span>, r);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ls = t[id].ls, rs = t[id].rs;</span><br><span class="line">        t[id].sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ls) t[id].sum += t[ls].sum;</span><br><span class="line">        <span class="keyword">if</span> (rs) t[id].sum += t[rs].sum; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;now, <span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        now = ++cnt;</span><br><span class="line">        t[now] = t[pre];  </span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            ++t[now].sum; </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(t[now].ls, t[pre].ls, l, mid, pos);</span><br><span class="line">        <span class="keyword">else</span> update(t[now].rs, t[pre].rs, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">        up(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> lsum = t[t[tr].ls].sum - t[t[tl].ls].sum;    </span><br><span class="line">        <span class="keyword">if</span> (lsum &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> query(t[tl].ls, t[tr].ls, l, mid, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> query(t[tl].rs, t[tr].rs, mid + <span class="number">1</span>, r, k - lsum); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        da.init(s, <span class="number">220</span>, n);</span><br><span class="line">        da.work(); da.initrmq();</span><br><span class="line">        seg.init(); seg.build(seg.rt[<span class="number">0</span>], <span class="number">1</span>, n);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            seg.update(seg.rt[i], seg.rt[i - <span class="number">1</span>], <span class="number">1</span>, n, da.sa[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, l, r, k, len; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">            len = r - l + <span class="number">1</span>; </span><br><span class="line">            x = da.Rank[l - <span class="number">1</span>];  </span><br><span class="line">            <span class="keyword">int</span> L = getl(x, len);</span><br><span class="line">            <span class="keyword">int</span> R = getr(x, len);</span><br><span class="line">            <span class="keyword">if</span> (R - L + <span class="number">1</span> &lt; k) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, seg.query(seg.rt[L - <span class="number">1</span>], seg.rt[R], <span class="number">1</span>, n, k));   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-path"><a href="#D-path" class="headerlink" title="D. path"></a>D. path</h2><p>维护一个大小为$MaxK$的$multiset$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> w) : to(to), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> now;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> now, ll w) : now(now), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (w == other.w) &#123;</span><br><span class="line">            <span class="keyword">return</span> now &lt; other.w;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; other.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, MaxK;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Edge&gt;&gt; G;</span><br><span class="line"><span class="keyword">int</span> Q[N];</span><br><span class="line">ll res[N];</span><br><span class="line"><span class="built_in">multiset</span>&lt;node&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            G[u].push_back(Edge(v, w));</span><br><span class="line">        &#125;</span><br><span class="line">        MaxK = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, Q + i);</span><br><span class="line">            MaxK = <span class="built_in">max</span>(MaxK, Q[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            sort(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.empty()) &#123;</span><br><span class="line">                    s.insert(node(it.to, it.w));</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt;= MaxK + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> item = s.<span class="built_in">end</span>();</span><br><span class="line">                    item--;</span><br><span class="line">                    <span class="keyword">if</span> (it.w &gt;= (*item).w) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        s.erase(item);</span><br><span class="line">                        s.insert(node(it.to, it.w));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s.insert(node(it.to, it.w));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MaxK; ++i) &#123;</span><br><span class="line">            res[i] = (*s.<span class="built_in">begin</span>()).w;</span><br><span class="line">            <span class="keyword">if</span> (i == MaxK) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> u = (*s.<span class="built_in">begin</span>()).now;</span><br><span class="line">            ll w = (*s.<span class="built_in">begin</span>()).w;</span><br><span class="line">            s.erase(s.<span class="built_in">begin</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[u]) &#123;</span><br><span class="line">                node now = node(it.to, w + it.w);</span><br><span class="line">                <span class="keyword">if</span> (s.empty()) &#123;</span><br><span class="line">                    s.insert(now);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt;= MaxK - i + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> item = s.<span class="built_in">end</span>();</span><br><span class="line">                    item--;</span><br><span class="line">                    <span class="keyword">if</span> (now.w &gt;= (*item).w) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        s.erase(item);</span><br><span class="line">                        s.insert(now);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s.insert(now);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res[Q[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-huntian-oy"><a href="#E-huntian-oy" class="headerlink" title="E. huntian oy"></a>E. huntian oy</h2><p>队友太强了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> pri[N], check[N], phi[N], tot;</span><br><span class="line">ll f[N], F[N], inv2, inv6, n, a, b; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span> check);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!check[i]) &#123;</span><br><span class="line">            pri[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1l</span>l * i * pri[j] &gt;= N) <span class="keyword">break</span>;</span><br><span class="line">            check[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * pri[j]] = phi[i] * pri[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                phi[i * pri[j]] = phi[i] * (pri[j] - <span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">        f[i] += <span class="number">1l</span>l * i * phi[i] % mod;</span><br><span class="line">        f[i] %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll base, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res = res * base % mod;</span><br><span class="line">        base = base * base % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum_2</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * (n + <span class="number">1</span>) % mod * (<span class="number">2</span> * n + <span class="number">1</span>) % mod * inv6 % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * (n + <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">bool</span> vis[M]; </span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; N) <span class="keyword">return</span> f[x];</span><br><span class="line">    <span class="keyword">if</span> (mp.<span class="built_in">find</span>(x) != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> mp[x];</span><br><span class="line">    ll res = sum_2(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i, j = <span class="number">1</span>; j &lt; x; ) &#123;</span><br><span class="line">        i = j + <span class="number">1</span>;</span><br><span class="line">        j = x / (x / i);</span><br><span class="line">        res += mod - (sum(j) - sum(i - <span class="number">1</span>) + mod) % mod * S(x / i) % mod;</span><br><span class="line">        res = res % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[x] = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    inv2 = qpow(<span class="number">2</span>, mod - <span class="number">2</span>); inv6 = qpow(<span class="number">6</span>, mod - <span class="number">2</span>);</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> _T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line">        ll res = S(n);</span><br><span class="line">        res = (res + mod - <span class="number">1</span>) % mod;</span><br><span class="line">        res = res * inv2 % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Shuffle-Card"><a href="#F-Shuffle-Card" class="headerlink" title="F. Shuffle Card"></a>F. Shuffle Card</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], vis[N], res[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[b[i]]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[b[i]] = <span class="number">1</span>;</span><br><span class="line">            res[++cnt] = b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[a[i]]) &#123;</span><br><span class="line">                res[++cnt] = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Windows-Of-CCPC"><a href="#G-Windows-Of-CCPC" class="headerlink" title="G. Windows Of CCPC"></a>G. Windows Of CCPC</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">char</span> s[N][N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        s[x][y] = <span class="string">'C'</span>;</span><br><span class="line">        s[x][y + <span class="number">1</span>] = <span class="string">'C'</span>;</span><br><span class="line">        s[x + <span class="number">1</span>][y] = <span class="string">'P'</span>;</span><br><span class="line">        s[x + <span class="number">1</span>][y + <span class="number">1</span>] = <span class="string">'C'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>);</span><br><span class="line">        gao(x, y, k - <span class="number">1</span>);</span><br><span class="line">        gao(x, y + n, k - <span class="number">1</span>);</span><br><span class="line">        gao(x + n, y, k - <span class="number">1</span>);</span><br><span class="line">        gao(x + n, y + n, k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x + n; i &lt; x + <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i][j] == <span class="string">'C'</span>) s[i][j] = <span class="string">'P'</span>;</span><br><span class="line">                <span class="keyword">else</span> s[i][j] = <span class="string">'C'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        n = <span class="number">1</span> &lt;&lt; k;</span><br><span class="line">        gao(<span class="number">1</span>, <span class="number">1</span>, k);    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            s[i][n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Fishing-Master"><a href="#H-Fishing-Master" class="headerlink" title="H. Fishing Master"></a>H. Fishing Master</h2><p>假设都在炖鱼的时候捕鱼，那么再补一条鱼的时间为$k-a[i]\%k$，根据这个排序，保证正好$n$条鱼</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line">        ll cnt = <span class="number">1</span>, res = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">            res += a[i];</span><br><span class="line">            cnt += a[i] / k;</span><br><span class="line">            a[i] %= k;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt -= n;</span><br><span class="line">        cnt = -cnt;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span> &amp;&amp; cnt &gt; <span class="number">0</span>; --i, --cnt) &#123;</span><br><span class="line">            res += k - a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-Kaguya"><a href="#I-Kaguya" class="headerlink" title="I. Kaguya"></a>I. Kaguya</h2><p>题意：一个二分图，左边有有$n$个点，右边有$m$个点，两点连接概率为$\frac{1}{2}$，其期望</p>
<p>思路：$dp[i][j][k][l]$表示$BFS$到第$i$层，左边用了$j$个点，右边用了$k$个点，当前层有$l$个点，那么如果当前层为左边，下一层为右边，$dp[i+1][j][k+o][o]=dp[i][j][k][l]*P, P=\tbinom{m-k}{o}\cdot \frac{(2^l-1)^o}{2^{l\cdot (m-k)}}$</p>
<p>枚举转移</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">ll p;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> C[N][N];</span><br><span class="line"><span class="keyword">int</span> pw2[N * N], pw3[N][N], INV[N * N];</span><br><span class="line"><span class="keyword">int</span> f[N &lt;&lt; <span class="number">1</span>][N][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pw2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N * N; ++i) &#123;</span><br><span class="line">        pw2[i] = pw2[i - <span class="number">1</span>] * <span class="number">2l</span>l % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        ll x = (pw2[i] + p - <span class="number">1</span>) % p;</span><br><span class="line">        pw3[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            pw3[i][j] = <span class="number">1l</span>l * pw3[i][j - <span class="number">1</span>] * x % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N * N; ++i) &#123;</span><br><span class="line">        INV[i] = qpow(pw2[i], p - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= p) x -= p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1l</span>l;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    ll inv = qpow(m, p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= k - (i / <span class="number">2</span>); ++l) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f[i][j][k][l] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        res = (res + <span class="number">1l</span>l * i * f[i][j][k][l] % p * inv % p * l % p) % p;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">1</span>; o + j &lt;=</span><br><span class="line">                                        n; ++o) &#123;<span class="comment">//f[i + 1][j + o][k][o] += f[i][j][k][l] * P, P = C[n - j][o] * (2^l - 1)^o/2^l(n-j)</span></span><br><span class="line">                            up(f[i + <span class="number">1</span>][j + o][k][o],</span><br><span class="line">                               <span class="number">1l</span>l * f[i][j][k][l] * C[n - j][o] % p * pw3[l][o] % p * INV[l * (n - j)] % p);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= j - (i / <span class="number">2</span>); ++l) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f[i][j][k][l] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">1</span>; o + k &lt;=</span><br><span class="line">                                        m; ++o) &#123;<span class="comment">//f[i + 1][j][k + o][o] += f[i][j][k][l]*P, P = C[m - k][o]*(2^l-1)^o/2^l(m-k)</span></span><br><span class="line">                            up(f[i + <span class="number">1</span>][j][k + o][o],</span><br><span class="line">                               <span class="number">1l</span>l * f[i][j][k][l] * C[m - k][o] % p * pw3[l][o] % p * INV[l * (m - k)] % p);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) &#123;</span><br><span class="line">        RUN();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>online</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2019/08/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="前缀和优化"><a href="#前缀和优化" class="headerlink" title="前缀和优化"></a>前缀和优化</h2><h3 id="P2511-HAOI2008-木棍分割"><a href="#P2511-HAOI2008-木棍分割" class="headerlink" title="P2511 [HAOI2008]木棍分割"></a>P2511 [HAOI2008]木棍分割</h3><p>$f[i][j]=\sum_{k=0}^{min(i-1.j)}f[i-1][j-k]$维护前缀和即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ll sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                sum = (sum + f[i - <span class="number">1</span>][j]) % p;</span><br><span class="line">                f[i][j] = sum;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= i - <span class="number">1</span>) &#123;</span><br><span class="line">                    sum = (sum - f[i - <span class="number">1</span>][j - i + <span class="number">1</span>] + p) % p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f[n][k] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h2><p>用于优化$f_i=min/max{g_j}+w_i$</p>
<h3 id="前置技能-单调队列"><a href="#前置技能-单调队列" class="headerlink" title="前置技能 单调队列"></a>前置技能 单调队列</h3><h4 id="单调队列性质"><a href="#单调队列性质" class="headerlink" title="单调队列性质"></a>单调队列性质</h4><ul>
<li>队列中的元素其对应在原来的列表中的顺序必须是单调递增的。</li>
<li>队列中元素的大小必须是单调递*(增/减/甚至是自定义也可以)</li>
</ul>
<h4 id="P1886-滑动窗口"><a href="#P1886-滑动窗口" class="headerlink" title="P1886 滑动窗口"></a>P1886 滑动窗口</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, id;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> id, <span class="keyword">int</span> v) : id(id), v(v) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> _id)</span> </span>&#123;</span><br><span class="line">        id = _id;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i].input(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (head &lt;= tail &amp;&amp; q[tail].v &gt;= a[i].v) &#123;</span><br><span class="line">                --tail;</span><br><span class="line">            &#125;</span><br><span class="line">            q[++tail] = a[i];</span><br><span class="line">            <span class="keyword">while</span> (q[head].id &lt;= i - k) &#123;</span><br><span class="line">                head++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; q[head].v &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (head &lt;= tail &amp;&amp; q[tail].v &lt;= a[i].v) &#123;</span><br><span class="line">                --tail;</span><br><span class="line">            &#125;</span><br><span class="line">            q[++tail] = a[i];</span><br><span class="line">            <span class="keyword">while</span> (q[head].id &lt;= i - k) &#123;</span><br><span class="line">                head++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; q[head].v &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Time elapsed: "</span> &lt;&lt; <span class="number">1.0</span> * clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">" s.\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-University-Training-Contest-8</title>
    <url>/2019/08/14/Multi-University-Training-Contest-8/</url>
    <content><![CDATA[<h2 id="C-Acesrc-and-Good-Numbers"><a href="#C-Acesrc-and-Good-Numbers" class="headerlink" title="C. Acesrc and Good Numbers"></a>C. Acesrc and Good Numbers</h2><p>题意：$f(d, n)$表示$1\cdots n$中有几个$d$，定义一个$good \; number$为$f(d, k)=k$，现在给一个$x, d$问不超过$x$的最大$good \; number$的$k$</p>
<p>思路：很显然这种数不多，就可以快乐的打表了…</p>
<h2 id="F-Acesrc-and-Travel"><a href="#F-Acesrc-and-Travel" class="headerlink" title="F. Acesrc and Travel"></a>F. Acesrc and Travel</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="H-Andy-and-Maze"><a href="#H-Andy-and-Maze" class="headerlink" title="H. Andy and Maze"></a>H. Andy and Maze</h2><p>题意：一张$n$个点，$m$条边的无向图，问经过$k$个点的最大代价。</p>
<p>思路：搜索…如果当前值加上剩下路径条数$\times Max$依旧比$ans$小，则$return$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, ans, Max, vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pii&gt;&gt; G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == k) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v + (k - cur) * Max &lt;= ans) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[it.first]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[it.first] = <span class="number">1</span>;</span><br><span class="line">        DFS(it.first, cur + <span class="number">1</span>, v + it.second);</span><br><span class="line">        vis[it.first] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            G[u].emplace_back(v, w);</span><br><span class="line">            G[v].emplace_back(u, w);</span><br><span class="line">            Max = <span class="built_in">max</span>(Max, w);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            DFS(i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-Calabash-and-Landlord"><a href="#I-Calabash-and-Landlord" class="headerlink" title="I. Calabash and Landlord"></a>I. Calabash and Landlord</h2><p>题意：给定两个矩形，问将二维平面分成几部分</p>
<p>思路：$BFS$…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, t, r, b;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">2</span>], y[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, x, y, x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>] &lt; _x &amp;&amp; _x &lt; x[<span class="number">1</span>] &amp;&amp; y[<span class="number">0</span>] &lt; _y &amp;&amp; _y &lt; y[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N * N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt, a[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt);</span><br><span class="line">        cnt = unique(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt) - a - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lower_bound(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt, x) - a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; hx, hy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == dx) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( x == a[i].x[<span class="number">0</span>] || x == a[i].x[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].y[<span class="number">0</span>] &lt;= y &amp;&amp; dy &lt;= a[i].y[<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == a[i].y[<span class="number">0</span>] || y == a[i].y[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].x[<span class="number">0</span>] &lt;= x &amp;&amp; dx &lt;= a[i].x[<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> check(x + <span class="number">1</span>, y, x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> check(x, y + <span class="number">1</span>, x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> check(x, y, x, y + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(x, y, x + <span class="number">1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> dx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (dx &gt;= <span class="number">1</span> &amp;&amp; dx &lt; hx.cnt &amp;&amp; dy &gt;= <span class="number">1</span> &amp;&amp; dy &lt; hy.cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[dx][dy] &amp;&amp; judge(x, y, i)) &#123;</span><br><span class="line">                DFS(dx, dy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        a[<span class="number">0</span>].input();</span><br><span class="line">        a[<span class="number">1</span>].input();</span><br><span class="line">        hx.Init(), hy.Init();</span><br><span class="line">        hx.add(-INF), hx.add(INF);</span><br><span class="line">        hx.add(a[<span class="number">0</span>].x[<span class="number">0</span>]), hx.add(a[<span class="number">0</span>].x[<span class="number">1</span>]);</span><br><span class="line">        hx.add(a[<span class="number">1</span>].x[<span class="number">0</span>]), hx.add(a[<span class="number">1</span>].x[<span class="number">1</span>]);</span><br><span class="line">        hy.add(-INF), hy.add(INF);</span><br><span class="line">        hy.add(a[<span class="number">0</span>].y[<span class="number">0</span>]), hy.add(a[<span class="number">0</span>].y[<span class="number">1</span>]);</span><br><span class="line">        hy.add(a[<span class="number">1</span>].y[<span class="number">0</span>]), hy.add(a[<span class="number">1</span>].y[<span class="number">1</span>]);</span><br><span class="line">        hx.work(), hy.work();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            a[i].x[<span class="number">0</span>] = hx.<span class="built_in">get</span>(a[i].x[<span class="number">0</span>]);</span><br><span class="line">            a[i].x[<span class="number">1</span>] = hx.<span class="built_in">get</span>(a[i].x[<span class="number">1</span>]);</span><br><span class="line">            a[i].y[<span class="number">0</span>] = hy.<span class="built_in">get</span>(a[i].y[<span class="number">0</span>]);</span><br><span class="line">            a[i].y[<span class="number">1</span>] = hy.<span class="built_in">get</span>(a[i].y[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; hx.cnt; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; hy.cnt; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i][j]) &#123;</span><br><span class="line">                    DFS(i, j);</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Quailty-and-CCPC"><a href="#J-Quailty-and-CCPC" class="headerlink" title="J.Quailty and CCPC"></a>J.Quailty and CCPC</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> p, t;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, s, &amp;p, &amp;t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != other.p) <span class="keyword">return</span> p &gt; other.p;</span><br><span class="line">        <span class="keyword">return</span> t &lt; other.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i].scan();</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">if</span> (n * d % <span class="number">10</span> == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n * d / <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">puts</span>(a[t].s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Quailty is very great"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="K-Roundgod-and-Milk-Tea"><a href="#K-Roundgod-and-Milk-Tea" class="headerlink" title="K. Roundgod and Milk Tea"></a>K. Roundgod and Milk Tea</h2><p>题意：$n$个班，每个班有$a_i$个人，$b_i$个牛奶，每个班的人不能和自己班的牛奶，问最多有多少人喝到牛奶。</p>
<p>思路：枚举…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, a[i], a[i] + <span class="number">1</span>);</span><br><span class="line">            sum += a[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ll now = sum - a[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (res &gt; a[i][<span class="number">1</span>]) &#123;</span><br><span class="line">                now -= res - a[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="built_in">min</span>(now, a[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HDU多校</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 579 (Div. 3)</title>
    <url>/2019/08/14/Codeforces-Round-579-(Div.-3)/</url>
    <content><![CDATA[<h2 id="A-Circle-of-Students"><a href="#A-Circle-of-Students" class="headerlink" title="A.Circle of Students"></a>A.Circle of Students</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            p = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p, j = <span class="number">0</span>; j &lt; n; i = (i + <span class="number">1</span>) % n, ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == now) &#123;</span><br><span class="line">            now++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now == n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p, j = <span class="number">0</span>; j &lt; n; i = (i - <span class="number">1</span> + n) % n, ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == now) &#123;</span><br><span class="line">            now++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now == n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Equal-Rectangles"><a href="#B-Equal-Rectangles" class="headerlink" title="B.Equal Rectangles"></a>B.Equal Rectangles</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">4</span> * n;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">1</span>] != a[<span class="number">2</span>] || a[m] != a[m - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll S = a[<span class="number">1</span>] * a[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>, j = m - <span class="number">2</span>; i &lt;= <span class="number">2</span> * n; i += <span class="number">2</span>, j -= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != a[i + <span class="number">1</span>] || a[j] != a[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] * a[j] != S) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span> * n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Common-Divisors"><a href="#C-Common-Divisors" class="headerlink" title="C.Common Divisors"></a>C.Common Divisors</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % res != <span class="number">0</span>) &#123;</span><br><span class="line">            res = __gcd(res, a[i]);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i * i &lt;= res; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ++tmp;</span><br><span class="line">            <span class="keyword">if</span> (res / i != i) &#123;</span><br><span class="line">                ++tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = tmp;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D1-Remove-the-Substring-easy-version"><a href="#D1-Remove-the-Substring-easy-version" class="headerlink" title="D1.Remove the Substring (easy version)"></a>D1.Remove the Substring (easy version)</h2><p>题意：给定$s, t$串，删去$s$的一段区间，使得$t$是$s$的子序列，问最大的区间</p>
<p>思路：正着算一遍$t$每个位置在$s$中第一次满足的下标，倒着算一遍最后满足的下标，答案就是$t<em>i$和$t</em>{i+1}$的区间长度的$MAX$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s + <span class="number">1</span>), len2 = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[p]) &#123;</span><br><span class="line">            a[p] = i;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p = len2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len1; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[p]) &#123;</span><br><span class="line">            b[p] = i;</span><br><span class="line">            --p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(len1 - a[len2], b[<span class="number">1</span>] - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len2 - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, b[i + <span class="number">1</span>] - a[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D2-Remove-the-Substring-hard-version"><a href="#D2-Remove-the-Substring-hard-version" class="headerlink" title="D2.Remove the Substring (hard version)"></a>D2.Remove the Substring (hard version)</h2><p>题意：给定$s, t$串，删去$s$的一段区间，使得$t$是$s$的子序列，问最大的区间</p>
<p>思路：正着算一遍$t$每个位置在$s$中第一次满足的下标，倒着算一遍最后满足的下标，答案就是$t<em>i$和$t</em>{i+1}$的区间长度的$MAX$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s + <span class="number">1</span>), len2 = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[p]) &#123;</span><br><span class="line">            a[p] = i;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p = len2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len1; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[p]) &#123;</span><br><span class="line">            b[p] = i;</span><br><span class="line">            --p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(len1 - a[len2], b[<span class="number">1</span>] - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len2 - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, b[i + <span class="number">1</span>] - a[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Boxers"><a href="#E-Boxers" class="headerlink" title="E.Boxers"></a>E.Boxers</h2><p>题意：每个数可以进行$+1,-1$以及不变，问变化后序列中拥有的不同元素个数</p>
<p>思路：对于每个数，优先$-1$再不变在$+1$即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; !cnt[a[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">            cnt[a[i] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cnt[a[i]]) &#123;</span><br><span class="line">            cnt[a[i]] = <span class="number">1</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cnt[a[i] + <span class="number">1</span>]) &#123;</span><br><span class="line">            cnt[a[i] + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F1-Complete-the-Projects-easy-version"><a href="#F1-Complete-the-Projects-easy-version" class="headerlink" title="F1.Complete the Projects (easy version)"></a>F1.Complete the Projects (easy version)</h2><p>题意：有$n$件事，每件事有$a, b$表示当你的$Rank$大于等于$a$的时候才能做，做完后$Rank$变化$b$，其中$Rank$不能为负，现在有一个初始$Rank$问能否做完所有事情。</p>
<p>思路：优先做$b$非负的事情，对于$b$为负的，按照$a+b$排序，模拟一边即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll a, b, vis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;a, &amp;b);</span><br><span class="line">        vis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a + x.b &gt; y.a + y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tr = r;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].b &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].a &lt;= tr) &#123;</span><br><span class="line">                tr += a[i].b;</span><br><span class="line">                a[i].vis = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].vis) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i].a &lt;= tr &amp;&amp; tr + a[i].b &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            tr += a[i].b;</span><br><span class="line">            a[i].vis = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i].vis) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;r)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i].input();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F2-Complete-the-Projects-hard-version"><a href="#F2-Complete-the-Projects-hard-version" class="headerlink" title="F2.Complete the Projects (hard version)"></a>F2.Complete the Projects (hard version)</h2><p>题意：有$n$件事，每件事有$a, b$表示当你的$Rank$大于等于$a$的时候才能做，做完后$Rank$变化$b$，其中$Rank$不能为负，现在有一个初始$Rank$问能否做的最大数量。</p>
<p>思路：优先做$b$非负的事情，对于$b$为负的，按照$a+b$排序，进行$01$背包</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 60010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll a, b, vis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;a, &amp;b);</span><br><span class="line">        vis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; other.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a + x.b &gt; y.a + y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, r;</span><br><span class="line"><span class="keyword">int</span> dp[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="built_in">memset</span>(dp, -INF, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">int</span> tr = r;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].b &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].a &lt;= tr) &#123;</span><br><span class="line">                tr += a[i].b;</span><br><span class="line">                a[i].vis = <span class="number">1</span>;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">    dp[tr] = res;</span><br><span class="line">    <span class="keyword">int</span> ans = res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].b &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= tr; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j] == -INF) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i].a &lt;= j &amp;&amp; j + a[i].b &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = j + a[i].b;</span><br><span class="line">                dp[tmp] = <span class="built_in">max</span>(dp[tmp], dp[j] + <span class="number">1</span>);</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[tmp]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;r)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i].input();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 578 (Div. 2)</title>
    <url>/2019/08/14/Codeforces-Round-578-(Div.-2)/</url>
    <content><![CDATA[<h2 id="A-Hotelier"><a href="#A-Hotelier" class="headerlink" title="A. Hotelier"></a>A. Hotelier</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">'L'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!a[j]) &#123;</span><br><span class="line">                    a[j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">'R'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!a[j]) &#123;</span><br><span class="line">                    a[j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i - <span class="string">'0'</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Block-Adventure"><a href="#B-Block-Adventure" class="headerlink" title="B.Block Adventure"></a>B.Block Adventure</h2><p>题意：有$n$个房子，每个房子有一个高度$h<em>i$，从$i$跳到$i+1$的条件是$\vert h_i-h</em>{i+1}\vert\leq k$</p>
<p>同时刚开始有$m$个积木，可以选择使用或者拆房子。</p>
<p>问能否到达$n$</p>
<p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i + <span class="number">1</span>] - a[i] &gt; k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i + <span class="number">1</span>] - a[i] - k &gt; m) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    m -= a[i + <span class="number">1</span>] - a[i] - k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m += <span class="built_in">min</span>(k - (a[i + <span class="number">1</span>] - a[i]), a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m += a[i] - a[i + <span class="number">1</span>] + <span class="built_in">min</span>(<span class="number">1l</span>l * k, a[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (solve() ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Round-Corridor"><a href="#C-Round-Corridor" class="headerlink" title="C. Round Corridor"></a>C. Round Corridor</h2><p>题意：有一个圆盘，外面分成$n$个扇形，里面$m$个扇形，问两个坐标能否到达对方。</p>
<p>思路：计算$gcd(n, m)$那么如果$x$在外面区域，那么它属于$\frac{x-1}{\frac{n}{gcd(n, m)}}$，在里面属于$\frac{x-1}{\frac{m}{gcd(n, m)}}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line">ll n, m, q, sx, sy, ex, ey;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q) &#123;</span><br><span class="line">        ll G = __gcd(m, n);</span><br><span class="line">        n /= G, m /= G;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sx &gt;&gt; sy &gt;&gt; ex &gt;&gt; ey;</span><br><span class="line">            <span class="keyword">int</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (sx == <span class="number">1</span>) &#123;</span><br><span class="line">                res1 = (sy - <span class="number">1</span>) / n;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res1 = (sy - <span class="number">1</span>) / m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ex == <span class="number">1</span>) &#123;</span><br><span class="line">                res2 = (ey - <span class="number">1</span>) / n;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res2 = (ey - <span class="number">1</span>) / m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (res1 == res2 ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-White-Lines"><a href="#D-White-Lines" class="headerlink" title="D.White Lines"></a>D.White Lines</h2><p>题意：有一个$n\cdot n$的矩形，里面有$W、B$，在只能染色一块$k\cdot k$的正方形的时候，只有$W$的行和只有$W$的列的最大值。</p>
<p>思路：处理第$i$行的出现$B$的左端点$L$右端点$R$，当$R-L+1\geq k$的时候，那么$k\cdot k$正方形的左端点出现在$(max(1, i-k+1)， max（1， R - k + 1）), (i, L)$范围内才能将这一行染色。同样道理处理每一列，然后求二维矩阵前缀和</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    a[x1][y1]++;</span><br><span class="line">    a[x1][y2 + <span class="number">1</span>]--;</span><br><span class="line">    a[x2 + <span class="number">1</span>][y1]--;</span><br><span class="line">    a[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> L = INF, R = -INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'B'</span>) &#123;</span><br><span class="line">                L = <span class="built_in">min</span>(L, j);</span><br><span class="line">                R = <span class="built_in">max</span>(R, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L != INF) &#123;</span><br><span class="line">            <span class="keyword">if</span> (R - L + <span class="number">1</span> &lt;= k) &#123;</span><br><span class="line">                add(<span class="built_in">max</span>(<span class="number">1</span>, i - k + <span class="number">1</span>), <span class="built_in">max</span>(<span class="number">1</span>, R - k + <span class="number">1</span>), i, L);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> L = INF, R = -INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'B'</span>) &#123;</span><br><span class="line">                L = <span class="built_in">min</span>(L, i);</span><br><span class="line">                R = <span class="built_in">max</span>(R, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L != INF) &#123;</span><br><span class="line">            <span class="keyword">if</span> (R - L + <span class="number">1</span> &lt;= k) &#123;</span><br><span class="line">                add(<span class="built_in">max</span>(<span class="number">1</span>, R - k + <span class="number">1</span>), <span class="built_in">max</span>(<span class="number">1</span>, j - k + <span class="number">1</span>), L, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            a[i][j] += a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            res = <span class="built_in">max</span>(res, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; (s[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Compress-Words"><a href="#E-Compress-Words" class="headerlink" title="E.Compress Words"></a>E.Compress Words</h2><p>题意：给出$n$个字符串拼接，选择前面的后缀和后面的前缀的最长部分去掉一个，求拼接后的字符串</p>
<p>思路：$KMP$模板题…失配位置就是我们需要求的拼接长度，注意每次只需要做前后字符串最短长度部分即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nxt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="built_in">string</span> x)</span> </span>&#123;</span><br><span class="line">    nxt[<span class="number">0</span>] = nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = x.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = nxt[i];</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; x[i] != x[j])</span><br><span class="line">            j = nxt[j];</span><br><span class="line">        nxt[i + <span class="number">1</span>] = (x[j] == x[i]) ? j + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    get_next(p);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[j] != i)</span><br><span class="line">            j = nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (p[j] == i)</span><br><span class="line">            ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> ans, p, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; ans;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">min</span>(ans.<span class="built_in">size</span>(), p.<span class="built_in">size</span>());</span><br><span class="line">            tmp.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = ans.<span class="built_in">size</span>() - len, sze = ans.<span class="built_in">size</span>(); j &lt; sze; ++j) &#123;</span><br><span class="line">                tmp += ans[j];</span><br><span class="line">            &#125;</span><br><span class="line">            len = kmp(tmp, p);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len, sze = p.<span class="built_in">size</span>(); j &lt; sze; ++j) &#123;</span><br><span class="line">                ans += p[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Graph-Traveler"><a href="#F-Graph-Traveler" class="headerlink" title="F. Graph Traveler"></a>F. Graph Traveler</h2><p>题意：有$n$个点，每个点有一个$k, m$，一个人刚开始有一个权值$c$，如果他走到$x$点，那么他的$c$会变成$c+k_x$，他下一步走向$G[x][c\% m_x]$，有$q$次查询，每次给出$x, c$，问有多少个点是不断经过的。</p>
<p>思路：注意到$m$取值只有$[1,10]$，那么一个点只有$2520(ps:lcm(1\cdots 10))$种本质不同的$c$，记忆化即可…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2560</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">2520</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k[N], q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; G;</span><br><span class="line"><span class="keyword">int</span> f[N * M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now = x * p + y;</span><br><span class="line">    <span class="keyword">if</span> (f[now] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> f[now];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    se.insert(now);</span><br><span class="line">    st.push(now);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        x = now / p, y = now % p;</span><br><span class="line">        <span class="keyword">int</span> ny = ((y + k[x]) % p + p) % p;</span><br><span class="line">        <span class="keyword">int</span> nx = G[x][ny % G[x].<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">int</span> nxt = nx * p + ny;</span><br><span class="line">        <span class="keyword">if</span> (f[nxt] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">                f[st.top()] = f[nxt];</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> f[nxt];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (se.<span class="built_in">find</span>(nxt) != se.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> Top = st.top();</span><br><span class="line">                tmp.insert(Top / p);</span><br><span class="line">                st.pop();</span><br><span class="line">                <span class="keyword">if</span> (Top == nxt) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line">                f[it] = tmp.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tmp.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        now = nxt;</span><br><span class="line">        st.push(now);</span><br><span class="line">        se.insert(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">            G[i].resize(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : G[i]) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            y = (y % p + p) % p;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; gao(x, y) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>XIV Open Cup named after E.V. Pankratiev. GP of SPb</title>
    <url>/2019/08/13/XIV-Open-Cup-named-after-E.V.-Pankratiev.-GP-of-SPb/</url>
    <content><![CDATA[<h2 id="A-Bracket-Expression"><a href="#A-Bracket-Expression" class="headerlink" title="A. Bracket Expression"></a>A. Bracket Expression</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, id[N], sta[N], top; </span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> == r) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ) &#123;</span><br><span class="line">        res *= <span class="number">1l</span>l + gao(i + <span class="number">1</span>, id[i] - <span class="number">1</span>);</span><br><span class="line">        i = id[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"bracket-expression.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"bracket-expression.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (gets(s + <span class="number">1</span>)) &#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">                sta[++top] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                assert(top);</span><br><span class="line">                <span class="keyword">int</span> T = sta[top];</span><br><span class="line">                id[T] = i;</span><br><span class="line">                id[i] = T; </span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, gao(<span class="number">1</span>, n)); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Checkers"><a href="#B-Checkers" class="headerlink" title="B. Checkers"></a>B. Checkers</h2><p>题意：有$n$台游戏机，每台游戏机有游玩历史，$Alice$从$1−n$循环去玩每个游戏机，每个游戏机可以玩$1$到$2$次。<br>定义了一条规则判断$Alice$当前跟这个游戏机所玩的是$W$还是$B$。<br>规则就是拿$Alice$的游戏历史跟机器的游戏历史向上比对，如果找到一条不同的，当前玩的局面就和那次交换。<br>如果没有找到，$Alice$就可以玩$W$<br>$Alice$想要尽可能多的玩$W$，最多能玩几次？</p>
<p>思路：爆搜每种状态，复杂度$O(2^n\cdot k)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B 1 W 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> engin, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = engin.<span class="built_in">size</span>() - <span class="number">1</span>, j = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; --i, --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (engin[i] == <span class="string">'B'</span> &amp;&amp; res[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (engin[i] == <span class="string">'W'</span> &amp;&amp; res[j] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> pos, <span class="keyword">int</span> cnt, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur &gt;= k) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + cur &lt;= k &amp;&amp; i &lt;= <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">string</span> tmp = s[pos];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = res;</span><br><span class="line">        <span class="keyword">int</span> tmpcnt = cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> nxt = judge(s[pos], temp);</span><br><span class="line">            temp.push_back(nxt);</span><br><span class="line">            s[pos].push_back(nxt ? <span class="string">'W'</span> : <span class="string">'B'</span>);</span><br><span class="line">            <span class="keyword">if</span> (nxt == <span class="number">0</span>) &#123;</span><br><span class="line">                tmpcnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(cur + i, pos % n + <span class="number">1</span>, tmpcnt, temp);</span><br><span class="line">        s[pos] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"checkers.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"checkers.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        DFS(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, res);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Four-Prime-Numbers"><a href="#E-Four-Prime-Numbers" class="headerlink" title="E. Four Prime Numbers"></a>E. Four Prime Numbers</h2><p>题意：给出一个数，为它能被分解四个素数的方案数</p>
<p>思路：$f[i]$表示用两个素数拼出$i$的方案数，答案为$\sum_{i=0}^{n}f[i]\cdot f[n-i]$</p>
<p>复杂度为$O(\frac{n ^ 2}{log_2^2n})$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> pri[N], check[N], ptot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span> check);</span><br><span class="line">    ptot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!check[i]) &#123;</span><br><span class="line">            pri[++ptot] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ptot; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1l</span>l * i * pri[j] &gt;= N) <span class="keyword">break</span>;</span><br><span class="line">            check[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"fourprimes.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); </span><br><span class="line">    freopen(<span class="string">"fourprimes.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>); </span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ptot; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pri[i] + pri[i] &lt;= n) &#123;</span><br><span class="line">                f[pri[i] + pri[i]] += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i &amp;&amp; pri[i] + pri[j] &lt;= n; ++j) &#123;</span><br><span class="line">                f[pri[i] + pri[j]] += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            res += f[i] * f[n - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Set-Intersection"><a href="#F-Set-Intersection" class="headerlink" title="F. Set Intersection"></a>F. Set Intersection</h2><p>打表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, l, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"intset.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"intset.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;l, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = round(<span class="number">1.0</span> * l * m / n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Medals"><a href="#G-Medals" class="headerlink" title="G. Medals"></a>G. Medals</h2><p>题意：有$n$个运动员，每个运动员只能参加一个项目，一个项目只能由一个运动员参加。<br>现在知道哪些运动员去参加哪些项目可以获得什么类型的奖牌。<br>现在要求给出一种方案，要求保证第一种类型的奖牌数量最多的情况下再保证第二种类型的奖牌数量最多，以此类推</p>
<p>思路：将第$i$种奖牌权值赋为$1001^{10-i}$</p>
<p>跑费用流。</p>
<p>为了保证费用最大，因此每次只有在$dis[T]&lt;0$的时候才能增广</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap;</span><br><span class="line">    ll cost;</span><br><span class="line">    </span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge (<span class="keyword">int</span>  _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _cap, ll _cost) &#123;</span><br><span class="line">        to = _to;</span><br><span class="line">        nxt = _nxt;</span><br><span class="line">        cap = _cap;</span><br><span class="line">        cost = _cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; edge[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], pe[MAXN];</span><br><span class="line">ll dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line">ll prize[MAXN];</span><br><span class="line">ll INF = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        out(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, (<span class="keyword">int</span>)(x % <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v, <span class="keyword">int</span> cap, ll cost)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], cap, cost); head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], <span class="number">0</span>, -cost); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= T; ++i) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[S] = <span class="number">0</span>;</span><br><span class="line">    vis[S] = <span class="literal">true</span>;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].cap &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                pre[v] = u;</span><br><span class="line">                pe[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[T] &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">    ll cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (SPFA(S, T)) &#123;</span><br><span class="line">        cost -= dis[T];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = T; i != S; i = pre[i]) &#123;</span><br><span class="line">            edge[pe[i]].cap--;</span><br><span class="line">            edge[pe[i] ^ <span class="number">1</span>].cap++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        num[i] = cost % <span class="number">1001</span>;</span><br><span class="line">        cost /= <span class="number">1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, num[i], <span class="string">" \n"</span>[i == <span class="number">10</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; ~j; j = edge[j].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[j].to != S &amp;&amp; (!edge[j].cap)) &#123;</span><br><span class="line">                res = edge[j].to - n;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, res, <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"medals.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"medals.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    INF = INF * INF;</span><br><span class="line">    prize[<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; ++i) &#123;</span><br><span class="line">        prize[i] = prize[i - <span class="number">1</span>] * <span class="number">1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k, a, b; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">                addedge(i, a + n, <span class="number">1</span>, -prize[<span class="number">10</span> - b]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">0</span>, T = n + <span class="number">1001</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            addedge(S, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt; T; ++i) &#123;</span><br><span class="line">            addedge(i, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        solve(S, T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Reachability"><a href="#H-Reachability" class="headerlink" title="H. Reachability"></a>H. Reachability</h2><p>题意：给出一张$n$个点的图，每次操作增加或删去边，输出可达矩阵的值。</p>
<p>思路：$bitsset$优化跑闭包</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 510</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line">uint A[N], B[N];</span><br><span class="line"><span class="built_in">bitset</span> &lt;N&gt; G[N], H[N];</span><br><span class="line"></span><br><span class="line"><span class="function">uint <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        H[i] = G[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (H[i][k]) &#123;</span><br><span class="line">                H[i] |= H[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    uint res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j &amp;&amp; H[i][j]) &#123;</span><br><span class="line">                res += A[i - <span class="number">1</span>] * B[j - <span class="number">1</span>];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"reachability.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"reachability.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    A[<span class="number">0</span>] = B[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%u%u"</span>, &amp;n, &amp;q, A + <span class="number">1</span>, B + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        A[i] = A[i - <span class="number">1</span>] * A[<span class="number">1</span>];</span><br><span class="line">        B[i] = B[i - <span class="number">1</span>] * B[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].reset();</span><br><span class="line">    <span class="keyword">char</span> op1[<span class="number">5</span>], op2[<span class="number">5</span>]; <span class="keyword">int</span> v, a[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _q = <span class="number">1</span>; _q &lt;= q; ++_q) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%d%d"</span>, op1, op2, &amp;v, a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">            <span class="keyword">if</span> (op2[<span class="number">0</span>] == <span class="string">'o'</span>) &#123;</span><br><span class="line">                G[v][a[i]] = G[v][a[i]] ^ <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                G[a[i]][v] = G[a[i]][v] ^ <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, gao());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Snakes-on-the-Stone"><a href="#J-Snakes-on-the-Stone" class="headerlink" title="J. Snakes on the Stone"></a>J. Snakes on the Stone</h2><p>题意：有若干条蛇躺在平面上，要求蛇与蛇之间不打结，每个点最多有两条蛇在那里交叉，问如果安排交叉点哪条蛇在上，哪条蛇在下使得所有蛇不交叉。</p>
<p>思路：感性理解一下，第一次经过交叉点向下，第二次向上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;pii&gt;&gt; vec;</span><br><span class="line"><span class="keyword">int</span> n, cnt[N][N], vis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"snakes2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"snakes2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        vec.<span class="built_in">clear</span>(); vec.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, m; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">            vec[i].resize(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : vec[i]) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; it.fi &gt;&gt; it.se;</span><br><span class="line">                ++cnt[it.fi][it.se];</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[it.fi][it.se] &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; (vis[it.fi][it.se] ? <span class="string">"+"</span> : <span class="string">"-"</span>);</span><br><span class="line">                    ++vis[it.fi][it.se]; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;pii&gt;&gt; vec;</span><br><span class="line"><span class="keyword">int</span> n, cnt[N][N], vis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"snakes2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"snakes2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        vec.<span class="built_in">clear</span>(); vec.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, m; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">            vec[i].resize(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : vec[i]) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; it.fi &gt;&gt; it.se;</span><br><span class="line">                ++cnt[it.fi][it.se];</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[it.fi][it.se] &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; (vis[it.fi][it.se] ? <span class="string">"+"</span> : <span class="string">"-"</span>);</span><br><span class="line">                    ++vis[it.fi][it.se]; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>2011-2012 Summer Petrozavodsk Camp, Warsaw U Contest, 2011-09-11</title>
    <url>/2019/08/12/2011-2012-Summer-Petrozavodsk-Camp,-Warsaw-U-Contest,-2011-09-11/</url>
    <content><![CDATA[<h2 id="A-Chocolate"><a href="#A-Chocolate" class="headerlink" title="A.Chocolate"></a>A.Chocolate</h2><p>题意：给定一个$n\cdot m$的巧克力，上面有个标记的$cell$每次选择一个水平线或者竖直线，沿线切开，如果迟到标记的点则输，问先手输的方案数</p>
<p>思路：显然是一个$Nim$游戏，即求$\sum<em>{i=0}^{n - 1}\sum</em>{j=1}^{m-1}i\oplus (n-1-i)\oplus j \oplus(m-1-j)$</p>
<p>打表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;pii, ll&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp.<span class="built_in">find</span>(pii(n, m)) != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> mp[pii(n, m)];</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != m % <span class="number">2</span>) &#123;</span><br><span class="line">            mp[pii(n, m)] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mp[pii(n, m)] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> != m % <span class="number">2</span>) &#123;</span><br><span class="line">        mp[pii(n, m)] = <span class="number">0l</span>l;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>) &#123;</span><br><span class="line">        mp[pii(n, m)] = <span class="number">1l</span>l;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        mp[pii(n, m)] = <span class="number">4l</span>l * gao(n / <span class="number">2</span>, m / <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        mp[pii(n, m)] = <span class="number">1l</span>l * gao(n / <span class="number">2</span>, m / <span class="number">2</span>) + <span class="number">1l</span>l * gao(n / <span class="number">2</span> + <span class="number">1</span>, m / <span class="number">2</span> + <span class="number">1</span>) + gao(n / <span class="number">2</span> + <span class="number">1</span>, m / <span class="number">2</span>) + gao(n / <span class="number">2</span>, m / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[pii(n, m)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"chocolate.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"chocolate.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, gao(n, m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Programming-Contest"><a href="#B-Programming-Contest" class="headerlink" title="B. Programming Contest"></a>B. Programming Contest</h2><p>题意：有$n$个人，$m$道题，每个人有自己能做的题以及做出一道题时间为$r$，比赛持续时间为$t$，求一个方案使得题目最多，罚时最少。</p>
<p>思路：考虑匈牙利不会导致之前匹配的点失配，那么直接做匈牙利，每次减少一道题或者一个人不能在做题，最多做$1000$次</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 510</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; G;</span><br><span class="line"><span class="keyword">int</span> linker[N];</span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"><span class="keyword">int</span> uN;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[v]) &#123;</span><br><span class="line">            used[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (linker[v] == <span class="number">-1</span> || DFS(linker[v])) &#123;</span><br><span class="line">                linker[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, r, t, k;</span><br><span class="line"><span class="keyword">int</span> Time[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"contest.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"contest.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;n, &amp;m, &amp;r, &amp;t, &amp;k) != EOF) &#123;</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(linker, <span class="number">-1</span>, <span class="keyword">sizeof</span> linker);</span><br><span class="line">        <span class="built_in">memset</span>(Time, <span class="number">0</span>, <span class="keyword">sizeof</span> Time);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b; i &lt;= k; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            G[a].push_back(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * r &lt;= t; ++i)  &#123;</span><br><span class="line">            <span class="keyword">bool</span> F = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span> used);</span><br><span class="line">                <span class="keyword">if</span> (DFS(u)) &#123;</span><br><span class="line">                    F = <span class="number">1</span>;</span><br><span class="line">                    ans1++;</span><br><span class="line">                    ans2 += i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!F) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans1, ans2 * r);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (linker[i] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> u = linker[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, u, i, Time[u]);</span><br><span class="line">            Time[u] += r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Evacuation"><a href="#D-Evacuation" class="headerlink" title="D. Evacuation"></a>D. Evacuation</h2><p>题意：有$n$个点，$m$条有向边，$q$次操作，每次删除一个点或者查询$1$到$p$ 的距离</p>
<p>思路：</p>
<p>考虑倒过来就是加边，每次只会修改一个点，将这个点暴力$BFS$，每个点最多修改$n$次，复杂度为$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 200010</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> e[M][<span class="number">3</span>], res[M];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="comment">//0加边 1 询问</span></span><br><span class="line">    <span class="keyword">int</span> op, p;</span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    qnode(<span class="keyword">int</span> op, <span class="keyword">int</span> p) : op(op), p(p) &#123;&#125;</span><br><span class="line">&#125;que[M];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">    qu.push(u);</span><br><span class="line">    <span class="keyword">while</span> (!qu.empty()) &#123;</span><br><span class="line">        u = qu.front(); qu.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[u] + <span class="number">1</span> &lt; dis[v]) &#123;</span><br><span class="line">                dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">                qu.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"evacuation.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"evacuation.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q) != EOF) &#123;</span><br><span class="line">        G.<span class="built_in">clear</span>(); G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;e[i][<span class="number">0</span>], &amp;e[i][<span class="number">1</span>]);</span><br><span class="line">            e[i][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> op[<span class="number">10</span>]; <span class="keyword">int</span> p;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, op, &amp;p);</span><br><span class="line">            que[i] = qnode(op[<span class="number">0</span>] == <span class="string">'U'</span> ? <span class="number">0</span> : <span class="number">1</span>, p);</span><br><span class="line">            <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'U'</span>) &#123;</span><br><span class="line">                e[p][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (e[i][<span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            G[e[i][<span class="number">0</span>]].push_back(e[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//  G[e[i][1]].push_back(e[i][0]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = q; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (que[i].op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = e[que[i].p][<span class="number">0</span>], y = e[que[i].p][<span class="number">1</span>];</span><br><span class="line">                G[x].push_back(y);</span><br><span class="line">                <span class="keyword">if</span> (dis[x] + <span class="number">1</span> &lt; dis[y]) &#123;</span><br><span class="line">                    dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                    BFS(y);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[i] = dis[que[i].p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (que[i].op == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i] &gt;= INF ? <span class="number">-1</span> : res[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Inspection"><a href="#E-Inspection" class="headerlink" title="E. Inspection"></a>E. Inspection</h2><p>题意：有$n$个点的树</p>
<ul>
<li>选定一个点$S$</li>
<li>从$S$出发访问每个节点，访问完回到$S$，一次的访问时间为路径长度，最后一次访问可以补回来</li>
<li>连续的两次不能走同一条路</li>
<li>输出最小时间</li>
</ul>
<p>思路：经典树形$dp$ </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line">ll f[N], g[N], res[N];</span><br><span class="line">pii mf[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sze[N], fa[N], mg[N]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; </span><br><span class="line">    sze[u] = <span class="number">1</span>; </span><br><span class="line">    f[u] = <span class="number">0</span>; </span><br><span class="line">    mf[u][<span class="number">0</span>] = pii(<span class="number">0</span>, u);</span><br><span class="line">    mf[u][<span class="number">1</span>] = pii(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">        fa[v] = u;</span><br><span class="line">        DFS(v);</span><br><span class="line">        sze[u] += sze[v];</span><br><span class="line">        f[u] += f[v] + sze[v]; </span><br><span class="line">        <span class="keyword">if</span> (mf[v][<span class="number">0</span>].fi + <span class="number">1</span> &gt; mf[u][<span class="number">0</span>].fi) &#123;</span><br><span class="line">            mf[u][<span class="number">1</span>] = mf[u][<span class="number">0</span>];</span><br><span class="line">            mf[u][<span class="number">0</span>] = mf[v][<span class="number">0</span>];</span><br><span class="line">            ++mf[u][<span class="number">0</span>].fi;</span><br><span class="line">            mf[u][<span class="number">0</span>].se = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mf[v][<span class="number">0</span>].fi + <span class="number">1</span> &gt; mf[u][<span class="number">1</span>].fi) &#123;</span><br><span class="line">            mf[u][<span class="number">1</span>] = mf[v][<span class="number">0</span>];</span><br><span class="line">            ++mf[u][<span class="number">1</span>].fi;</span><br><span class="line">            mf[u][<span class="number">1</span>].se = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">        g[v] = <span class="number">0</span>;</span><br><span class="line">        g[v] += n - sze[v];</span><br><span class="line">        g[v] += g[u];</span><br><span class="line">        g[v] += f[u] - sze[v] - f[v];</span><br><span class="line">        mg[v] = mg[u] + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span> (mf[u][<span class="number">0</span>].se == v) &#123;</span><br><span class="line">            mg[v] = <span class="built_in">max</span>(mg[v], mf[u][<span class="number">1</span>].fi + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mg[v] = <span class="built_in">max</span>(mg[v], mf[u][<span class="number">0</span>].fi + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DFS2(v); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"inspection.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"inspection.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        G.<span class="built_in">clear</span>(); G.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[u].push_back(v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        g[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        mg[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        DFS(<span class="number">1</span>); </span><br><span class="line">        DFS2(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            <span class="keyword">int</span> Max = <span class="number">0</span>, num;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sze[v] &gt; Max) &#123;</span><br><span class="line">                    Max = sze[v];</span><br><span class="line">                    num = mf[v][<span class="number">0</span>].fi + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n - sze[u] &gt; Max) &#123;</span><br><span class="line">                Max = <span class="built_in">max</span>(Max, n - sze[u]);</span><br><span class="line">                num = mg[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Max &gt; n - <span class="number">1</span> - Max + <span class="number">1</span>) &#123;</span><br><span class="line">                res[u] = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[u] = <span class="number">2l</span>l * (f[u] + g[u]);</span><br><span class="line">                <span class="keyword">if</span> (Max == n - <span class="number">1</span> - Max + <span class="number">1</span>) &#123;</span><br><span class="line">                    res[u] -= num;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[u] -= <span class="built_in">max</span>(mf[u][<span class="number">0</span>].fi, mg[u]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Meteors"><a href="#F-Meteors" class="headerlink" title="F. Meteors"></a>F. Meteors</h2><p>题意：有$n$个城市，$m$个地点，每个地点属于一个城市，接下来有$q$次操作，每次操作是的$[L,R]$区间内的点下$a_i$雨，每个城市有一个目标降雨量$p_i$，为最早到达目标的操作次数</p>
<p>思路：经典整体二分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, res[N];</span><br><span class="line">ll tar[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    ll a;</span><br><span class="line">    tnode() &#123;&#125;  </span><br><span class="line">    tnode(<span class="keyword">int</span> l, <span class="keyword">int</span> r, ll a) : l(l), r(r), a(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;l, &amp;r, &amp;a); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;arr[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id; ll v;</span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    qnode(<span class="keyword">int</span> id, ll v) : id(id), v(v) &#123;&#125;</span><br><span class="line">&#125;que[N], ql[N], qr[N]; </span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt; N; x += x &amp; -x) &#123;</span><br><span class="line">            a[x] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt; <span class="number">0</span>; x -= x &amp; -x) &#123;</span><br><span class="line">            res += a[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">            update(l, v);</span><br><span class="line">            update(m + <span class="number">1</span>, -v);</span><br><span class="line">            update(<span class="number">1</span>, v);</span><br><span class="line">            update(r + <span class="number">1</span>, -v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            update(l, v);</span><br><span class="line">            update(r + <span class="number">1</span>, -v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="built_in">bit</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//  cout &lt;&lt; L &lt;&lt; " " &lt;&lt; R &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="comment">//  cout &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">            res[que[i].id] = l; </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i) &#123;</span><br><span class="line">        <span class="built_in">bit</span>.update(arr[i].l, arr[i].r, arr[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> posl = <span class="number">0</span>, posr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">        ll tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec[que[i].id]) &#123;</span><br><span class="line">            tot += <span class="built_in">bit</span>.query(it);</span><br><span class="line">            <span class="keyword">if</span> (tot &gt; que[i].v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//  cout &lt;&lt; que[i].id &lt;&lt; " " &lt;&lt; tot &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (tot &lt; que[i].v) &#123;</span><br><span class="line">            que[i].v -= tot;</span><br><span class="line">            qr[++posr] = que[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ql[++posl] = que[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= posl; ++i) que[L + i - <span class="number">1</span>] = ql[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= posr; ++i) que[L + posl + i - <span class="number">1</span>] = qr[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i) <span class="built_in">bit</span>.update(arr[i].l, arr[i].r, -arr[i].a);</span><br><span class="line">    gao(L, L + posl - <span class="number">1</span>, l, mid);</span><br><span class="line">    gao(L + posl, R, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == q + <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"NIE"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"meteors.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); </span><br><span class="line">    freopen(<span class="string">"meteors.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>); </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123; </span><br><span class="line">        vec.<span class="built_in">clear</span>(); vec.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">bit</span>.init(); </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res[i] = q + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            vec[x].push_back(i); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, tar + i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            arr[i].scan();</span><br><span class="line">        &#125;</span><br><span class="line">        arr[q + <span class="number">1</span>] = tnode(<span class="number">1</span>, m, <span class="number">2000000000l</span>l);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            que[i] = qnode(i, tar[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        gao(<span class="number">1</span>, n, <span class="number">1</span>, q + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            out(res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Party"><a href="#G-Party" class="headerlink" title="G. Party"></a>G. Party</h2><p>题意：给定一个有$\frac{2n}{3}$大小的团，求出$\frac{n}{3}$使得这些点是团</p>
<p>思路：感性理解</p>
<p>假设都是团，枚举每个假设是团的点，如果这个点和一个你假设的点不相连，那么将这两个点都删除，每次只会删除两个不是团中的点或者一个团中的点以及一个不是团中的点，那么最多误删$\frac{n}{3}$个点，剩下的就是团中的点。</p>
<p>思路二</p>
<p>每次选取度最小的点删除，直到所有点度数相同，感性理解即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"party.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"party.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[u][v] = G[v][u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[j] &amp;&amp; !G[i][j]) &#123;</span><br><span class="line">                    vis[i] = vis[j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                res.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, res[i], <span class="string">" \n"</span>[i == n / <span class="number">3</span> - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-Sticks"><a href="#I-Sticks" class="headerlink" title="I. Sticks"></a>I. Sticks</h2><p>题意：有$k$ 个颜色，每个颜色有$n_i$个棍子，问能否有方案是的三根不同颜色的棍子拼成三角形</p>
<p>思路：排序后枚举一根棍子，往前找最大的不同颜色的棍子，往后找最小的不同颜色的棍子，$check$。考虑到如果$n$很大，那么很显然这很快就能找到方案。</p>
<p>可以考虑不合法方案，那就是一个斐波那契数列，只有$50$就会超过$1e9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec; </span><br><span class="line">pii a[N];</span><br><span class="line"><span class="keyword">int</span> Max[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m);</span><br><span class="line">    <span class="built_in">memset</span>(Max, <span class="number">0</span>, <span class="keyword">sizeof</span> Max); </span><br><span class="line">    <span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; se[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        se[a[i].se].insert(a[i].fi); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        se[a[i].se].erase(a[i].fi);</span><br><span class="line">        <span class="built_in">vector</span> &lt;pii&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!se[j].empty()) &#123;</span><br><span class="line">                b.push_back(pii(*se[j].<span class="built_in">begin</span>(), j)); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), [](pii x, pii y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x.fi &lt; y.fi;         </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span> (j != a[i].se) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y, z; y = a[i].fi; </span><br><span class="line">            <span class="keyword">if</span> (Max[j] != <span class="number">0</span>) &#123;</span><br><span class="line">                x = Max[j];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (it.se != a[i].se &amp;&amp; it.se != j) &#123;</span><br><span class="line">                        z = it.fi;</span><br><span class="line">                        <span class="keyword">if</span> (x + y &gt; z) &#123;</span><br><span class="line">                            <span class="built_in">cout</span> &lt;&lt; a[i].se &lt;&lt; <span class="string">" "</span> &lt;&lt; a[i].fi &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="string">" "</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> &lt;&lt; it.se &lt;&lt; <span class="string">" "</span> &lt;&lt; it.fi &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Max[a[i].se] = <span class="built_in">max</span>(Max[a[i].se], a[i].fi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NIE\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"sticks.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sticks.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>); <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        vec.<span class="built_in">clear</span>(); vec.resize(n + <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, num; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">            vec[i].resize(num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : vec[i]) <span class="built_in">cin</span> &gt;&gt; it;</span><br><span class="line">            sort(vec[i].<span class="built_in">begin</span>(), vec[i].<span class="built_in">end</span>());</span><br><span class="line">            vec[i].erase(unique(vec[i].<span class="built_in">begin</span>(), vec[i].<span class="built_in">end</span>()), vec[i].<span class="built_in">end</span>());   </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : vec[i]) &#123;</span><br><span class="line">                a[++m] = pii(it, i); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 70 (Rated for Div. 2)</title>
    <url>/2019/08/09/Educational-Codeforces-Round-70-(Rated-for-Div.-2)/</url>
    <content><![CDATA[<h2 id="A-You-Are-Given-Two-Binary-Strings…"><a href="#A-You-Are-Given-Two-Binary-Strings…" class="headerlink" title="A. You Are Given Two Binary Strings…"></a>A. You Are Given Two Binary Strings…</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> x[N], y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, x + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, y + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(y + <span class="number">1</span>); i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y[i] != <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(x + <span class="number">1</span>) - cnt1; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x[i] != <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-You-Are-Given-a-Decimal-String…"><a href="#B-You-Are-Given-a-Decimal-String…" class="headerlink" title="B. You Are Given a Decimal String…"></a>B. You Are Given a Decimal String…</h2><p>题意：给定一个$x-y$计数器，每次只能加$x$或者$y$，且每次输出个位，现在有一个缺失了的打印结果，问对于一个$x-y(0\leq x\leq 9, 0\leq y\leq0)$最少的填充字符数</p>
<p>思路：预处理$x-y$计数器的$i-j(0\leq i\leq9,0\leq j\leq 9)$从$i$到达$j$的最小填充数字。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">ll ans[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>][<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; ++x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; ++y) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> o1 = <span class="number">0</span>; o1 &lt; <span class="number">10</span>; ++o1) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> o2 = <span class="number">0</span>; o2 &lt; <span class="number">10</span>; ++o2) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; ++j) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> ((o1 + i * x + j * y) % <span class="number">10</span> == o2) &#123;</span><br><span class="line">                                a[x][y][o1][o2] = <span class="built_in">min</span>(a[x][y][o1][o2], i + j);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; ++y) &#123;</span><br><span class="line">                ans[x][y] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                    <span class="keyword">int</span> c1 = s[i] - <span class="string">'0'</span>, c2 = s[i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (a[x][y][c2][c1] == INF) &#123;</span><br><span class="line">                        ans[x][y] = <span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ans[x][y] += a[x][y][c2][c1] - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; ++y) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, ans[x][y], <span class="string">" \n"</span>[y == <span class="number">9</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-You-Are-Given-a-WASD-string…"><a href="#C-You-Are-Given-a-WASD-string…" class="headerlink" title="C. You Are Given a WASD-string…"></a>C. You Are Given a WASD-string…</h2><p>题意：给定一个机器人，最多填充一个命令，使得包围住机器人走过路径的矩形的最小面积</p>
<p>思路：填充一个命令$=$回推一步，枚举到达上下左右边界的位置，回推一步后算面积</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> Left[N], Right[N], Up[N], Down[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'W'</span>) &#123;</span><br><span class="line">        ++y;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'A'</span>) &#123;</span><br><span class="line">        --x;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'S'</span>) &#123;</span><br><span class="line">        --y;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'D'</span>) &#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x1 = INF, x2 = INF, y1 = INF, y2 = INF;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, up = <span class="number">0</span>, down = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            change(x, y, s[i]);</span><br><span class="line">            <span class="keyword">if</span> (left &gt; x) &#123;</span><br><span class="line">                x1 = i;</span><br><span class="line">                left = x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; x) &#123;</span><br><span class="line">                x2 = i;</span><br><span class="line">                right = x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (up &lt; y) &#123;</span><br><span class="line">                y1 = i;</span><br><span class="line">                up = y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (down &gt; y) &#123;</span><br><span class="line">                y2 = i;</span><br><span class="line">                down = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">1l</span>l * (up - down + <span class="number">1</span>) * (right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//right</span></span><br><span class="line">        <span class="keyword">if</span> (x1 != INF) &#123;</span><br><span class="line">            x = y = left = right = up = down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == x1) &#123;</span><br><span class="line">                    change(x, y, <span class="string">'D'</span>);</span><br><span class="line">                    left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                    right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                    up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                    down = <span class="built_in">min</span>(down, y);</span><br><span class="line">                &#125;</span><br><span class="line">                change(x, y, s[i]);</span><br><span class="line">                left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                down = <span class="built_in">min</span>(down, y);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="number">1l</span>l * (up - down + <span class="number">1</span>) * (right - left + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x2 != INF) &#123;</span><br><span class="line">            x = y = left = right = up = down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == x2) &#123;</span><br><span class="line">                    change(x, y, <span class="string">'A'</span>);</span><br><span class="line">                    left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                    right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                    up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                    down = <span class="built_in">min</span>(down, y);</span><br><span class="line">                &#125;</span><br><span class="line">                change(x, y, s[i]);</span><br><span class="line">                left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                down = <span class="built_in">min</span>(down, y);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="number">1l</span>l * (up - down + <span class="number">1</span>) * (right - left + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y1 != INF) &#123;</span><br><span class="line">            x = y = left = right = up = down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == y1) &#123;</span><br><span class="line">                    change(x, y, <span class="string">'S'</span>);</span><br><span class="line">                    left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                    right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                    up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                    down = <span class="built_in">min</span>(down, y);</span><br><span class="line">                &#125;</span><br><span class="line">                change(x, y, s[i]);</span><br><span class="line">                left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                down = <span class="built_in">min</span>(down, y);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="number">1l</span>l * (up - down + <span class="number">1</span>) * (right - left + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y2 != INF) &#123;</span><br><span class="line">            x = y = left = right = up = down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == y2) &#123;</span><br><span class="line">                    change(x, y, <span class="string">'W'</span>);</span><br><span class="line">                    left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                    right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                    up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                    down = <span class="built_in">min</span>(down, y);</span><br><span class="line">                &#125;</span><br><span class="line">                change(x, y, s[i]);</span><br><span class="line">                left = <span class="built_in">min</span>(left, x);</span><br><span class="line">                right = <span class="built_in">max</span>(right, x);</span><br><span class="line">                up = <span class="built_in">max</span>(up, y);</span><br><span class="line">                down = <span class="built_in">min</span>(down, y);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="number">1l</span>l * (up - down + <span class="number">1</span>) * (right - left + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Print-a-1337-string…"><a href="#D-Print-a-1337-string…" class="headerlink" title="D. Print a 1337-string…"></a>D. Print a 1337-string…</h2><p>题意：构造一个长度不大于$1e5$的字符串，使得$1337$子串出现次数为$n$</p>
<p>思路：在字符串末尾放一个$7$，那么$1337$出现次数为每个$1$到$7$的$3$的个数$x$,贡献为$\frac{x(x-1)}{2}$，同时$n$可以分解为若干个$\frac{x(x-1)}{2}$的累加，构造即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000010</span></span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (x - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100000</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            ll C = calc(i);</span><br><span class="line">            <span class="keyword">if</span> (C == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (n &gt;= C) &#123;</span><br><span class="line">                n -= C;</span><br><span class="line">                cnt[++cnt[<span class="number">0</span>]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str[<span class="number">1</span>] = <span class="string">'7'</span>;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>, c1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = c1; j &lt; cnt[i]; ++j) &#123;</span><br><span class="line">                str[++pos] = <span class="string">'3'</span>;</span><br><span class="line">                ++c1;</span><br><span class="line">            &#125;</span><br><span class="line">            str[++pos] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(str + <span class="number">1</span>, str + <span class="number">1</span> + pos);</span><br><span class="line">        str[++pos] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">puts</span>(str + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-You-Are-Given-Some-Strings…"><a href="#E-You-Are-Given-Some-Strings…" class="headerlink" title="E.You Are Given Some Strings…"></a>E.You Are Given Some Strings…</h2><p>题意：定义$f(t,s)$表示字符串$s$在$t$中出现的次数，现在给定一个$t$以及$n$个$s$，问$\sum<em>{i=1}^{n}\sum</em>{j=1}^{n}f(t, s_i+s_j)$。</p>
<p>思路：单独考虑每个$s<em>i$的贡献，那么如果$s_i$出现的末尾位置是$L_i$，那么他能和出现的初始位置为$L_i+1$的每个$j$产生一个贡献。我们用$L_i$表示在$s$中末尾位置在$t$字符串的$i$位置出现字符串个数，$R_i$表示$s$中起始位置在$t$字符串的$i$位置出现的字符串个数，那么答案就是$\sum</em>{i=1}^{len-1}L_i\cdot R_i+1$其中$len$表示$t$的长度。对于$L,R$可以用$ac$自动机处理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt[<span class="number">26</span>], fail, cnt;</span><br><span class="line"></span><br><span class="line">        node() &#123;</span><br><span class="line">            <span class="built_in">memset</span>(nxt, <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt);</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; t[N];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> root, L;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t[++L] = node();</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        L = <span class="number">0</span>;</span><br><span class="line">        root = newnode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[now].nxt[i - <span class="string">'a'</span>] == <span class="number">-1</span>)</span><br><span class="line">                t[now].nxt[i - <span class="string">'a'</span>] = newnode();</span><br><span class="line">            now = t[now].nxt[i - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++t[now].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        t[root].fail = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[root].nxt[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                t[root].nxt[i] = root;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t[t[root].nxt[i]].fail = root;</span><br><span class="line">                q.push(t[root].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            t[now].cnt += t[t[now].fail].cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[now].nxt[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    t[now].nxt[i] = t[t[now].fail].nxt[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t[t[now].nxt[i]].fail = t[t[now].fail].nxt[i];</span><br><span class="line">                    q.push(t[now].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s, ll *a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = s.length(); i &lt; len; ++i) &#123;</span><br><span class="line">            now = t[now].nxt[s[i] - <span class="string">'a'</span>];</span><br><span class="line">            a[i] = t[now].cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; t[i].cnt &lt;&lt; <span class="string">" \n"</span>[i == L];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; trie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s[N], t, tr;</span><br><span class="line">ll L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; t) &#123;</span><br><span class="line">        tr = t;</span><br><span class="line">        reverse(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">memset</span>(L, <span class="number">0</span>, <span class="keyword">sizeof</span> L);</span><br><span class="line">        <span class="built_in">memset</span>(R, <span class="number">0</span>, <span class="keyword">sizeof</span> R);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        trie.Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            trie.insert(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        trie.build();</span><br><span class="line">        trie.query(t, L);;</span><br><span class="line"></span><br><span class="line">        trie.Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            reverse(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">            trie.insert(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        trie.build();</span><br><span class="line">        trie.query(tr, R);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> len = t.length();</span><br><span class="line">        reverse(R, R + len);</span><br><span class="line">    </span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            ans += L[i] * R[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第七场）</title>
    <url>/2019/08/08/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-String"><a href="#A-String" class="headerlink" title="A. String"></a>A. String</h2><p>题意：定义一个$prefect \; string$表示它是循环字符串中字典序最小的，问将一个字符串分解成若干个$prefect \; string$。</p>
<p>思路：暴力</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 210</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minRep</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len &amp;&amp; j &lt; len &amp;&amp; k &lt; len) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = s[(i + k) % len] - s[(j + k) % len];</span><br><span class="line">        <span class="keyword">if</span> (!t) ++k;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">0</span>) i += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>) j += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j) j = i + <span class="number">1</span>;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//  printf("%d %d %d\n", i, j, k);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> t = s;</span><br><span class="line">    s += t;</span><br><span class="line">    <span class="keyword">if</span> (minRep(s) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">string</span> t = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ok(s)) &#123;</span><br><span class="line">            res.push_back(s);</span><br><span class="line">            reverse(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">            solve(t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t += s[i - <span class="number">1</span>];</span><br><span class="line">            s.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        solve(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, sze = (<span class="keyword">int</span>)res.<span class="built_in">size</span>(); i &lt; sze; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">" \n"</span>[i == sze - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Irreducible-Polynomial"><a href="#B-Irreducible-Polynomial" class="headerlink" title="B. Irreducible Polynomial"></a>B. Irreducible Polynomial</h2><p>题意：判断一个多项式能否被分解</p>
<p>思路：对于$3$阶以及以上的多项式一定能被分解，剩下的只需要判断$0,1,2$多项式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            ll A = a[<span class="number">2</span>], B = a[<span class="number">1</span>], C = a[<span class="number">0</span>];</span><br><span class="line">            ll d = B * B - <span class="number">4</span> * A * C;</span><br><span class="line">            <span class="keyword">if</span> (d &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Governing-sand"><a href="#C-Governing-sand" class="headerlink" title="C. Governing sand"></a>C. Governing sand</h2><p>题意：有$n$种树，每种树具有$H_i, P_i,C_i$，分别表示高度，数量，砍掉的代价，问砍掉最小代价的树，使得剩下的最高的树的个数大于一半。</p>
<p>思路：枚举高度，权值线段树上二分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n; ll tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cnt = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; a[++cnt] = x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt);</span><br><span class="line">        cnt = unique(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt) - a - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lower_bound(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt, x) - a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;hs;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> h, c, p;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;h, &amp;c, &amp;p);</span><br><span class="line">        hs.add(h);     </span><br><span class="line">        tot += p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;node&gt;&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        ll sum, num, base;</span><br><span class="line">        node() &#123;</span><br><span class="line">            sum = num = base = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">            num += x;</span><br><span class="line">            sum += base * x;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.sum = sum + other.sum;</span><br><span class="line">            res.num = num + other.num;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[<span class="number">10010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].base = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].add(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos, x);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, x);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> k * t[id].base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t[id &lt;&lt; <span class="number">1</span>].num &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span>, l, mid, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id &lt;&lt; <span class="number">1</span>].sum + query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, k - t[id &lt;&lt; <span class="number">1</span>].num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        hs.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].scan();</span><br><span class="line">        hs.work();</span><br><span class="line">        vec.<span class="built_in">clear</span>(); vec.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vec[hs.<span class="built_in">get</span>(a[i].h)].push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">200</span>;</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">        ll fee = <span class="number">0</span>, res = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            seg.update(<span class="number">1</span>, <span class="number">1</span>, m, a[i].c, a[i].p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = hs.cnt; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            ll tmp = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec[i]) &#123;</span><br><span class="line">                now += it.p;</span><br><span class="line">                tmp += <span class="number">1l</span>l * it.c * it.p;</span><br><span class="line">                seg.update(<span class="number">1</span>, <span class="number">1</span>, m, it.c, -it.p);  </span><br><span class="line">            &#125;</span><br><span class="line">            tot -= now;</span><br><span class="line">            res = <span class="built_in">min</span>(res, fee + seg.query(<span class="number">1</span>, <span class="number">1</span>, m, tot - now + <span class="number">1</span>));</span><br><span class="line">            fee += tmp;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Number"><a href="#D-Number" class="headerlink" title="D. Number"></a>D. Number</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ++res;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;p) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(p) &gt; n) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"T_T"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> need = n - f(p);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, p);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= need; ++i) <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Find-the-median"><a href="#E-Find-the-median" class="headerlink" title="E. Find the median"></a>E. Find the median</h2><p>题意：每次插入一个$[L_i, R_i]$范围内的所有数，问中位数</p>
<p>思路：线段树维护区间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cnt = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; a[++cnt] = x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt);</span><br><span class="line">        cnt = unique(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt) - a - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> lower_bound(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt, x) - a; &#125;</span><br><span class="line">&#125;hs;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll A[<span class="number">2</span>], B[<span class="number">2</span>], C[<span class="number">2</span>], M[<span class="number">2</span>];</span><br><span class="line">ll L[N], R[N], X[N], Y[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> base;</span><br><span class="line">        <span class="comment">//0表示左端点　1表示右端点</span></span><br><span class="line">        <span class="keyword">int</span> num[<span class="number">2</span>];</span><br><span class="line">        ll sum[<span class="number">2</span>];</span><br><span class="line">        node() &#123;</span><br><span class="line">            num[<span class="number">0</span>] = num[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sum[<span class="number">0</span>] = sum[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">            num[f] += x;</span><br><span class="line">            sum[f] += <span class="number">1l</span>l * x * base;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">                res.num[i] = num[i] + other.num[i];</span><br><span class="line">                res.sum[i] = sum[i] + other.sum[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N &lt;&lt; <span class="number">3</span>], base;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].base = hs.a[l] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].add(x, f);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos, x, f);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, x, f);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll k, node left)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      printf("## %d %d %lld\n", l, r, k)  ;</span></span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> hs.a[l]; </span><br><span class="line">        node tmp = left + t[id &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ll pl = hs.a[mid];</span><br><span class="line">        ll pr = hs.a[mid + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        ll resl = <span class="number">1l</span>l * pl * tmp.num[<span class="number">0</span>] - tmp.sum[<span class="number">0</span>] - (<span class="number">1l</span>l * pl * tmp.num[<span class="number">1</span>] - tmp.sum[<span class="number">1</span>] - tmp.num[<span class="number">1</span>]);</span><br><span class="line">        ll resr = <span class="number">1l</span>l * pr * tmp.num[<span class="number">0</span>] - tmp.sum[<span class="number">0</span>] - (<span class="number">1l</span>l * pr * tmp.num[<span class="number">1</span>] - tmp.sum[<span class="number">1</span>] - tmp.num[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (resl &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span>, l, mid, k, left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resr &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, k, tmp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ql = pl, qr = pr, res = pr;</span><br><span class="line">            <span class="keyword">while</span> (qr - ql &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (ql + qr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                ll tot = <span class="number">1l</span>l * mid * tmp.num[<span class="number">0</span>] - tmp.sum[<span class="number">0</span>] - (<span class="number">1l</span>l * mid * tmp.num[<span class="number">1</span>] - tmp.sum[<span class="number">1</span>] - tmp.num[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (tot &gt;= k) &#123;</span><br><span class="line">                    res = mid;</span><br><span class="line">                    qr = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ql = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>, X + <span class="number">1</span>, X + <span class="number">2</span>, A, B, C, M);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>, Y + <span class="number">1</span>, Y + <span class="number">2</span>, A + <span class="number">1</span>, B + <span class="number">1</span>, C + <span class="number">1</span>, M + <span class="number">1</span>);</span><br><span class="line">        hs.init();</span><br><span class="line">        L[<span class="number">1</span>] = X[<span class="number">1</span>] + <span class="number">1</span>; R[<span class="number">1</span>] = Y[<span class="number">1</span>] + <span class="number">1</span>; <span class="keyword">if</span> (L[<span class="number">1</span>] &gt; R[<span class="number">1</span>]) swap(L[<span class="number">1</span>], R[<span class="number">1</span>]); hs.add(L[<span class="number">1</span>]); hs.add(R[<span class="number">1</span>]);</span><br><span class="line">        L[<span class="number">2</span>] = X[<span class="number">2</span>] + <span class="number">1</span>; R[<span class="number">2</span>] = Y[<span class="number">2</span>] + <span class="number">1</span>; <span class="keyword">if</span> (L[<span class="number">2</span>] &gt; R[<span class="number">2</span>]) swap(L[<span class="number">2</span>], R[<span class="number">2</span>]); hs.add(L[<span class="number">2</span>]); hs.add(R[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            X[i] = (A[<span class="number">0</span>] * X[i - <span class="number">1</span>] % M[<span class="number">0</span>] + B[<span class="number">0</span>] * X[i - <span class="number">2</span>] % M[<span class="number">0</span>] + C[<span class="number">0</span>] + M[<span class="number">0</span>]) % M[<span class="number">0</span>];</span><br><span class="line">            Y[i] = (A[<span class="number">1</span>] * Y[i - <span class="number">1</span>] % M[<span class="number">1</span>] + B[<span class="number">1</span>] * Y[i - <span class="number">2</span>] % M[<span class="number">1</span>] + C[<span class="number">1</span>] + M[<span class="number">1</span>]) % M[<span class="number">1</span>];</span><br><span class="line">            L[i] = X[i] + <span class="number">1</span>;</span><br><span class="line">            R[i] = Y[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[i] &gt; R[i]) swap(L[i], R[i]);</span><br><span class="line">            hs.add(L[i]); hs.add(R[i]);    </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//  for (int i = 1; i &lt;= n; ++i) printf("%lld %lld\n", L[i], R[i]); </span></span><br><span class="line">        hs.work();</span><br><span class="line">        m = hs.cnt;</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">        ll tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            seg.update(<span class="number">1</span>, <span class="number">1</span>, m, hs.<span class="built_in">get</span>(L[i]), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            seg.update(<span class="number">1</span>, <span class="number">1</span>, m, hs.<span class="built_in">get</span>(R[i]), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            tot += R[i] - L[i] + <span class="number">1</span>;</span><br><span class="line">            seg.base = SEG::node();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, seg.query(<span class="number">1</span>, <span class="number">1</span>, m, (tot + <span class="number">1</span>) / <span class="number">2</span>, seg.base));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Energy-stones"><a href="#F-Energy-stones" class="headerlink" title="F. Energy stones"></a>F. Energy stones</h2><p>题意：有$n$堆能量石，每个能量石具有$E_i，L_i,C_i$，其中$E_i$表示能量石初始能量，$L_i$表示能量增长速度，$C_i$表示能量上限，CNZ有$m$次进食，每次在$t_i$吃掉区间$[S_i, T_i]$范围内的能量石，问最后吃了多少能量。</p>
<p>思路：用$set$维护时间线表示当前石头$i$被吃的时间节点，然后用一颗线段树动态维护时间长度的数量，对于时间长度大于$\lceil \frac{C_i}{L_i}\rceil$的时间收益为$C_i$，剩下的就是长度乘上$L_i$，然后动态维护时间线即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> e, l, c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;e, &amp;l, &amp;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; add, del;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        ll sum, num;</span><br><span class="line">        <span class="keyword">int</span> base;</span><br><span class="line"></span><br><span class="line">        node() &#123;</span><br><span class="line">            sum = num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">            sum += x * base;</span><br><span class="line">            num += x;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        node <span class="keyword">operator</span>+(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.sum = sum + other.sum;</span><br><span class="line">            res.num = num + other.num;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; t[N &lt;&lt; <span class="number">2</span>], res;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].base = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].add(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos, x);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, x);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            res = res + t[id];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, kase);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        add.<span class="built_in">clear</span>();</span><br><span class="line">        del.<span class="built_in">clear</span>();</span><br><span class="line">        add.resize(n + <span class="number">10</span>);</span><br><span class="line">        del.resize(n + <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].scan();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, S, T1, t; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t, &amp;S, &amp;T1);</span><br><span class="line">            add[S].push_back(t);</span><br><span class="line">            del[T1 + <span class="number">1</span>].push_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">200000</span>;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">        <span class="keyword">int</span> Fi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : add[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (se.empty()) &#123;</span><br><span class="line">                    se.insert(it);</span><br><span class="line">                    Fi = it;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pos = se.lower_bound(it);</span><br><span class="line">                    <span class="keyword">if</span> (pos == se.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">                        Fi = it;</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *se.<span class="built_in">begin</span>() - it, <span class="number">1</span>);</span><br><span class="line">                        se.insert(it);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == se.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        --pos;</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, it - *pos, <span class="number">1</span>);</span><br><span class="line">                        se.insert(it);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">auto</span> pos2 = pos;</span><br><span class="line">                        --pos2;</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, it - *pos2, <span class="number">1</span>);</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *pos - it, <span class="number">1</span>);</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *pos - *pos2, <span class="number">-1</span>);</span><br><span class="line">                        se.insert(it);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : del[i]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> pos = se.lower_bound(it);</span><br><span class="line">                <span class="keyword">auto</span> nx = pos;</span><br><span class="line">                ++nx;</span><br><span class="line">                <span class="keyword">if</span> (pos == se.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nx == se.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        Fi = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Fi = *nx;</span><br><span class="line">                        seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *nx - *pos, <span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    se.erase(pos);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nx == se.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pre = pos;</span><br><span class="line">                    --pre;</span><br><span class="line">                    seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *pos - *pre, <span class="number">-1</span>);</span><br><span class="line">                    se.erase(pos);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pre = pos;</span><br><span class="line">                    --pre;</span><br><span class="line">                    seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *pos - *pre, <span class="number">-1</span>);</span><br><span class="line">                    seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *nx - *pos, <span class="number">-1</span>);</span><br><span class="line">                    seg.update(<span class="number">1</span>, <span class="number">1</span>, m, *nx - *pre, <span class="number">1</span>);</span><br><span class="line">                    se.erase(pos);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Fi == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            res += <span class="built_in">min</span>(<span class="number">1l</span>l * a[i].e + <span class="number">1l</span>l * a[i].l * Fi, <span class="number">1l</span>l * a[i].c);</span><br><span class="line">            <span class="keyword">if</span> (a[i].l == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((a[i].c + a[i].l - <span class="number">1</span>) / a[i].l);</span><br><span class="line">            seg.res = SEG::node();</span><br><span class="line">            <span class="comment">//大于等于t的</span></span><br><span class="line">            seg.query(<span class="number">1</span>, <span class="number">1</span>, m, t, m);</span><br><span class="line">            res += <span class="number">1l</span>l * a[i].c * seg.res.num;</span><br><span class="line">            <span class="comment">//小于t的</span></span><br><span class="line">            seg.res = SEG::node();</span><br><span class="line">            seg.query(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, t - <span class="number">1</span>);</span><br><span class="line">            res += <span class="number">1l</span>l * seg.res.sum * a[i].l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Pair"><a href="#H-Pair" class="headerlink" title="H. Pair"></a>H. Pair</h2><p>题意：问有多少对$<x, y>$其中满足$1\leq x \leq A, 1\leq y \leq B$，满足以下任意条件</p>
<ul>
<li>$x \&amp; y&gt; C $</li>
<li>$x \oplus y &lt; C$</li>
</ul>
<p>思路：经典的数位$dp$, $dp[pos][f1][f2][l1][l2][one1][one2]$,其中$pos$表示枚举到哪一位，$f1$表示$x\&amp; y$和$C$的关系，$f2$表示$x\oplus y$和$C$的关系,，$l1,l2$表示是否达到上届，$one1, one2$表示是否有$1$，所以跑得飞快</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line">ll A, B, C;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">ll dp[N][<span class="number">3</span>][<span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//位置 x&amp;y x^y (=0 &lt;1 &gt;2)</span></span><br><span class="line"><span class="function">ll <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> flag1, <span class="keyword">int</span> flag2, <span class="keyword">int</span> limit1, <span class="keyword">int</span> limit2, <span class="keyword">int</span> one1, <span class="keyword">int</span> one2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span> &amp;&amp; (flag1 == <span class="number">2</span> || flag2 == <span class="number">1</span>) &amp;&amp; one1 == <span class="number">1</span> &amp;&amp; one2 == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1l</span>l;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0l</span>l;</span><br><span class="line">    &#125;</span><br><span class="line">    ll &amp;res = dp[pos][flag1][flag2][limit1][limit2][one1][one2];</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag1 == <span class="number">1</span> &amp;&amp; flag2 == <span class="number">2</span>) &#123;<span class="comment">//x&amp;y&lt;C x^y&gt;C 不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0l</span>l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l1 = limit1 ? a[pos] : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l2 = limit2 ? b[pos] : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= l1; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= l2; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i &amp; j;</span><br><span class="line">            <span class="keyword">int</span> y = i ^j;</span><br><span class="line">            <span class="keyword">int</span> f1 = flag1;</span><br><span class="line">            <span class="keyword">if</span> (f1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &gt; c[pos]) &#123;</span><br><span class="line">                    f1 = <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == c[pos]) &#123;</span><br><span class="line">                    f1 = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    f1 = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> f2 = flag2;</span><br><span class="line">            <span class="keyword">if</span> (f2 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y &gt; c[pos]) &#123;</span><br><span class="line">                    f2 = <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == c[pos]) &#123;</span><br><span class="line">                    f2 = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    f2 = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += DFS(pos - <span class="number">1</span>, f1, f2, limit1 &amp;&amp; (i == a[pos]),</span><br><span class="line">                       limit2 &amp;&amp; (j == b[pos]), one1 | i, one2 | j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;A, &amp;B, &amp;C);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A &amp; (<span class="number">1l</span>l &lt;&lt; i)) &#123;</span><br><span class="line">                a[i] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (B &amp; (<span class="number">1l</span>l &lt;&lt; i)) &#123;</span><br><span class="line">                b[i] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (C &amp; (<span class="number">1l</span>l &lt;&lt; i)) &#123;</span><br><span class="line">                c[i] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, DFS(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-A-B-problem"><a href="#J-A-B-problem" class="headerlink" title="J. A+B problem"></a>J. A+B problem</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll A, B;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        vec.push_back(x % <span class="number">10</span>);</span><br><span class="line">        x /= <span class="number">10</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec) res = res * <span class="number">10</span> + it;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;A, &amp;B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f(f(A) + f(B)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后记：最近咋回事？本队任督二脉打开了(x</p>
]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-University-Training-Contest-6</title>
    <url>/2019/08/08/Multi-University-Training-Contest-6/</url>
    <content><![CDATA[<h2 id="B-Nonsense-Time"><a href="#B-Nonsense-Time" class="headerlink" title="B. Nonsense Time"></a>B. Nonsense Time</h2><p>题意：给定一个序列，刚开始都是冻结状态，每次加入一个数后问$LIS$长度，数据随机</p>
<p>思路：由于数据随机，所以$LIS$长度的期望是$\sqrt{n}$，那么倒过来做，如果删除的数在$LIS$中，则暴力重构$LIS$，最多进行$\sqrt{n}$次，复杂度为$O(\sqrt{n} \cdot n \cdot log_2n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], ans[N], pre[N], nxt[N], used[N], <span class="built_in">bit</span>[N], f[N], g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nxt[<span class="number">0</span>]; i &lt;= n + <span class="number">1</span>; i = nxt[i]) &#123;</span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j; j -= j &amp; -j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[Max] &lt; f[<span class="built_in">bit</span>[j]]) &#123;</span><br><span class="line">                Max = <span class="built_in">bit</span>[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] = f[Max] + <span class="number">1</span>;</span><br><span class="line">        g[i] = Max;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt;= n + <span class="number">2</span>; j += j &amp; -j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[<span class="built_in">bit</span>[j]] &lt; f[i]) &#123;</span><br><span class="line">                <span class="built_in">bit</span>[j] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nxt[<span class="number">0</span>]; i &lt;= n + <span class="number">1</span>; i = nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt;= n + <span class="number">2</span>; j += j &amp; -j) &#123;</span><br><span class="line">            <span class="built_in">bit</span>[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i; i = g[i]) &#123;</span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">            a[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>, a[n + <span class="number">1</span>] = n + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            pre[i] = i - <span class="number">1</span>;</span><br><span class="line">            nxt[i] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">bit</span>[i] = used[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">bit</span>[n + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            ans[i] = f[n + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> p = b[i];</span><br><span class="line">            pre[nxt[p]] = pre[p];</span><br><span class="line">            nxt[pre[p]] = nxt[p];</span><br><span class="line">            <span class="keyword">if</span> (used[p]) &#123;</span><br><span class="line">                solve();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Snowy-Smile"><a href="#E-Snowy-Smile" class="headerlink" title="E. Snowy Smile"></a>E. Snowy Smile</h2><p>题意：给出$n$个点的坐标和权值，问最大子矩阵和。</p>
<p>思路：离散化后为$n\cdot n$的矩形，由于只有$2000$个点，所以枚举上边界，拓展下边界，用线段树维护最大子段和。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pii&gt;&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N], cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt);</span><br><span class="line">        cnt = unique(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt) - a - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lower_bound(a + <span class="number">1</span>, a + <span class="number">1</span> + cnt, x) - a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; hx, hy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">        hx.add(x);</span><br><span class="line">        hy.add(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="comment">//0表示前缀最大  1表示后缀最大 2表示区间最大和 sum表示区间和</span></span><br><span class="line">        ll Max[<span class="number">3</span>], sum;</span><br><span class="line"></span><br><span class="line">        node() &#123;</span><br><span class="line">            Max[<span class="number">0</span>] = Max[<span class="number">1</span>] = Max[<span class="number">2</span>] = sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll w)</span> </span>&#123;</span><br><span class="line">            sum += w;</span><br><span class="line">            Max[<span class="number">0</span>] = Max[<span class="number">1</span>] = Max[<span class="number">2</span>] = <span class="built_in">max</span>(<span class="number">0l</span>l, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        node <span class="keyword">operator</span>+(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.Max[<span class="number">0</span>] = <span class="built_in">max</span>(Max[<span class="number">0</span>], sum + other.Max[<span class="number">0</span>]);</span><br><span class="line">            res.Max[<span class="number">1</span>] = <span class="built_in">max</span>(other.Max[<span class="number">1</span>], Max[<span class="number">1</span>] + other.sum);</span><br><span class="line">            res.Max[<span class="number">2</span>] = <span class="built_in">max</span>(Max[<span class="number">2</span>], other.Max[<span class="number">2</span>]);</span><br><span class="line">            res.Max[<span class="number">2</span>] = <span class="built_in">max</span>(res.Max[<span class="number">2</span>], Max[<span class="number">1</span>] + other.Max[<span class="number">0</span>]);</span><br><span class="line">            res.sum = sum + other.sum;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].add(w);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos, w);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, w);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        hx.init();</span><br><span class="line">        hy.init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].scan();</span><br><span class="line">        hx.work();</span><br><span class="line">        hy.work();</span><br><span class="line">        vec.<span class="built_in">clear</span>();</span><br><span class="line">        vec.resize(hx.cnt + <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vec[hx.<span class="built_in">get</span>(a[i].x)].push_back(pii(hy.<span class="built_in">get</span>(a[i].y), a[i].w));</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= hx.cnt; ++i) &#123;</span><br><span class="line">            seg.build(<span class="number">1</span>, <span class="number">1</span>, hy.cnt);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= hx.cnt; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> it : vec[j]) &#123;</span><br><span class="line">                    seg.update(<span class="number">1</span>, <span class="number">1</span>, hy.cnt, it.fi, it.se);</span><br><span class="line">                &#125;</span><br><span class="line">                res = <span class="built_in">max</span>(res, seg.t[<span class="number">1</span>].Max[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Faraway"><a href="#F-Faraway" class="headerlink" title="F. Faraway"></a>F. Faraway</h2><p>题意：有$n$个士兵以及一个$target$，$target$对于每个士兵满足$(\vert x_i-x_e\vert + \vert y_i- y_e\vert) mod \; k_i=t_i$，问方案数。</p>
<p>思路：对于每个士兵，合法的$target$是以菱形扩散的，每个士兵可以将图划分为四个部分，每个部分都是不断循环的。那么$n$个士兵将图划分为$(n+1)\cdot (n+1)$个部分，对于每个部分都是一个以$lcm\cdot lcm$的小矩阵不断填充的大矩阵，分别做即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCM</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b / __gcd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, k, t;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _k, <span class="keyword">int</span> <span class="keyword">_t</span>) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">        k = _k;</span><br><span class="line">        t = <span class="keyword">_t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x, &amp;y, &amp;k, &amp;t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">clac</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">abs</span>(x - _x) + <span class="built_in">abs</span>(y - _y)) % k == t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> lcm;</span><br><span class="line"><span class="keyword">int</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> X[N], Y[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy, <span class="keyword">int</span> ex, <span class="keyword">int</span> ey, <span class="keyword">int</span> up = <span class="number">0</span>, <span class="keyword">int</span> right = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lcm; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lcm; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">1</span>; o &lt;= n; ++o) &#123;</span><br><span class="line">                cnt += a[o].clac(sx + i, sy + j);</span><br><span class="line">            &#125;</span><br><span class="line">            mp[i][j] = (cnt == n);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mp[i][j] += mp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mp[i][j] += mp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mp[i][j] -= mp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll dx = ex - sx + right, dy = ey - sy + up;</span><br><span class="line">    ll t1 = (dx - <span class="number">1</span>) / lcm, t2 = (dy - <span class="number">1</span>) / lcm;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    res += t1 * t2 * mp[lcm - <span class="number">1</span>][lcm - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> eey = dy - t2 * lcm;</span><br><span class="line">    res += mp[lcm - <span class="number">1</span>][eey - <span class="number">1</span>] * t1;</span><br><span class="line">    <span class="keyword">int</span> eex = dx - t1 * lcm;</span><br><span class="line">    res += mp[eex - <span class="number">1</span>][lcm - <span class="number">1</span>] * t2;</span><br><span class="line">    res += mp[eex - <span class="number">1</span>][eey - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        X[<span class="number">0</span>] = <span class="number">0</span>, Y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        X[++X[<span class="number">0</span>]] = <span class="number">0</span>, X[++X[<span class="number">0</span>]] = m;</span><br><span class="line">        Y[++Y[<span class="number">0</span>]] = <span class="number">0</span>, Y[++Y[<span class="number">0</span>]] = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i].input();</span><br><span class="line">            X[++X[<span class="number">0</span>]] = a[i].x;</span><br><span class="line">            Y[++Y[<span class="number">0</span>]] = a[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        lcm = a[<span class="number">1</span>].k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            lcm = LCM(lcm, a[i].k);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X + <span class="number">1</span>, X + <span class="number">1</span> + X[<span class="number">0</span>]);</span><br><span class="line">        sort(Y + <span class="number">1</span>, Y + <span class="number">1</span> + Y[<span class="number">0</span>]);</span><br><span class="line">        X[<span class="number">0</span>] = unique(X + <span class="number">1</span>, X + <span class="number">1</span> + X[<span class="number">0</span>]) - X - <span class="number">1</span>;</span><br><span class="line">        Y[<span class="number">0</span>] = unique(Y + <span class="number">1</span>, Y + <span class="number">1</span> + Y[<span class="number">0</span>]) - Y - <span class="number">1</span>;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; X[<span class="number">0</span>]; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; Y[<span class="number">0</span>]; ++j) &#123;</span><br><span class="line">                ans += solve(X[i], Y[j], X[i + <span class="number">1</span>], Y[j + <span class="number">1</span>], j == Y[<span class="number">0</span>] - <span class="number">1</span>, i == X[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-TDL"><a href="#H-TDL" class="headerlink" title="H. TDL"></a>H. TDL</h2><p>题意：$f(n, m)$表示第$m$个和$n$互质的数$x(x&gt;n)$，现在给定$m, k$，问最小的$n$满足$(f(n, m) - n)\oplus n=k$</p>
<p>思路：$f(n-m)-n$表示的是第$m$个与$n$互质的数，那么枚举$f(n-m)-n$，可以通过$f(n, m)-n=n\oplus k$得到$n$，暴力$check$即可。</p>
<pre><code class="lang-C++">
#include &lt;bits/stdc++.h&gt;

using namespace std;

#define ll long long
#define INFLL 0x3f3f3f3f3f3f3f3f

ll gcd(ll a, ll b) {
    return b ? gcd(b, a % b) : a;
}

ll k;
int m;

int main() {
    int T;
    scanf(&quot;%d&quot;, &amp;T);
    while (T--) {
        scanf(&quot;%lld%d&quot;, &amp;k, &amp;m);
        ll res = INFLL;
        for (int i = 1; i &lt;= 800; ++i) {
            ll n = k ^i;
            if (__gcd(1ll * i, n) != 1) continue;
            int cur = 0;
            for (int j = 1; j &lt;= i; ++j) {
                cur += (__gcd(j + n, n) == 1);
                if (cur &gt; m) break;
            }
            if (cur == m) {
                res = min(res, n);
            }
        }
        if (res == INFLL) res = -1;
        printf(&quot;%lld\n&quot;, res);
    }
</code></pre>
<h2 id="L-Stay-Real"><a href="#L-Stay-Real" class="headerlink" title="L. Stay Real"></a>L. Stay Real</h2><p>题意：给出一个小根堆，两个人轮流取，只能取没有儿子节点的点，两人都想最大化收益，问最终收益。</p>
<p>思路：由于是小根堆，所以儿子节点权值大于父亲节点，贪心即可。</p>
<pre><code class="lang-C++">
#include &lt;bits/stdc++.h&gt;

using namespace std;

#define ll long long
#define N 200100
#define pii pair &lt;int, int&gt;
#define fi first
#define se second
int n, a[N];
int vis[N];

int main() {
    int T;
    scanf(&quot;%d&quot;, &amp;T);
    while (T--) {
        scanf(&quot;%d&quot;, &amp;n);
        for (int i = 1; i &lt;= n * 2 + 10; ++i) vis[i] = 0;
        for (int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;, a + i), vis[i] = 1;
        ll res[2] = {0, 0};
        priority_queue&lt;pii &gt; pq;
        for (int i = n; i &gt;= 1; --i) {
            if (vis[n * 2] == 0 &amp;&amp; vis[n * 2 + 1] == 0) {
                pq.emplace(a[i], i);
            }
        }
        int turn = 0;
        while (!pq.empty()) {
            pii it = pq.top();
            pq.pop();
            if (vis[it.se] == 0) continue;
            res[turn] += it.fi;
            turn ^= 1;
            vis[it.se] = 0;
            int fa = it.se / 2;
            if (fa &amp;&amp; vis[fa * 2] == 0 &amp;&amp; vis[fa * 2 + 1] == 0) {
                pq.push(pii(a[fa], fa));
            }
        }
        printf(&quot;%lld %lld\n&quot;, res[0], res[1]);
    }
</code></pre>
]]></content>
      <tags>
        <tag>HDU多校</tag>
      </tags>
  </entry>
  <entry>
    <title>支配树</title>
    <url>/2019/08/07/%E6%94%AF%E9%85%8D%E6%A0%91/</url>
    <content><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><h2 id="1-1-DAG上的支配树"><a href="#1-1-DAG上的支配树" class="headerlink" title="1.1 DAG上的支配树"></a>1.1 DAG上的支配树</h2><p>作用：给定一个$DAG$，询问从起点到终点必经的点，即去掉这个点以及与这个点相连的边，无法到达终点(无向图概念中的割点)，可以建立支配树来求解</p>
<p>结构：树形结构，将图的起点作为根节点，每个节点都是到达根节点的必经点。</p>
<p>建图：</p>
<ul>
<li>点$u$的在支配树上的父亲是所有能走到点$u$在支配树上的$LCA$，于是可以通过$O(nlogn)$复杂度通过倍增实现。</li>
<li>具体来说，通过拓扑排序得到拓扑序，对于每个点根据反向边的$LCA$得到该点的父亲，从而建立$DAG$上的支配树</li>
</ul>
<h2 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h2><h3 id="2-1-BZOJ-2815-ZJOI2012-灾难"><a href="#2-1-BZOJ-2815-ZJOI2012-灾难" class="headerlink" title="2.1 BZOJ-2815-[ZJOI2012]灾难"></a>2.1 BZOJ-2815-[ZJOI2012]灾难</h3><p>模板题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEG 20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line"></span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt) &#123;</span><br><span class="line">            to = _to;</span><br><span class="line">            nxt = _nxt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; edge[N];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> head[N], tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u]);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G[<span class="number">2</span>], zp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> fa[N][DEG], dep[N], du[N], sze[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dep[u] &gt; dep[v]) &#123;</span><br><span class="line">            swap(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> det = dep[v] - dep[u], i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (det &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                v = fa[v][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[u][i] == fa[v][i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">            v = fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        sze[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = zp.head[u]; ~i; i = zp.edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = zp.edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (sze[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                DFS(v);</span><br><span class="line">            &#125;</span><br><span class="line">            sze[u] += sze[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (du[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            Q.push_back(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = G[<span class="number">0</span>].head[u]; ~i; i = G[<span class="number">0</span>].edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = G[<span class="number">0</span>].edge[i].to;</span><br><span class="line">                --du[v];</span><br><span class="line">                <span class="keyword">if</span> (du[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = Q.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q[i];</span><br><span class="line">            <span class="keyword">int</span> root = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = G[<span class="number">1</span>].head[u]; ~j; j = G[<span class="number">1</span>].edge[j].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = G[<span class="number">1</span>].edge[j].to;</span><br><span class="line">                root = LCA(root, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="number">-1</span>) &#123;</span><br><span class="line">                root = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            zp.addedge(root, u);</span><br><span class="line">            fa[u][<span class="number">0</span>] = root;</span><br><span class="line">            dep[u] = dep[root] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; DEG; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fa[u][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    fa[u][j] = fa[fa[u][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    G[<span class="number">0</span>].Init(), G[<span class="number">1</span>].Init(), zp.Init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x) &amp;&amp; x) &#123;</span><br><span class="line">            G[<span class="number">0</span>].addedge(x, i);</span><br><span class="line">            G[<span class="number">1</span>].addedge(i, x);</span><br><span class="line">            du[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tree.solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sze[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-计算几何(基础)</title>
    <url>/2019/08/06/ACM-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95(%E5%9F%BA%E7%A1%80)/</url>
    <content><![CDATA[<h2 id="1-准备知识"><a href="#1-准备知识" class="headerlink" title="1.准备知识"></a>1.准备知识</h2><h3 id="1-1-起手式"><a href="#1-1-起手式" class="headerlink" title="1.1 起手式"></a>1.1 起手式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> db PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db x = <span class="number">0.4999</span>;</span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">floor</span>(x);<span class="comment">//向下取整</span></span><br><span class="line">    <span class="keyword">int</span> cx = <span class="built_in">ceil</span>(x);<span class="comment">//向上取整</span></span><br><span class="line">    <span class="keyword">int</span> rx = round(x);<span class="comment">//四舍五入</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f %d %d %d\n"</span>, x, fx, cx, rx);</span><br><span class="line">    <span class="comment">//0.499900 0 1 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-点和向量"><a href="#2-点和向量" class="headerlink" title="2. 点和向量"></a>2. 点和向量</h2><h3 id="2-1-点和向量的定义"><a href="#2-1-点和向量的定义" class="headerlink" title="2.1 点和向量的定义"></a>2.1 点和向量的定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    db x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(db _x, db _y) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-相关运算"><a href="#2-2-相关运算" class="headerlink" title="2.2 相关运算"></a>2.2 相关运算</h3><h4 id="2-2-1-加法"><a href="#2-2-1-加法" class="headerlink" title="2.2.1 加法"></a>2.2.1 加法</h4><ul>
<li>点和向量相加得到另一个点</li>
<li>向量和向量相加得到另一个向量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-减法"><a href="#2-2-2-减法" class="headerlink" title="2.2.2 减法"></a>2.2.2 减法</h4><ul>
<li>两点差得到一个向量</li>
<li>$A-B$得到向量$\vec{BA}$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-3-乘法"><a href="#2-2-3-乘法" class="headerlink" title="2.2.3 乘法"></a>2.2.3 乘法</h4><ul>
<li>缩放</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>*(<span class="keyword">const</span> db &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x * other, y * other&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-4-除法"><a href="#2-2-4-除法" class="headerlink" title="2.2.4 除法"></a>2.2.4 除法</h4><ul>
<li>缩放</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>/(<span class="keyword">const</span> db &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x / other, y / other&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-5-点积"><a href="#2-2-5-点积" class="headerlink" title="2.2.5 点积"></a>2.2.5 点积</h4><p>$\alpha \cdot \beta  = \vert \alpha \vert  \cdot \vert \beta\vert  \cdot cos\theta$</p>
<p>几何意义</p>
<ul>
<li>若$\alpha$与$\beta$的夹角为锐角，则其点积为正</li>
<li>若$\alpha$与$\beta$的夹角为钝角，则其点积为负</li>
<li>若$\alpha$与$\beta$的夹角为支教，则其点积为0</li>
<li>向量$\alpha$在$\beta$上的投影长度和$\beta$的长度乘积</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">db <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * other.x + y * other.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-6-叉积"><a href="#2-2-6-叉积" class="headerlink" title="2.2.6 叉积"></a>2.2.6 叉积</h4><p>$\alpha \cdot \beta  = \vert \alpha\vert \cdot \vert \beta\vert  \cdot sin\theta$</p>
<p>几何意义：</p>
<ul>
<li>若$\beta$在$\alpha$的逆时针方向，叉积为正</li>
<li>若$\beta$在$\alpha$的顺时针方向，叉积为负</li>
<li>若$\beta$在$\alpha$平行，叉积为0</li>
<li>向量$\alpha$和向量$\beta$形成的平行四边形的<strong>有向</strong>面积</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">db <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-常用函数（成员函数）"><a href="#2-3-常用函数（成员函数）" class="headerlink" title="2.3 常用函数（成员函数）"></a>2.3 常用函数（成员函数）</h3><h4 id="2-3-1-两点距离"><a href="#2-3-1-两点距离" class="headerlink" title="2.3.1 两点距离"></a>2.3.1 两点距离</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">distance</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hypot(x - p.x, y - p.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-逆时针旋转90度"><a href="#2-3-2-逆时针旋转90度" class="headerlink" title="2.3.2 逆时针旋转90度"></a>2.3.2 逆时针旋转90度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">rotleft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;-y, x&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-3-顺时针旋转90度"><a href="#2-3-3-顺时针旋转90度" class="headerlink" title="2.3.3 顺时针旋转90度"></a>2.3.3 顺时针旋转90度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">roright</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;y, -x&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-4-绕着点P逆时针旋转angle"><a href="#2-3-4-绕着点P逆时针旋转angle" class="headerlink" title="2.3.4 绕着点P逆时针旋转angle"></a>2.3.4 绕着点P逆时针旋转angle</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">rotate</span><span class="params">(Point p, db angle)</span> </span>&#123;</span><br><span class="line">    Point v = (*<span class="keyword">this</span>) - p;</span><br><span class="line">    db c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">    <span class="keyword">return</span> &#123;p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-5-ToLeftTest-函数"><a href="#2-3-5-ToLeftTest-函数" class="headerlink" title="2.3.5 ToLeftTest 函数"></a>2.3.5 ToLeftTest 函数</h4><p>判断$\vec{bc}$是不是想两$\vec{ab}$的逆时针方向旋转 凸包</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ToLeftTest</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((b - a) ^ (c - b)) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-点和线"><a href="#3-点和线" class="headerlink" title="3. 点和线"></a>3. 点和线</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><h4 id="3-1-1直线定义"><a href="#3-1-1直线定义" class="headerlink" title="3.1.1直线定义"></a>3.1.1直线定义</h4><p>直线定义一般由三种形式</p>
<ul>
<li>$ax+by+c=0$一般式</li>
<li>$x_0+y_0+v_xt+v_yt=0$点向式</li>
<li>$y=kx+b$斜截式</li>
</ul>
<h4 id="3-1-2-点向式"><a href="#3-1-2-点向式" class="headerlink" title="3.1.2 点向式"></a>3.1.2 点向式</h4><script type="math/tex; mode=display">
P = P_o+vt</script><p>用一个点加一个线段表示</p>
<h3 id="3-1-2-构造方法"><a href="#3-1-2-构造方法" class="headerlink" title="3.1.2 构造方法"></a>3.1.2 构造方法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">    Point s, e;</span><br><span class="line"></span><br><span class="line">    Line() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Line(Point _s, Point _e) &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Line(Point p, db angle) &#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span> (sgn(angle - PI / <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            e = (s + Point(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = (s + Point(<span class="number">1</span>, <span class="built_in">tan</span>(angle)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ax + by + c = 0</span></span><br><span class="line">    Line(db a, db b, db c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sgn(a) == <span class="number">0</span>) &#123;</span><br><span class="line">            s = Point(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = Point(<span class="number">1</span>, -c / b);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sgn(b) == <span class="number">0</span>) &#123;</span><br><span class="line">            s = Point(-c / a, <span class="number">0</span>);</span><br><span class="line">            e = Point(-c / a, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = Point(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = Point(<span class="number">1</span>, (-c - a) / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="3-1-2-常用函数"><a href="#3-1-2-常用函数" class="headerlink" title="3.1.2 常用函数"></a>3.1.2 常用函数</h4><h5 id="3-1-2-1-点和直线的关系"><a href="#3-1-2-1-点和直线的关系" class="headerlink" title="3.1.2.1 点和直线的关系"></a>3.1.2.1 点和直线的关系</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//点和直线关系</span></span><br><span class="line"><span class="comment">//1 在左侧</span></span><br><span class="line"><span class="comment">//2 在右侧</span></span><br><span class="line"><span class="comment">//3 在直线上</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = sgn((p - s) ^ (e - s));</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-2-点在线段上的判断"><a href="#3-1-2-2-点在线段上的判断" class="headerlink" title="3.1.2.2 点在线段上的判断"></a>3.1.2.2 点在线段上的判断</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn(((p - s) ^ (e - s))) == <span class="number">0</span> &amp;&amp; sgn((p - s) * (p - e)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-2-向量平行判断"><a href="#3-1-2-2-向量平行判断" class="headerlink" title="3.1.2.2 向量平行判断"></a>3.1.2.2 向量平行判断</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn((e - s) ^ (v.e - v.s)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-3-两线段相交判断"><a href="#3-1-2-3-两线段相交判断" class="headerlink" title="3.1.2.3 两线段相交判断"></a>3.1.2.3 两线段相交判断</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//2 规范相交</span></span><br><span class="line"><span class="comment">//1 非规范相交</span></span><br><span class="line"><span class="comment">//0 不相交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d1 = sgn((e - s) ^ (v.s - s));</span><br><span class="line">    <span class="keyword">int</span> d2 = sgn((e - s) ^ (v.e - s));</span><br><span class="line">    <span class="keyword">int</span> d3 = sgn((v.e - v.s) ^ (s - v.s));</span><br><span class="line">    <span class="keyword">int</span> d4 = sgn((v.e - v.s) ^ (e - v.s));</span><br><span class="line">    <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ((d1 == <span class="number">0</span> &amp;&amp; sgn((v.s - s) * (v.s - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d2 == <span class="number">0</span> &amp;&amp; sgn((v.e - s) * (v.e - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d3 == <span class="number">0</span> &amp;&amp; sgn((s - v.s) * (s - v.e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d4 == <span class="number">0</span> &amp;&amp; sgn((e - v.s) * (e - v.e))) &lt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-4-直线和线段相交判断"><a href="#3-1-2-4-直线和线段相交判断" class="headerlink" title="3.1.2.4 直线和线段相交判断"></a>3.1.2.4 直线和线段相交判断</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//-*this line -v seg</span></span><br><span class="line"><span class="comment">//2 规范相交</span></span><br><span class="line"><span class="comment">//1 非规范相交</span></span><br><span class="line"><span class="comment">//0 不相交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d1 = sgn((e - s) ^ (v.s - s));</span><br><span class="line">    <span class="keyword">int</span> d2 = sgn((e - s) ^ (v.e - s));</span><br><span class="line">    <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (d1 == <span class="number">0</span> || d2 == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-5-两直线关系"><a href="#3-1-2-5-两直线关系" class="headerlink" title="3.1.2.5 两直线关系"></a>3.1.2.5 两直线关系</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//0 平行</span></span><br><span class="line"><span class="comment">//1 重合</span></span><br><span class="line"><span class="comment">//2 相交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((*<span class="keyword">this</span>).parallel(v)) &#123;</span><br><span class="line">        <span class="keyword">return</span> v.relation(s) == <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-6-两直线交点"><a href="#3-1-2-6-两直线交点" class="headerlink" title="3.1.2.6 两直线交点"></a>3.1.2.6 两直线交点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    db a1 = (v.e - v.s) ^(s - v.s);</span><br><span class="line">    db a2 = (v.e - v.s) ^(e - v.s);</span><br><span class="line">    <span class="keyword">return</span> &#123;(s.x * a2 - e.x * a1) / (a1 - a1), (s.y * a2 - e.y * a1) / (a2 - a1)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-7-点到直线的距离"><a href="#3-1-2-7-点到直线的距离" class="headerlink" title="3.1.2.7 点到直线的距离"></a>3.1.2.7 点到直线的距离</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">dispointtoline</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>((p - s) ^ (e - s)) / length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="3-1-2-8-点到线段的距离"><a href="#3-1-2-8-点到线段的距离" class="headerlink" title="3.1.2.8 点到线段的距离"></a>3.1.2.8 点到线段的距离</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">dispointtoseg</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sgn((p - s) * (e - s)) &lt; <span class="number">0</span> || sgn((p - e) * (s - e)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(p.distance(e), p.distance(s));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-9-线段到线段距离"><a href="#3-1-2-9-线段到线段距离" class="headerlink" title="3.1.2.9 线段到线段距离"></a>3.1.2.9 线段到线段距离</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">dissegtoseg</span><span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(dispointtoseg(v.s), dispointtoseg(v.e)), <span class="built_in">min</span>(v.dispointtoseg(s), v.dispointtoseg(e)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-10-点在直线上的投影"><a href="#3-1-2-10-点在直线上的投影" class="headerlink" title="3.1.2.10 点在直线上的投影"></a>3.1.2.10 点在直线上的投影</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s + (((e - s) * ((e - s) * (p - s))) / ((e - s).len2()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-1-2-11-点关于直线的对称点"><a href="#3-1-2-11-点关于直线的对称点" class="headerlink" title="3.1.2.11 点关于直线的对称点"></a>3.1.2.11 点关于直线的对称点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    Point q = lineprog(p);</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">2</span> * q.x - p.x, <span class="number">2</span> * q.y - p.y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-多边形"><a href="#4-多边形" class="headerlink" title="4. 多边形"></a>4. 多边形</h2><h3 id="4-1-三角形"><a href="#4-1-三角形" class="headerlink" title="4.1 三角形"></a>4.1 三角形</h3><h4 id="4-1-1-三角形面积"><a href="#4-1-1-三角形面积" class="headerlink" title="4.1.1 三角形面积"></a>4.1.1 三角形面积</h4><ul>
<li><p>利用两条边叉积</p>
</li>
<li><p>海伦公式</p>
<script type="math/tex; mode=display">
S = \sqrt{p(p-a)(p-b)(p-c)}, p=\frac{a+b+c}{2}</script></li>
<li><p>$S = \frac{absinC}{2}$</p>
</li>
</ul>
<h3 id="4-2-其他多边形"><a href="#4-2-其他多边形" class="headerlink" title="4.2 其他多边形"></a>4.2 其他多边形</h3><h4 id="4-2-1-常用函数"><a href="#4-2-1-常用函数" class="headerlink" title="4.2.1 常用函数"></a>4.2.1 常用函数</h4><h5 id="4-2-1-1-点和多边形的关系"><a href="#4-2-1-1-点和多边形的关系" class="headerlink" title="4.2.1.1 点和多边形的关系"></a>4.2.1.1 点和多边形的关系</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 3 点上</span></span><br><span class="line"><span class="comment">// 2 边上</span></span><br><span class="line"><span class="comment">// 1 内部</span></span><br><span class="line"><span class="comment">// 0 外部</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">relationpoint</span><span class="params">(Point q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == q)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getline();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l[i].pointonseg(q)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = (i + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">int</span> k = sgn((q - p[j]) ^ (p[i] - p[j]));</span><br><span class="line">        <span class="keyword">int</span> u = sgn(p[i].y - q.y);</span><br><span class="line">        <span class="keyword">int</span> v = sgn(p[j].y - q.y);</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; u &lt; <span class="number">0</span> &amp;&amp; v &gt;= <span class="number">0</span>) cnt++;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; v &lt; <span class="number">0</span> &amp;&amp; u &gt;= <span class="number">0</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-2-1-2-获取周长"><a href="#4-2-1-2-获取周长" class="headerlink" title="4.2.1.2 获取周长"></a>4.2.1.2 获取周长</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">getcircumferenct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        sum += p[i].distance(p[(i + <span class="number">1</span>) % n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-2-1-3-获取面积"><a href="#4-2-1-3-获取面积" class="headerlink" title="4.2.1.3 获取面积"></a>4.2.1.3 获取面积</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">db <span class="title">getarea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        sum += (p[i] ^ (p[(i + <span class="number">1</span>) % n]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(sum / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-2-1-4-获取重心"><a href="#4-2-1-4-获取重心" class="headerlink" title="4.2.1.4 获取重心"></a>4.2.1.4 获取重心</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">getbarycentre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point ret = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    db area = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        db tmp = (p[i] - p[<span class="number">0</span>]) ^(p[i + <span class="number">1</span>] - p[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (sgn(tmp) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        area += tmp;</span><br><span class="line">        ret.x += (p[<span class="number">0</span>].x + p[i].x + p[i + <span class="number">1</span>].x) / <span class="number">3</span> * tmp;</span><br><span class="line">        ret.y = (p[<span class="number">0</span>].y + p[i].y + p[i + <span class="number">1</span>].y) / <span class="number">3</span> * tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sgn(area)) ret = ret / area;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-Pick定理"><a href="#4-3-Pick定理" class="headerlink" title="4.3 Pick定理"></a>4.3 Pick定理</h3><h4 id="4-3-1-内容"><a href="#4-3-1-内容" class="headerlink" title="4.3.1 内容"></a>4.3.1 内容</h4><p>皮克定理是指一个计算点阵中顶点在格点上的多边形面积公式该公式可以表示为</p>
<script type="math/tex; mode=display">
2S = 2a+b-2</script><p>其中$a$表示多边形内部点数，$b$表示多边形边界上点数，$S$表示多边形面积</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-University-Training-Contest-5</title>
    <url>/2019/08/06/Multi-University-Training-Contest-5/</url>
    <content><![CDATA[<h2 id="B-three-arrays"><a href="#B-three-arrays" class="headerlink" title="B. three arrays"></a>B. three arrays</h2><p>题意：给出两个序列$a, b$,生成序列$c$,其中$c_i=a_i\oplus b_i$，要求重新排列$a, b$，使得$c$字典序最小</p>
<p>思路：建立两颗$Trie$树，两指针分别在两颗$Trie$树上走，尽可能保证异或后为$0$，走$n$边后排序。对于$(0,0),(1,1)$谁先走，两对数只可能是不相同的两个数，所以顺序无所谓。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], res[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> son[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> tot;</span><br><span class="line">        node() &#123;</span><br><span class="line">            <span class="built_in">memset</span>(son, <span class="number">-1</span>, <span class="keyword">sizeof</span> son);</span><br><span class="line">            tot = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N * <span class="number">32</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        t[<span class="number">1</span>] = node();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;nx = t[root].son[(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx == <span class="number">-1</span>) &#123;</span><br><span class="line">                nx = ++cnt;</span><br><span class="line">                t[nx] = node();</span><br><span class="line">            &#125;</span><br><span class="line">            root = nx;</span><br><span class="line">            t[root].tot += y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = t[root].son[(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">            t[nx].tot -= y;</span><br><span class="line">            root = nx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> nx = t[root].son[f];</span><br><span class="line">            <span class="keyword">if</span> (nx == <span class="number">-1</span> || t[nx].tot == <span class="number">0</span>) &#123;</span><br><span class="line">                res |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                nx = t[root].son[!f];</span><br><span class="line">            &#125;</span><br><span class="line">            root = nx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;trie[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Move[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> it[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> nx[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            nx[<span class="number">0</span>] = trie[<span class="number">0</span>].t[it[<span class="number">0</span>]].son[Move[j][<span class="number">0</span>]];</span><br><span class="line">            nx[<span class="number">1</span>] = trie[<span class="number">1</span>].t[it[<span class="number">1</span>]].son[Move[j][<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">if</span> (nx[<span class="number">0</span>] != <span class="number">-1</span> &amp;&amp; nx[<span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; trie[<span class="number">0</span>].t[nx[<span class="number">0</span>]].tot &gt; <span class="number">0</span> &amp;&amp; trie[<span class="number">1</span>].t[nx[<span class="number">1</span>]].tot &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Move[j][<span class="number">0</span>]) num[<span class="number">0</span>] |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                <span class="keyword">if</span> (Move[j][<span class="number">1</span>]) num[<span class="number">1</span>] |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                it[<span class="number">0</span>] = nx[<span class="number">0</span>];</span><br><span class="line">                it[<span class="number">1</span>] = nx[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    trie[<span class="number">0</span>].del(num[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    trie[<span class="number">1</span>].del(num[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">0</span>] ^ num[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        trie[<span class="number">0</span>].init(); trie[<span class="number">1</span>].init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">            trie[<span class="number">0</span>].insert(a[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">            trie[<span class="number">1</span>].insert(b[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            res[i] = query();</span><br><span class="line">        &#125;</span><br><span class="line">        sort(res + <span class="number">1</span>, res + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, res[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-equation"><a href="#D-equation" class="headerlink" title="D. equation"></a>D. equation</h2><p>题意：给出序列$a, b$以及整数$C$，求所有实数$x$使得$\sum_{i=1}^n\vert a_i\cdot x+b_i\vert=C$</p>
<p>思路：根据每个绝对值取值为$0$可以将$x$划分为$n+1$个区间，在每个区间里都是一个线性方程，直接求解判断即可，注意无穷解的时候</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a % b) : a; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">frac</span>&#123;</span></span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll g = gcd(<span class="built_in">abs</span>(x), <span class="built_in">abs</span>(y));</span><br><span class="line">        x /= g;</span><br><span class="line">        y /= g;</span><br><span class="line">        <span class="keyword">if</span> (x * y == <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x * y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = -<span class="built_in">abs</span>(x);</span><br><span class="line">            y = <span class="built_in">abs</span>(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="built_in">abs</span>(x);</span><br><span class="line">            y = <span class="built_in">abs</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    frac() &#123;&#125;</span><br><span class="line">    frac(ll x, ll y) : x(x), y(y) &#123;sim();&#125;</span><br><span class="line">    frac <span class="keyword">operator</span>+(<span class="keyword">const</span> frac &amp;u)&#123;</span><br><span class="line">        ll p, q; </span><br><span class="line">        p = x * u.y + y * u.x;</span><br><span class="line">        q = u.y * y;</span><br><span class="line">        ll d = gcd(p, q);</span><br><span class="line">        p /= d; q /= d;</span><br><span class="line">        <span class="keyword">return</span> (frac)&#123;p, q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span>-(<span class="keyword">const</span> frac &amp;u)&#123;</span><br><span class="line">        ll p, q;</span><br><span class="line">        p = x * u.y - y * u.x;</span><br><span class="line">        q = u.y * y;</span><br><span class="line">        ll d = gcd(p, q);</span><br><span class="line">        p /= d; q /= d;</span><br><span class="line">        <span class="keyword">return</span> (frac)&#123;p, q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span>*(<span class="keyword">const</span> frac &amp;u)&#123;</span><br><span class="line">        ll p, q;</span><br><span class="line">        p = u.x * x;</span><br><span class="line">        q = u.y * y;</span><br><span class="line">        ll d = gcd(p, q); </span><br><span class="line">        p /= d; q /= d;</span><br><span class="line">        <span class="keyword">return</span> (frac)&#123;p, q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span>/(<span class="keyword">const</span> frac &amp;u)&#123;</span><br><span class="line">        ll p, q;</span><br><span class="line">        p = u.y * x;</span><br><span class="line">        q = u.x * y;</span><br><span class="line">        ll d = gcd(p,q);</span><br><span class="line">        p /= d; q /= d;</span><br><span class="line">        <span class="keyword">return</span> (frac)&#123;p,q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y &lt; y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y != y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y &lt;= y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y &gt;= y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y == y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sqr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        *<span class="keyword">this</span> = (*<span class="keyword">this</span>) * (*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sim();</span><br><span class="line">        <span class="keyword">if</span> (x * y &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld"</span>, <span class="built_in">abs</span>(x), <span class="built_in">abs</span>(y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll C;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    frac x;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        x = frac(-b, a); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; other.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line">frac res[N &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> cnt = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    ll suma[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, sumb[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        suma[<span class="number">1</span>] += a[i].a;</span><br><span class="line">        sumb[<span class="number">1</span>] += a[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt; n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].x != a[j + <span class="number">1</span>].x) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="built_in">min</span>(j, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">            suma[<span class="number">1</span>] -= a[k].a;</span><br><span class="line">            sumb[<span class="number">1</span>] -= a[k].b;</span><br><span class="line">            suma[<span class="number">0</span>] += a[k].a;</span><br><span class="line">            sumb[<span class="number">0</span>] += a[k].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (suma[<span class="number">0</span>] - suma[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; sumb[<span class="number">0</span>] - sumb[<span class="number">1</span>] == C) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (suma[<span class="number">1</span>] == suma[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        frac x = frac(C - sumb[<span class="number">0</span>] + sumb[<span class="number">1</span>], suma[<span class="number">0</span>] - suma[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= a[i].x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; a[j + <span class="number">1</span>].x) &#123;</span><br><span class="line">                    res[++cnt] = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[++cnt] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(res + <span class="number">1</span>, res + <span class="number">1</span> + cnt);</span><br><span class="line">    cnt = unique(res + <span class="number">1</span>, res + <span class="number">1</span> + cnt) - res - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        res[i].<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;C);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].scan();</span><br><span class="line">        ++n; a[n].a = a[n].b = <span class="number">0</span>; a[n].x = frac(<span class="number">-2e9</span>, <span class="number">1</span>);</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        ++n; a[n].a = a[n].b = <span class="number">0</span>; a[n].x = frac(<span class="number">2e9</span>, <span class="number">1</span>);</span><br><span class="line">        solve();    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h2 id="E-permutation-1"><a href="#E-permutation-1" class="headerlink" title="E. permutation 1"></a>E. permutation 1</h2><p>题意：构造一个长度为$n$的排列，使得差分排列是第$k$小</p>
<p>思路：枚举每一位放什么，并且记录后续有多少个值，贪心构造</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> n, k, a[N], vis[N];</span><br><span class="line">ll fac[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) vis[i] = <span class="number">0</span>;</span><br><span class="line">    vis[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = now + a[i];</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">1</span> || nx &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[nx]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vis[nx] = <span class="number">1</span>;</span><br><span class="line">        now = nx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(x, i)) &#123;</span><br><span class="line">            res += fac[n - x - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(n - <span class="number">1</span>, i)) &#123;</span><br><span class="line">            <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">int</span> now = i;</span><br><span class="line">            vec.push_back(now);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                now += a[j];</span><br><span class="line">                vec.push_back(now);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, vec[j], <span class="string">" \n"</span>[j == n - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123; </span><br><span class="line">            ll tot = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = -n + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                a[i] = j; </span><br><span class="line">                now = work(i);</span><br><span class="line">                <span class="keyword">if</span> (tot + now &gt;= k) &#123;</span><br><span class="line">                    k -= tot;</span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tot += now;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        out();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-string-matching"><a href="#F-string-matching" class="headerlink" title="F. string matching"></a>F. string matching</h2><p>题意：询问$\forall i \in [0, len - 1]$中$s[i \cdots len - 1]$与$s[0 \cdots len - 1]$的暴力求$lcp$过程需要比较多少次。</p>
<p>思路：$ExKmp$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExKMP</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Next[N];</span><br><span class="line">    <span class="keyword">int</span> extend[N];</span><br><span class="line">    <span class="comment">//下标从1开始</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_Next</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>), p = <span class="number">1</span>, pos;</span><br><span class="line">        <span class="comment">//Next[1]要特殊考虑</span></span><br><span class="line">        Next[<span class="number">1</span>] = lens;</span><br><span class="line">        <span class="keyword">while</span> (p + <span class="number">1</span> &lt;= lens &amp;&amp; s[p] == s[p + <span class="number">1</span>]) ++p;</span><br><span class="line">        <span class="comment">//Next[2]初始化</span></span><br><span class="line">        Next[pos = <span class="number">2</span>] = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= lens; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = Next[i - pos + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//第一种情况</span></span><br><span class="line">            <span class="keyword">if</span> (len + i &lt; p + <span class="number">1</span>) Next[i] = len;</span><br><span class="line">            <span class="comment">//第二种情况</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//找到对于子串最靠后已经匹配的位置</span></span><br><span class="line">                <span class="keyword">int</span> j = <span class="built_in">max</span>(p - i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//暴力匹配</span></span><br><span class="line">                <span class="keyword">while</span> (i + j &lt;= lens &amp;&amp; s[j + <span class="number">1</span>] == s[i + j]) ++j;</span><br><span class="line">                p = i + (Next[pos = i] = j) - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">        get_Next(t);</span><br><span class="line">        <span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>), lent = <span class="built_in">strlen</span>(t + <span class="number">1</span>), p = <span class="number">1</span>, pos;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= lent &amp;&amp; s[p] == t[p]) ++p;</span><br><span class="line">        p = extend[pos = <span class="number">1</span>] = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= lens; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = Next[i - pos + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (len + i &lt; p + <span class="number">1</span>) extend[i] = len;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> j = <span class="built_in">max</span>(p - i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">while</span> (i + j &lt;= lens &amp;&amp; j &lt;= lent &amp;&amp; t[j + <span class="number">1</span>] == s[i + j]) ++j;</span><br><span class="line">                p = i + (extend[pos = i] = j) - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;exkmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) t[i] = s[i]; t[len + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        exkmp.work(s, t);</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            ll t = exkmp.extend[i];</span><br><span class="line">            <span class="keyword">if</span> (len - i + <span class="number">1</span> &gt; t) ++t;</span><br><span class="line">            res += t;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h2 id="G-permutation-2"><a href="#G-permutation-2" class="headerlink" title="G. permutation 2"></a>G. permutation 2</h2><p>题意：问有多少$n$个数的排列满足下列要求：</p>
<ul>
<li>$p_1 = x$</li>
<li>$p_n = y$</li>
<li>$\forall i \in [1, n - 1]$都满足$|p<em>i - p</em>{i + 1}| \leq 2$</li>
</ul>
<p>思路:最终序列必定是$x,x-2\cdots x-1,x+1 \cdots y-1,y+1\cdots y+2,y $我们假设$x-2\cdots x-1$的排列有$p1$种，$y+1\cdots y+2$有$p_2$种，$x+1\cdots y-1$有$p_3$种，很显然，$p_1,p_2$均只有$1$种，对于$p_3$通过暴力打表发现满足序列$f[n]=f[n-1]+f[n-3]$其中$n$为长度，然后特判即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x, y;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        a[i] = (a[i - <span class="number">1</span>] + a[i - <span class="number">3</span>]) % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[y - x]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span> || y == n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[y - x - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y - x != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[y - x - <span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-line-symmetric"><a href="#H-line-symmetric" class="headerlink" title="H. line symmetric"></a>H. line symmetric</h2><p>题意：给出一个简单多边形，问至多修改一个点，满足整个简单多边形是边对称简单多边形</p>
<p>思路：暴力枚举每对相邻，间隔一个的点对的中垂线最为对称点，$O(n)$的去$check$.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    ll x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(ll _x, ll _y) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;x, &amp;y);</span><br><span class="line">        x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        y &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.x + y * other.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>/(<span class="keyword">const</span> ll &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x / other, y / other&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; P[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add</span><span class="params">(Point p[<span class="number">2</span>], Point V[<span class="number">2</span>], <span class="keyword">int</span> num[<span class="number">2</span>], <span class="keyword">int</span> pos[<span class="number">2</span>], <span class="keyword">int</span> &amp;now, Point p1, Point p2, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == <span class="number">0</span>) &#123;</span><br><span class="line">        p[now] = (p1 + p2) / <span class="number">2</span>;</span><br><span class="line">        V[now++] = &#123;p2.y - p1.y, p1.x - p2.x&#125;;</span><br><span class="line">        num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        pos[<span class="number">0</span>] = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (((((p1 + p2) / <span class="number">2</span>) - p[<span class="number">0</span>]) ^ V[<span class="number">0</span>]) != <span class="number">0</span> || ((p1 - p2) * V[<span class="number">0</span>]) ||</span><br><span class="line">            (Point(p2.y - p1.y, p1.x - p2.x) * V[<span class="number">0</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (now == <span class="number">1</span>) &#123;</span><br><span class="line">                p[now] = (p1 + p2) / <span class="number">2</span>;</span><br><span class="line">                V[now++] = &#123;p2.y - p1.y, p1.x - p2.x&#125;;</span><br><span class="line">                num[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                pos[<span class="number">1</span>] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (((((p1 + p2) / <span class="number">2</span>) - p[<span class="number">1</span>]) ^ V[<span class="number">1</span>]) != <span class="number">0</span> || ((p1 - p2) * V[<span class="number">1</span>]) ||</span><br><span class="line">                    (Point(p2.y - p1.y, p1.x - p2.x) * V[<span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    num[<span class="number">1</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check1</span><span class="params">(Point p[])</span> </span>&#123;</span><br><span class="line">    Point X[<span class="number">2</span>], V[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, pos[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, now = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n - i; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Add(X, V, num, pos, now, p[i], p[n - i], i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p[<span class="number">0</span>] - X[<span class="number">0</span>]) ^ V[<span class="number">0</span>]) &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == n - i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p[i] - X[<span class="number">0</span>]) ^ V[<span class="number">0</span>]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt; <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; <span class="number">2</span>; ++o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[o] != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p[<span class="number">0</span>] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>]) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == n - i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p[i] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (pos[o] == <span class="number">1</span>) ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((sgn((p[j] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>]) == sgn((p[pos[o]] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>])) ||</span><br><span class="line">                sgn((p[n - j] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>]) == sgn((p[n - pos[o]] - X[o ^ <span class="number">1</span>]) ^ V[o ^ <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(Point p[])</span> </span>&#123;</span><br><span class="line">    Point X[<span class="number">2</span>], V[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, pos[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, now = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - i; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Add(X, V, num, pos, now, p[i], p[n - <span class="number">1</span> - i], i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; <span class="number">2</span>; ++o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[o] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (pos[o] == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (sgn((p[j] - X[o]) ^ V[o]) == sgn((p[pos[o ^ <span class="number">1</span>]] - X[o]) ^ V[o]) ||</span><br><span class="line">                sgn((p[n - <span class="number">1</span> - j] - X[o]) ^ V[o]) == sgn((p[n - <span class="number">1</span> - pos[o ^ <span class="number">1</span>]] - X[o]) ^ V[o])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check1(P + i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check2(P + i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin)</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            P[i].input();</span><br><span class="line">            P[i + n] = P[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Y"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve() ? <span class="string">"Y"</span> : <span class="string">"N"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HDU多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第六场）</title>
    <url>/2019/08/03/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-Garbage-Classification"><a href="#A-Garbage-Classification" class="headerlink" title="A. Garbage Classification"></a>A. Garbage Classification</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"><span class="keyword">char</span> s[N], t[N], mp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, kase);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s + <span class="number">1</span>, t);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            mp[<span class="string">'a'</span> + i] = t[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">0</span>, w = <span class="number">0</span>, h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = mp[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'w'</span>) ++w;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'d'</span>) ++d;</span><br><span class="line">            <span class="keyword">else</span> ++h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h * <span class="number">4</span> &gt;= len) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Harmful"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h * <span class="number">10</span> &lt;= len) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Recyclable"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d &gt;= w * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Dry"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Wet"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Shorten-IPv6-Address"><a href="#B-Shorten-IPv6-Address" class="headerlink" title="B. Shorten IPv6 Address"></a>B. Shorten IPv6 Address</h2><p>模拟</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = x % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">10</span>) res += y + <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">10</span>) res += <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">11</span>) res += <span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">12</span>) res += <span class="string">'c'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">13</span>) res += <span class="string">'d'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">14</span>) res += <span class="string">'e'</span>;</span><br><span class="line">        <span class="keyword">else</span> res += <span class="string">'f'</span>;</span><br><span class="line">        x /= <span class="number">16</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    reverse(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i += <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + <span class="number">16</span>; ++j) &#123;</span><br><span class="line">                num = num * <span class="number">2</span> + s[j] - <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i / <span class="number">16</span>] = num;</span><br><span class="line">        &#125;      </span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">string</span> str = f(a[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">            str += <span class="string">":"</span>;</span><br><span class="line">            str += f(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back(str);</span><br><span class="line">        <span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> now = tmp;</span><br><span class="line">            now += <span class="string">":"</span>;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                now += <span class="string">":"</span>;</span><br><span class="line">                now += f(a[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">8</span>) now += <span class="string">":"</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span>) res.push_back(now);</span><br><span class="line">            <span class="keyword">if</span> (i) tmp += <span class="string">":"</span>;</span><br><span class="line">            tmp += f(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>(), [](<span class="built_in">string</span> x, <span class="built_in">string</span> y)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x.length() != y.length())</span><br><span class="line">                <span class="keyword">return</span> x.length() &lt; y.length();</span><br><span class="line">            <span class="keyword">return</span> x &lt; y;       </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[<span class="number">0</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Palindrome-Mouse"><a href="#C-Palindrome-Mouse" class="headerlink" title="C. Palindrome Mouse"></a>C. Palindrome Mouse</h2><p>题意：询问有多少对不同的$(a,b)$满足$a,b$都是回文串且$a$是$b$的子串</p>
<p>思路：回文树</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="D-Move"><a href="#D-Move" class="headerlink" title="D. Move"></a>D. Move</h2><p>题意：有$n$个物品，每个物品体积为$V_i$，有$K$个体积相同的盒子，要求满足规则下的盒子体积最大值</p>
<ul>
<li>一个盒子装不下了才能装另一个</li>
<li>每次选取能装进去的最大的物品，直到装不下</li>
</ul>
<p>思路：枚举</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n, k, a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> box = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">multiset</span> &lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        se.insert(a[i]);</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> remind = x;</span><br><span class="line">        <span class="keyword">while</span> (!se.empty()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pos = se.upper_bound(remind);</span><br><span class="line">            <span class="keyword">if</span> (pos != se.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">                --pos;</span><br><span class="line">                remind -= (*pos);</span><br><span class="line">                sum -= (*pos);</span><br><span class="line">                se.erase(pos);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        box += remind;</span><br><span class="line">        <span class="keyword">if</span> (se.empty()) <span class="keyword">return</span> -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum - box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, kase);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = check(i);</span><br><span class="line">            <span class="keyword">if</span> (x == -INF) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i += <span class="built_in">max</span>(<span class="number">1</span>, x / k + (x % k != <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Androgynos"><a href="#E-Androgynos" class="headerlink" title="E. Androgynos"></a>E. Androgynos</h2><p>题意：构造$n$阶自补图，如果没有则输出$NO$，否则输出邻接矩阵</p>
<p>思路：</p>
<ul>
<li>$n$阶自补图存在当且仅当$n=4\cdot k $或者$n=4\cdot k+1$</li>
<li>对于一个长度为四的的自补图，可以通过构造一条链$X-Y-Z-W$，他的补图为$Y-W-X-Z$</li>
<li>考虑两个自补图合并，只需要$X,W$与其余点相连，就可以形成新的自补图</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, cas);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">2</span> || n % <span class="number">4</span> == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = i, y = i + <span class="number">1</span>, z = i + <span class="number">2</span>, w = i + <span class="number">3</span>;</span><br><span class="line">                ans[x] = y;</span><br><span class="line">                ans[y] = w;</span><br><span class="line">                ans[z] = x;</span><br><span class="line">                ans[w] = z;</span><br><span class="line">                G[x][y] = G[y][x] = <span class="number">1</span>;</span><br><span class="line">                G[y][z] = G[z][y] = <span class="number">1</span>;</span><br><span class="line">                G[z][w] = G[w][z] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                    G[x][j] = G[j][x] = <span class="number">1</span>;</span><br><span class="line">                    G[w][j] = G[j][w] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = i, y = i + <span class="number">1</span>, z = i + <span class="number">2</span>, w = i + <span class="number">3</span>;</span><br><span class="line">                ans[x] = y;</span><br><span class="line">                ans[y] = w;</span><br><span class="line">                ans[z] = x;</span><br><span class="line">                ans[w] = z;</span><br><span class="line">                G[x][y] = G[y][x] = <span class="number">1</span>;</span><br><span class="line">                G[y][z] = G[z][y] = <span class="number">1</span>;</span><br><span class="line">                G[z][w] = G[w][z] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                    G[x][j] = G[j][x] = <span class="number">1</span>;</span><br><span class="line">                    G[w][j] = G[j][w] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, G[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Is-Today-Friday"><a href="#G-Is-Today-Friday" class="headerlink" title="G. Is Today Friday?"></a>G. Is Today Friday?</h2><p>题意：用字母代替数字，输出最小的方案，要求每个日期都合法且每个日期都是周五</p>
<p>思路：暴力</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> days[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDay</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> days[<span class="number">2</span>] + isLeap(year);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> days[month];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">week</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || m == <span class="number">2</span>) m += <span class="number">12</span>, y--;</span><br><span class="line">    <span class="keyword">if</span> ((y &lt; <span class="number">1752</span>) || (y == <span class="number">1752</span> &amp;&amp; m &lt; <span class="number">9</span>) || (y == <span class="number">1752</span> &amp;&amp; m == <span class="number">9</span> &amp;&amp; d &lt; <span class="number">3</span>)) &#123;</span><br><span class="line">        ans = (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> + <span class="number">5</span>) % <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>, m = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) y = y * <span class="number">10</span> + a[s[idx][i] - <span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">7</span>; i++) m = m * <span class="number">10</span> + a[s[idx][i] - <span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">8</span>; i &lt; <span class="number">10</span>; i++) d = d * <span class="number">10</span> + a[s[idx][i] - <span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">1600</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">1</span> || m &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">1</span> || d &gt; getDay(y, m)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> week(y, m, d) == <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(s + <span class="number">1</span>, s + <span class="number">1</span> + n);</span><br><span class="line">    n = unique(s + <span class="number">1</span>, s + <span class="number">1</span> + n) - s - <span class="number">1</span>;</span><br><span class="line">    shuffle(s + <span class="number">1</span>, s + <span class="number">1</span> + n, <span class="built_in">std</span>::mt19937(<span class="built_in">std</span>::random_device()()));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check(i)) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(a, a + <span class="number">10</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>), <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Upgrading-Technology"><a href="#J-Upgrading-Technology" class="headerlink" title="J. Upgrading Technology"></a>J. Upgrading Technology</h2><p>题意：有$n$个技能，$m$个等级，每个技能从$j-1$升级到$j$需要消耗$C_{ij}$，如果所有技能到达了$j$，则可以获得$d_j$，求最大收益：</p>
<p>思路：求前缀和的后缀最大值，枚举$i$作为最低等级$j$的值，取$MAX$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll a[N][N], b[N];</span><br><span class="line">ll f[N][N], g[N], f2[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, cas);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">        <span class="built_in">memset</span>(f2, <span class="number">0</span>, <span class="keyword">sizeof</span> f2);</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, b + i);</span><br><span class="line">            g[i] = g[i - <span class="number">1</span>] + b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">1</span>] - a[i][j];</span><br><span class="line">                f2[i][j] = f2[i][j - <span class="number">1</span>] - a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= m) &#123;</span><br><span class="line">                    f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                tmp += f[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, tmp - f[i][j] + f2[i][j] + g[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第五场）</title>
    <url>/2019/08/01/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-digits-2"><a href="#A-digits-2" class="headerlink" title="A. digits 2"></a>A. digits 2</h2><p>题意：输出一个数，使得数位和整除$n$，整个数整除$n$</p>
<p>思路：输出$n$个$n$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-generator-1"><a href="#B-generator-1" class="headerlink" title="B. generator 1"></a>B. generator 1</h2><p>题意：$X<em>i=a\cdot X</em>{i-1}+b\cdot X_{i-2} \% mod$，输出第$n$项</p>
<p>思路：十进制快速幂</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"></span><br><span class="line">ll x0, x1, a, b, mod;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;x, ll y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= mod) &#123;</span><br><span class="line">        x -= mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    Matrix() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">inline</span> Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix res = Matrix();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    add(res.a[i][j], a[i][k] * other.a[k][j] % mod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; base, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">qpow</span><span class="params">(Matrix base, ll n)</span> </span>&#123;</span><br><span class="line">    Matrix res = Matrix();</span><br><span class="line">    res.<span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * base;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * base;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    base = Matrix();</span><br><span class="line">    res = Matrix();</span><br><span class="line">    res.<span class="built_in">set</span>();</span><br><span class="line">    base.a[<span class="number">0</span>][<span class="number">0</span>] = a;</span><br><span class="line">    base.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    base.a[<span class="number">0</span>][<span class="number">1</span>] = b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(str + <span class="number">1</span>); i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">'0'</span>) &#123;</span><br><span class="line">            res = res * qpow(base, str[i] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        base = qpow(base, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = res.a[<span class="number">1</span>][<span class="number">0</span>] * x1 % mod + res.a[<span class="number">1</span>][<span class="number">1</span>] * x0 % mod;</span><br><span class="line">    ans %= mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>, &amp;x0, &amp;x1, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %lld"</span>, str + <span class="number">1</span>, &amp;mod);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="G-subsequence-1"><a href="#G-subsequence-1" class="headerlink" title="G. subsequence 1"></a>G. subsequence 1</h2><p>题意：给出两个串$S, T$，问$S$有多少个子序列在数值上大于$T$</p>
<p>思路：通过简单$dp$转移得到长度相同时候的字符串数量，在通过组合数得到长度大于$T$串时的数量，相加即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3010</span></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line">ll dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;x, ll y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= p) x -= p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qmod</span><span class="params">(ll base, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * base % p;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * base % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fac[N], inv[N];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % p * inv[n - m] % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % p;</span><br><span class="line">    inv[N - <span class="number">1</span>] = qmod(fac[N - <span class="number">1</span>], p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) inv[i - <span class="number">1</span>] = inv[i] * i % p;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s + <span class="number">1</span>, t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line">                ll f;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == t[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    f = dp[j][<span class="number">1</span>];</span><br><span class="line">                    add(dp[j + <span class="number">1</span>][<span class="number">1</span>], f);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt; t[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    f = dp[j][<span class="number">1</span>];</span><br><span class="line">                    add(dp[j + <span class="number">1</span>][<span class="number">0</span>], f);</span><br><span class="line">                &#125;</span><br><span class="line">                f = dp[j][<span class="number">0</span>];</span><br><span class="line">                add(dp[j + <span class="number">1</span>][<span class="number">0</span>], f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == t[<span class="number">1</span>]) &#123;</span><br><span class="line">                    add(dp[<span class="number">1</span>][<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt; t[<span class="number">1</span>]) &#123;</span><br><span class="line">                    add(dp[<span class="number">1</span>][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = dp[m][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tot = n - i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = m + <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                    add(res, C(tot, j - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-subsequence-2"><a href="#H-subsequence-2" class="headerlink" title="H. subsequence 2"></a>H. subsequence 2</h2><p>题意：问是否存在一个串满足指定关系</p>
<p>思路：对于一个关系，每个字符都像后面字符连边，拓扑排序即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="keyword">int</span> n, m, id;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</span><br><span class="line"><span class="keyword">int</span> st[N], d[N];</span><br><span class="line"><span class="keyword">char</span> mp[N], s[N];</span><br><span class="line"><span class="keyword">int</span> num[N], x, y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ord[N], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= id; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">0</span>)</span><br><span class="line">            q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">        ord[++cnt] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == id &amp;&amp; id == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= id; ++i)</span><br><span class="line">            <span class="built_in">putchar</span>(mp[ord[i]]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">        G.<span class="built_in">clear</span>(); G.resize(N);</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">-1</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">-1</span>, <span class="keyword">sizeof</span> num);</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        <span class="keyword">int</span> len, cntx, cnty;</span><br><span class="line">        <span class="keyword">bool</span> F = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (m * (m - <span class="number">1</span>)) / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %s %d "</span>, s, &amp;len);</span><br><span class="line">            x = s[<span class="number">0</span>], y = s[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (len) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cntx = cnty = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == x) &#123;</span><br><span class="line">                    ++cntx;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++cnty;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num[x] == <span class="number">-1</span>) &#123;</span><br><span class="line">                num[x] = cntx;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num[x] != cntx) &#123;</span><br><span class="line">                F = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                num[y] = cnty;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num[y] != cnty) &#123; </span><br><span class="line">                F = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (st[x] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntx; ++i) &#123;</span><br><span class="line">                    mp[++id] = x;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        G[id - <span class="number">1</span>].push_back(id);</span><br><span class="line">                        ++d[id];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        st[x] = id;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnty; ++i) &#123;</span><br><span class="line">                    mp[++id] = y;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        G[id - <span class="number">1</span>].push_back(id);</span><br><span class="line">                        ++d[id];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        st[y] = id;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> posx = st[x], posy = st[y];    </span><br><span class="line">            --posx, --posy;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">1</span>] == x) ++posx;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">1</span>] == y) ++posy;</span><br><span class="line">            <span class="keyword">else</span> F = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != x &amp;&amp; s[i] != y) &#123;</span><br><span class="line">                    F = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == x) &#123;</span><br><span class="line">                    ++posx;</span><br><span class="line">                    <span class="keyword">if</span> (posy &gt;= st[y]) &#123;</span><br><span class="line">                        G[posy].push_back(posx);</span><br><span class="line">                        ++d[posx];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++posy;</span><br><span class="line">                    <span class="keyword">if</span> (posx &gt;= st[x]) &#123;</span><br><span class="line">                        G[posx].push_back(posy);</span><br><span class="line">                        ++d[posy];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (F &amp;&amp; id == n) &#123;</span><br><span class="line">            Toposort();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-three-points-1"><a href="#I-three-points-1" class="headerlink" title="I. three points 1"></a>I. three points 1</h2><p>题意：找三个点$X, Y, Z$，这三个点在矩形中并且$dis(X, Y)=a,dis(X, Z)=b, dis(Y, Z)=c $</p>
<p>思路：如果是线段，则在对角线上即可。</p>
<p>考虑是三角形，必定可以通过平移导致一个点在矩形的四个角，一个点在矩形的线段上，枚举模拟即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    db x, y;</span><br><span class="line"></span><br><span class="line">    Point() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Point(db x, db y) : x(x), y(y) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">distance</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">len</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(db r)</span> </span>&#123;</span><br><span class="line">        db l = len();</span><br><span class="line">        <span class="keyword">if</span> (!sgn(l)) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> Point(x * r, y * r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(-y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(y, -x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; X, Y, Z, p[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point p;</span><br><span class="line">    db r;</span><br><span class="line"></span><br><span class="line">    Circle() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Circle(Point _p, db _r) &#123;</span><br><span class="line">        p = _p;</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcircle</span><span class="params">(Circle v)</span> </span>&#123;</span><br><span class="line">        db d = p.distance(v.p);</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        db l = <span class="built_in">fabs</span>(r - v.r);</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - r - v.r) &lt; <span class="number">0</span> &amp;&amp; sgn(d - l) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - l) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (sgn(d - l) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrosscircle</span><span class="params">(Circle v, Point &amp;p1, Point &amp;p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = relationcircle(v);</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">1</span> || rel == <span class="number">5</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        db d = p.distance(v.p);</span><br><span class="line">        db l = (d * d + r * r - v.r * v.r) / (<span class="number">2</span> * d);</span><br><span class="line">        db h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        Point tmp = p + (v.p - p).trunc(l);</span><br><span class="line">        p1 = tmp + ((v.p - p).rotleft().trunc(h));</span><br><span class="line">        p2 = tmp + ((v.p - p).rotright().trunc(h));</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">2</span> || rel == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; c1, c2;</span><br><span class="line"></span><br><span class="line">db w, h, a, b, c;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(db x, db y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn(x) &gt;= <span class="number">0</span> &amp;&amp; sgn(w - x) &gt;= <span class="number">0</span> &amp;&amp; sgn(y) &gt;= <span class="number">0</span> &amp;&amp; sgn(h - y) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//X在左下角</span></span><br><span class="line">    X = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    c1 = Circle(X, b);</span><br><span class="line">    <span class="comment">//Y</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(a, <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w, <span class="built_in">sqrt</span>(a * a - w * w));</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="built_in">sqrt</span>(a * a - h * h), h);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="number">0</span>, a);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Z</span></span><br><span class="line">    c1 = Circle(X, a);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(b, <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w, <span class="built_in">sqrt</span>(b * b - w * w));</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="built_in">sqrt</span>(b * b - h * h), h);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="number">0</span>, b);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//X在右下角</span></span><br><span class="line">    X = Point(w, <span class="number">0</span>);</span><br><span class="line">    c1 = Circle(X, b);</span><br><span class="line">    <span class="comment">//Y</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w - a, <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w, a);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w - <span class="built_in">sqrt</span>(a * a - h * h), h);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="number">0</span>, <span class="built_in">sqrt</span>(a * a - w * w));</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Z</span></span><br><span class="line">    c1 = Circle(X, a);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w - b, <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w, b);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w - <span class="built_in">sqrt</span>(b * b - h * h), h);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="number">0</span>, <span class="built_in">sqrt</span>(b * b - w * w));</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//X在右上角</span></span><br><span class="line">    X = Point(w, h);</span><br><span class="line">    <span class="comment">//Y</span></span><br><span class="line">    c1 = Circle(X, b);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w - <span class="built_in">sqrt</span>(a * a - h * h), <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w, h - a);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w - a, h);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="number">0</span>, h - <span class="built_in">sqrt</span>(a * a - w * w));</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Z</span></span><br><span class="line">    c1 = Circle(X, a);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w - <span class="built_in">sqrt</span>(b * b - h * h), <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w, h - b);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w - b, h);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="number">0</span>, h - <span class="built_in">sqrt</span>(b * b - w * w));</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//X在左上角</span></span><br><span class="line">    X = Point(<span class="number">0</span>, h);</span><br><span class="line">    <span class="comment">//Y</span></span><br><span class="line">    c1 = Circle(X, b);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="built_in">sqrt</span>(a * a - h * h), <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(a - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(w, h - <span class="built_in">sqrt</span>(a * a - w * w));</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(a, h);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - a) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Y = Point(<span class="number">0</span>, h - a);</span><br><span class="line">        c2 = Circle(Y, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Z = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Z</span></span><br><span class="line">    c1 = Circle(X, a);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - h) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="built_in">sqrt</span>(b * b - h * h), <span class="number">0</span>);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(b - w) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(w, h - <span class="built_in">sqrt</span>(b * b - w * w));</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(w - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(b, h);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span> (sgn(h - b) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Z = Point(<span class="number">0</span>, h - b);</span><br><span class="line">        c2 = Circle(Z, c);</span><br><span class="line">        <span class="keyword">int</span> res = c1.pointcrosscircle(c2, p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (judge(p[i].x, p[i].y)) &#123;</span><br><span class="line">                Y = p[i];</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf %lf"</span>, &amp;w, &amp;h, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        db ta = a, tb = b, tc = c;</span><br><span class="line">        <span class="keyword">if</span> (sgn(a + b - c) &gt; <span class="number">0</span> &amp;&amp; sgn(b + c - a) &gt; <span class="number">0</span> &amp;&amp; sgn(a + c - b) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//x y z</span></span><br><span class="line">            solve();</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="comment">// y x z</span></span><br><span class="line">                a = ta, b = tc, c = tb;</span><br><span class="line">                solve();</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    <span class="comment">//z y x</span></span><br><span class="line">                    a = tc, b = tb, c = ta;</span><br><span class="line">                    solve();</span><br><span class="line">                    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                        assert(<span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        swap(X, Z);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    swap(X, Y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            db k = h / w;</span><br><span class="line">            <span class="keyword">if</span> (sgn(a + b - c) == <span class="number">0</span>) &#123;</span><br><span class="line">                Y = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                db x = <span class="built_in">sqrt</span>((a * a * w * w) / (h * h + w * w));</span><br><span class="line">                X = Point(x, k * x);</span><br><span class="line">                x = <span class="built_in">sqrt</span>((c * c * w * w) / (h * h + w * w));</span><br><span class="line">                Z = Point(x, k * x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sgn(b + c - a) == <span class="number">0</span>) &#123;</span><br><span class="line">                X = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                db x = <span class="built_in">sqrt</span>((a * a * w * w) / (h * h + w * w));</span><br><span class="line">                Y = Point(x, k * x);</span><br><span class="line">                x = <span class="built_in">sqrt</span>((b * b * w * w) / (h * h + w * w));</span><br><span class="line">                Z = Point(x, k * x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sgn(a + c - b) == <span class="number">0</span>) &#123;</span><br><span class="line">                X = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                db x = <span class="built_in">sqrt</span>((a * a * w * w) / (h * h + w * w));</span><br><span class="line">                Y = Point(x, k * x);</span><br><span class="line">                x = <span class="built_in">sqrt</span>((b * b * w * w) / (h * h + w * w));</span><br><span class="line">                Z = Point(x, k * x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f %.10f %.10f %.10f %.10f %.10f\n"</span>, X.x, X.y, Y.x, Y.y, Z.x, Z.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第四场）</title>
    <url>/2019/07/29/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-meeting"><a href="#A-meeting" class="headerlink" title="A. meeting"></a>A. meeting</h2><p>题意：在树上选取一个点使得$K$个点到达这个点的最大值最小</p>
<p>思路：答案为$K$个点的最远点对距离$\lceil \frac{d}{2}\rceil$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> vis[N], dp[N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[u]) &#123;</span><br><span class="line">        dp[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(v, u);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[u] + dp[v] + <span class="number">1</span>);</span><br><span class="line">        dp[u] = <span class="built_in">max</span>(dp[u], dp[v] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, -INF, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    DFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (ans + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-sequence"><a href="#C-sequence" class="headerlink" title="C. sequence"></a>C. sequence</h2><p>题意：求$max<em>{1\leq l \leq r \leq } {min(a</em>{l\cdots r}) \cdot sum(b_{l\cdots r})}$</p>
<p>思路：笛卡尔树维护最小值，线段树维护区间和。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3000010</span></span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line">ll b[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cartesian_Tree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> id, val, fa;</span><br><span class="line">        <span class="keyword">int</span> son[<span class="number">2</span>];</span><br><span class="line">        node() &#123;&#125;</span><br><span class="line">        node (<span class="keyword">int</span> id, <span class="keyword">int</span> val, <span class="keyword">int</span> fa) : id(id), val(val), fa(fa) &#123;</span><br><span class="line">            son[<span class="number">0</span>] = son[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N];</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    pii b[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t[<span class="number">0</span>] = node(<span class="number">0</span>, <span class="number">-1e9</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            t[i] = node(i, a[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (t[k].val &gt; t[i].val) &#123;</span><br><span class="line">                k = t[k].fa;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            t[i].son[<span class="number">0</span>] = t[k].son[<span class="number">1</span>];</span><br><span class="line">            t[k].son[<span class="number">1</span>] = i;</span><br><span class="line">            t[i].fa = k;</span><br><span class="line">            t[t[i].son[<span class="number">0</span>]].fa = i;</span><br><span class="line">        &#125;</span><br><span class="line">        root = t[<span class="number">0</span>].son[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lsze = DFS(t[u].son[<span class="number">0</span>]); </span><br><span class="line">        <span class="keyword">int</span> rsze = DFS(t[u].son[<span class="number">1</span>]);</span><br><span class="line">        b[t[u].id] = pii(lsze, rsze);</span><br><span class="line">        <span class="keyword">return</span> lsze + rsze + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;CT;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        ll Max, Min;</span><br><span class="line">        node() &#123;</span><br><span class="line">            Max = -INFLL;</span><br><span class="line">            Min = INFLL;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.Max = <span class="built_in">max</span>(Max, other.Max);</span><br><span class="line">            res.Min = <span class="built_in">min</span>(Min, other.Min);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N &lt;&lt; <span class="number">2</span>], resl, resr;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = node();</span><br><span class="line">            t[id].Max = t[id].Min = b[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        node res = node();</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) res = res + query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) res = res + query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> S=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//Input Correlation</span></span><br><span class="line">    <span class="keyword">char</span> buf[S],*H,*T;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(H==T) T=(H=buf)+fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(H==T) <span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> *H++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,fg=<span class="number">1</span>;<span class="keyword">char</span> c=Get();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>) c=Get();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) fg=<span class="number">-1</span>,c=Get();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=Get();</span><br><span class="line">        <span class="keyword">return</span> x*fg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=Get();<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'a'</span>||c&gt;<span class="string">'z'</span>) c=Get();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'a'</span>&amp;&amp;c&lt;=<span class="string">'z'</span>) s[++tot]=c,c=Get();</span><br><span class="line">        s[++tot]=<span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output Correlation</span></span><br><span class="line">    <span class="keyword">char</span> obuf[S],*oS=obuf,*oT=oS+S<span class="number">-1</span>,c,qu[<span class="number">55</span>];<span class="keyword">int</span> qr;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);oS=obuf;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;*oS++ =x;<span class="keyword">if</span>(oS==oT) <span class="built_in">flush</span>();&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">I</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(!x) putc(<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) putc(<span class="string">'-'</span>),x=-x;</span><br><span class="line">        <span class="keyword">while</span>(x) qu[++qr]=x%<span class="number">10</span>+<span class="string">'0'</span>,x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(qr) putc(qu[qr--]);</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prints</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) putc(s[i]);</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printd</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=(<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">floor</span>(x);</span><br><span class="line">        <span class="built_in">print</span>(t);putc(<span class="string">'.'</span>);x-=t;</span><br><span class="line">        <span class="keyword">while</span>(d--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> y=x*<span class="number">10</span>;x*=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> c=(<span class="keyword">int</span>)<span class="built_in">floor</span>(y);</span><br><span class="line">            putc(c+<span class="string">'0'</span>);x-=<span class="built_in">floor</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">read</span>();</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        b[i] = <span class="built_in">read</span>();</span><br><span class="line">        b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    CT.init();</span><br><span class="line">    CT.build(n, a);</span><br><span class="line">    CT.DFS(CT.root);</span><br><span class="line">    ll res = -INFLL;</span><br><span class="line">    seg.build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = i - CT.b[i].fi, r = i + CT.b[i].se;</span><br><span class="line">        seg.resl = seg.query(<span class="number">1</span>, <span class="number">0</span>, n, l - <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">        seg.resr = seg.query(<span class="number">1</span>, <span class="number">0</span>, n, i, r);</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="number">1l</span>l * a[i] * (seg.resr.Max - seg.resl.Min));</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="number">1l</span>l * a[i] * (seg.resr.Min - seg.resl.Max));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-free"><a href="#J-free" class="headerlink" title="J. free"></a>J. free</h2><p>题意：可以免费$k$条边的最短路</p>
<p>思路：$dis[i][j]$表示到达$i$，免费了$j$条边的代价，跑最短路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> w) : to(to), nxt(nxt), w(w) &#123;&#125;</span><br><span class="line">&#125; edge[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, T, K;</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edge[++tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[++tot] = Edge(u, head[v], w);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, k;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    qnode() &#123;&#125;;</span><br><span class="line">     </span><br><span class="line">    qnode(<span class="keyword">int</span> u, ll w, <span class="keyword">int</span> k) : u(u), w(w), k(k) &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INFLL, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    priority_queue&lt;qnode&gt; q;</span><br><span class="line">    dis[s][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    q.push(qnode(s, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        <span class="keyword">int</span> k = q.top().k;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (u == T) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            ll w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[u][k] + w &lt; dis[v][k]) &#123;</span><br><span class="line">                dis[v][k] = dis[u][k] + w;</span><br><span class="line">                q.push(qnode(v, dis[v][k], k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; K &amp;&amp; dis[u][k] &lt; dis[v][k + <span class="number">1</span>]) &#123;</span><br><span class="line">                dis[v][k + <span class="number">1</span>] = dis[u][k];</span><br><span class="line">                q.push(qnode(v, dis[v][k + <span class="number">1</span>], k + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;n, &amp;m, &amp;S, &amp;T, &amp;K);</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(S);</span><br><span class="line">    ll ans = INFLL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, dis[T][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="K-number"><a href="#K-number" class="headerlink" title="K. number"></a>K. number</h2><p>题意：给定一个数字串，问多少个子串可以被$300$，整除</p>
<p>思路：$dp[i][j]$表示$i$结尾，余数为$j$，$dp$转移即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">ll dp[N][<span class="number">301</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = <span class="built_in">strlen</span>(str + <span class="number">1</span>); i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = str[i] - <span class="string">'0'</span>;</span><br><span class="line">        dp[i][now]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">300</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> nxt = (j * <span class="number">10</span> + now) % <span class="number">300</span>;</span><br><span class="line">            dp[i][nxt] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += dp[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 Multi-University Training Contest 3</title>
    <url>/2019/07/29/2019-Multi-University-Training-Contest-3/</url>
    <content><![CDATA[<h2 id="B-Blow-up-the-city"><a href="#B-Blow-up-the-city" class="headerlink" title="B. Blow up the city"></a>B. Blow up the city</h2><p>题意：给出一个$DAG$，问删除一个点使得$a,b$其中一个点不能到达所有的出度为$0$的点的方案</p>
<p>思路：根据$DAG$维护支配树，那么方案数为$deep[a]+deep[b]-deep[LCA_{a, b}]-1$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEG 20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line"></span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt) &#123;</span><br><span class="line">            to = _to;</span><br><span class="line">            nxt = _nxt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> head[N], tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u]);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> fa[N][DEG], dep[N], d[N], sze[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        fa[v][<span class="number">0</span>] = u;</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i) &#123;</span><br><span class="line">            fa[v][i] = fa[fa[v][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!u) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">if</span> (!v) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">if</span> (dep[u] &gt; dep[v]) &#123;</span><br><span class="line">            swap(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> det = dep[v] - dep[u], i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (det &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                v = fa[v][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[u][i] == fa[v][i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">            v = fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GET</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lca = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = G[<span class="number">1</span>].head[u]; ~i; i = G[<span class="number">1</span>].edge[i].nxt) &#123;</span><br><span class="line">            lca = LCA(lca, G[<span class="number">1</span>].edge[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lca;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> S = n + <span class="number">1</span>;</span><br><span class="line">        add(S, S);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.push(i);</span><br><span class="line">                add(S, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = G[<span class="number">0</span>].head[u]; ~i; i = G[<span class="number">0</span>].edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = G[<span class="number">0</span>].edge[i].to;</span><br><span class="line">                --d[v];</span><br><span class="line">                <span class="keyword">if</span> (d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                    add(GET(v), v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        G[<span class="number">0</span>].Init(), G[<span class="number">1</span>].Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dep[i] = <span class="number">0</span>;</span><br><span class="line">            d[i] = <span class="number">0</span>;</span><br><span class="line">            sze[i] = <span class="number">0</span>;</span><br><span class="line">            fa[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[<span class="number">0</span>].addedge(v, u);</span><br><span class="line">            G[<span class="number">1</span>].addedge(u, v);</span><br><span class="line">            ++d[u];</span><br><span class="line">        &#125;</span><br><span class="line">        tree.solve();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dep[a] + dep[b] - dep[tree.LCA(a, b)] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Distribution-of-books"><a href="#D-Distribution-of-books" class="headerlink" title="D. Distribution of books"></a>D. Distribution of books</h2><p>题意：将$n$个数分为$k$段，每段起码一个值，$k$段以后可以丢弃，求最小的最大值。</p>
<p>思路：二分答案$x$，$f[i]$表示$i$元素末尾的最大段数，显然$j \rightarrow i$的条件是$sum[i] - sum[j] &lt;= x$，线段树统计这样的$j$的最大$f[j]$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> S=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//Input Correlation</span></span><br><span class="line">    <span class="keyword">char</span> buf[S],*H,*T;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(H==T) T=(H=buf)+fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(H==T) <span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> *H++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,fg=<span class="number">1</span>;<span class="keyword">char</span> c=Get();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>) c=Get();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) fg=<span class="number">-1</span>,c=Get();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=Get();</span><br><span class="line">        <span class="keyword">return</span> x*fg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=Get();<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'a'</span>||c&gt;<span class="string">'z'</span>) c=Get();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'a'</span>&amp;&amp;c&lt;=<span class="string">'z'</span>) s[++tot]=c,c=Get();</span><br><span class="line">        s[++tot]=<span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output Correlation</span></span><br><span class="line">    <span class="keyword">char</span> obuf[S],*oS=obuf,*oT=oS+S<span class="number">-1</span>,c,qu[<span class="number">55</span>];<span class="keyword">int</span> qr;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);oS=obuf;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;*oS++ =x;<span class="keyword">if</span>(oS==oT) <span class="built_in">flush</span>();&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">I</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(!x) putc(<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) putc(<span class="string">'-'</span>),x=-x;</span><br><span class="line">        <span class="keyword">while</span>(x) qu[++qr]=x%<span class="number">10</span>+<span class="string">'0'</span>,x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(qr) putc(qu[qr--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prints</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) putc(s[i]);</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printd</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=(<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">floor</span>(x);</span><br><span class="line">        <span class="built_in">print</span>(t);putc(<span class="string">'.'</span>);x-=t;</span><br><span class="line">        <span class="keyword">while</span>(d--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> y=x*<span class="number">10</span>;x*=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> c=(<span class="keyword">int</span>)<span class="built_in">floor</span>(y);</span><br><span class="line">            putc(c+<span class="string">'0'</span>);x-=<span class="built_in">floor</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400010</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll a[N], b[N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hash</span><span class="params">(ll *b)</span> </span>&#123;</span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>]);</span><br><span class="line">    b[<span class="number">0</span>] = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>]) - b - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>], x) - b; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> Max;</span><br><span class="line">        node() &#123;</span><br><span class="line">            Max = -INF;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.Max = <span class="built_in">max</span>(Max, other.Max);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].Max = <span class="built_in">max</span>(t[id].Max, x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, pos, x);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, x);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span> -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[id].Max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -INF;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) res = <span class="built_in">max</span>(res, query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    b[++b[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        b[++b[<span class="number">0</span>]] = a[i];</span><br><span class="line">        b[++b[<span class="number">0</span>]] = a[i] - x;</span><br><span class="line">    &#125;    </span><br><span class="line">    Hash(b);</span><br><span class="line">    seg.build(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>]);</span><br><span class="line">    seg.update(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>], <span class="built_in">get</span>(<span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = seg.query(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>], <span class="built_in">get</span>(a[i] - x), b[<span class="number">0</span>]) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f &gt;= k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        seg.update(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>], <span class="built_in">get</span>(a[i]), f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        n = <span class="built_in">read</span>(); k = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line">            a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ll l = <span class="number">-2e15</span>, r = <span class="number">1e9</span>, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">                res = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Fansblog"><a href="#F-Fansblog" class="headerlink" title="F. Fansblog"></a>F. Fansblog</h2><p>题意：找一个最大的素数$Q(Q &lt; P)$，问$Q!\%P$</p>
<p>思路：已知$(P-1)! \%P=P-1$，暴力找到$Q$，通过逆元得到$Q!\%P$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll p;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">2307</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">10</span>;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a * b - (ll)(a / (<span class="keyword">long</span> <span class="keyword">double</span>)p * b + <span class="number">1e-3</span>) * p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qmod</span><span class="params">(ll base, ll n, ll p)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    base %= p;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = mul(res, base, p);</span><br><span class="line">        &#125;</span><br><span class="line">        base = mul(base, base, p);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a, ll n)</span> </span>&#123;</span><br><span class="line">    ll m = n - <span class="number">1</span>, x, y;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(m &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">        m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    x = qmod(a, m, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; x = y, ++i) &#123;</span><br><span class="line">        y = mul(x, x, n);</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">miller_rabin</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (! (n &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(rd() % (n - <span class="number">1</span>) + <span class="number">1</span>, n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;p);</span><br><span class="line">        ll n;</span><br><span class="line">        <span class="keyword">for</span> (ll i = p - <span class="number">1</span>; ; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (miller_rabin(i)) &#123;</span><br><span class="line">                n = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = p - <span class="number">1</span>; i &gt; n; --i) &#123;</span><br><span class="line">            res = mul(res, qmod(i, p - <span class="number">2</span>, p), p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Find-the-answer"><a href="#G-Find-the-answer" class="headerlink" title="G. Find the answer"></a>G. Find the answer</h2><p>题意：对于每个$i$，可以修改$W<em>k(1\leq k &lt; i)=0$，问最小的修改数满足$\sum</em>{j=1}^iW_j\leq m$</p>
<p>思路：权值线段树上二分即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> S=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//Input Correlation</span></span><br><span class="line">    <span class="keyword">char</span> buf[S],*H,*T;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(H==T) T=(H=buf)+fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(H==T) <span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> *H++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,fg=<span class="number">1</span>;<span class="keyword">char</span> c=Get();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>) c=Get();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) fg=<span class="number">-1</span>,c=Get();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=Get();</span><br><span class="line">        <span class="keyword">return</span> x*fg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=Get();<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'a'</span>||c&gt;<span class="string">'z'</span>) c=Get();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'a'</span>&amp;&amp;c&lt;=<span class="string">'z'</span>) s[++tot]=c,c=Get();</span><br><span class="line">        s[++tot]=<span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output Correlation</span></span><br><span class="line">    <span class="keyword">char</span> obuf[S],*oS=obuf,*oT=oS+S<span class="number">-1</span>,c,qu[<span class="number">55</span>];<span class="keyword">int</span> qr;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);oS=obuf;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;*oS++ =x;<span class="keyword">if</span>(oS==oT) <span class="built_in">flush</span>();&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">I</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(!x) putc(<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) putc(<span class="string">'-'</span>),x=-x;</span><br><span class="line">        <span class="keyword">while</span>(x) qu[++qr]=x%<span class="number">10</span>+<span class="string">'0'</span>,x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(qr) putc(qu[qr--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prints</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) putc(s[i]);</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printd</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=(<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">floor</span>(x);</span><br><span class="line">        <span class="built_in">print</span>(t);putc(<span class="string">'.'</span>);x-=t;</span><br><span class="line">        <span class="keyword">while</span>(d--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> y=x*<span class="number">10</span>;x*=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> c=(<span class="keyword">int</span>)<span class="built_in">floor</span>(y);</span><br><span class="line">            putc(c+<span class="string">'0'</span>);x-=<span class="built_in">floor</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], b[N]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        ll sum; <span class="keyword">int</span> cnt;</span><br><span class="line">        node() &#123;</span><br><span class="line">            sum = cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node (ll sum, <span class="keyword">int</span> cnt) : sum(sum), cnt(cnt) &#123;&#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            res.sum = sum + other.sum;</span><br><span class="line">            res.cnt = cnt + other.cnt;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[id] = node();</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id].sum += b[l];</span><br><span class="line">            ++t[id].cnt;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) update(id &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line">        <span class="keyword">else</span> update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll need)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (need &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> need / b[l] + (need % b[l] != <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum &gt;= need) </span><br><span class="line">            <span class="keyword">return</span> query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, need);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt + query(id &lt;&lt; <span class="number">1</span>, l, mid, need - t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>]);</span><br><span class="line">    b[<span class="number">0</span>] = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>]) - b - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + b[<span class="number">0</span>], x) - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>();</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">read</span>(), b[++b[<span class="number">0</span>]] = a[i];</span><br><span class="line">        Hash(b);</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>]);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">            <span class="built_in">print</span>(seg.query(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>], sum - m));</span><br><span class="line">            putc(<span class="string">' '</span>);</span><br><span class="line">            seg.update(<span class="number">1</span>, <span class="number">1</span>, b[<span class="number">0</span>], <span class="built_in">get</span>(a[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">flush</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h2 id="I-K-Subsequence"><a href="#I-K-Subsequence" class="headerlink" title="I. K Subsequence"></a>I. K Subsequence</h2><p>题意：选择$k$段不相交的上升序列，使得权值和最大</p>
<p>思路：$Dijkstra$优化费用流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> S = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//Input Correlation</span></span><br><span class="line">    <span class="keyword">char</span> buf[S], *H, *T;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (H == T) T = (H = buf) + fread(buf, <span class="number">1</span>, S, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (H == T) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> *H++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, fg = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c = Get();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c) &amp;&amp; c != <span class="string">'-'</span>) c = Get();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>) fg = <span class="number">-1</span>, c = Get();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = Get();</span><br><span class="line">        <span class="keyword">return</span> x * fg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = Get();</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'a'</span> || c &gt; <span class="string">'z'</span>) c = Get();</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) s[++tot] = c, c = Get();</span><br><span class="line">        s[++tot] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Output Correlation</span></span><br><span class="line">    <span class="keyword">char</span> obuf[S], *oS = obuf, *oT = oS + S - <span class="number">1</span>, c, qu[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">int</span> qr;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fwrite(obuf, <span class="number">1</span>, oS - obuf, <span class="built_in">stdout</span>);</span><br><span class="line">        oS = obuf;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line">        *oS++ = x;</span><br><span class="line">        <span class="keyword">if</span> (oS == oT) <span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">I</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (!x) putc(<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">        <span class="keyword">while</span> (x) qu[++qr] = x % <span class="number">10</span> + <span class="string">'0'</span>, x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (qr) putc(qu[qr--]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prints</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) putc(s[i]);</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printd</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t = (<span class="keyword">long</span> <span class="keyword">long</span>) <span class="built_in">floor</span>(x);</span><br><span class="line">        <span class="built_in">print</span>(t);</span><br><span class="line">        putc(<span class="string">'.'</span>);</span><br><span class="line">        x -= t;</span><br><span class="line">        <span class="keyword">while</span> (d--) &#123;</span><br><span class="line">            <span class="keyword">double</span> y = x * <span class="number">10</span>;</span><br><span class="line">            x *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> c = (<span class="keyword">int</span>) <span class="built_in">floor</span>(y);</span><br><span class="line">            putc(c + <span class="string">'0'</span>);</span><br><span class="line">            x -= <span class="built_in">floor</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, capacity, cost, rev;</span><br><span class="line"></span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    edge(<span class="keyword">int</span> to, <span class="keyword">int</span> _capacity, <span class="keyword">int</span> _cost, <span class="keyword">int</span> _rev) : to(to), capacity(_capacity), cost(_cost), rev(_rev) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Min_Cost_Max_Flow</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> V, H[N + <span class="number">5</span>], dis[N + <span class="number">5</span>], PreV[N + <span class="number">5</span>], PreE[N + <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;edge&gt; G[N + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用前初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        V = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; ++i)G[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加边</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        G[from].push_back(edge(to, cap, cost, G[to].<span class="built_in">size</span>()));</span><br><span class="line">        G[to].push_back(edge(from, <span class="number">0</span>, -cost, G[from].<span class="built_in">size</span>() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//flow是自己传进去的变量，就是最后的最大流，返回的是最小费用</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Min_cost_max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f, <span class="keyword">int</span> &amp;flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(H, H + <span class="number">1</span> + V, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (f) &#123;</span><br><span class="line">            priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line">            <span class="built_in">fill</span>(dis, dis + <span class="number">1</span> + V, INF);</span><br><span class="line">            dis[s] = <span class="number">0</span>;</span><br><span class="line">            q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, s));</span><br><span class="line">            <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q.top();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">int</span> v = now.second;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &lt; now.first)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                    edge &amp;e = G[v][i];</span><br><span class="line">                    <span class="keyword">if</span> (e.capacity &gt; <span class="number">0</span> &amp;&amp; dis[e.to] &gt; dis[v] + e.cost + H[v] - H[e.to]) &#123;</span><br><span class="line">                        dis[e.to] = dis[v] + e.cost + H[v] - H[e.to];</span><br><span class="line">                        PreV[e.to] = v;</span><br><span class="line">                        PreE[e.to] = i;</span><br><span class="line">                        q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(dis[e.to], e.to));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[t] == INF)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; ++i)H[i] += dis[i];</span><br><span class="line">            <span class="keyword">int</span> d = f;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = t; v != s; v = PreV[v])d = <span class="built_in">min</span>(d, G[PreV[v]][PreE[v]].capacity);</span><br><span class="line">            f -= d;</span><br><span class="line">            flow += d;</span><br><span class="line">            res += d * H[t];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = t; v != s; v = PreV[v]) &#123;</span><br><span class="line">                edge &amp;e = G[PreV[v]][PreE[v]];</span><br><span class="line">                e.capacity -= d;</span><br><span class="line">                G[v][e.rev].capacity += d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Max_cost_max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f, <span class="keyword">int</span> &amp;flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(H, H + <span class="number">1</span> + V, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (f) &#123;</span><br><span class="line">            priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">            <span class="built_in">fill</span>(dis, dis + <span class="number">1</span> + V, -INF);</span><br><span class="line">            dis[s] = <span class="number">0</span>;</span><br><span class="line">            q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, s));</span><br><span class="line">            <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q.top();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">int</span> v = now.second;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; now.first)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                    edge &amp;e = G[v][i];</span><br><span class="line">                    <span class="keyword">if</span> (e.capacity &gt; <span class="number">0</span> &amp;&amp; dis[e.to] &lt; dis[v] + e.cost + H[v] - H[e.to]) &#123;</span><br><span class="line">                        dis[e.to] = dis[v] + e.cost + H[v] - H[e.to];</span><br><span class="line">                        PreV[e.to] = v;</span><br><span class="line">                        PreE[e.to] = i;</span><br><span class="line">                        q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(dis[e.to], e.to));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[t] == -INF)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; ++i)H[i] += dis[i];</span><br><span class="line">            <span class="keyword">int</span> d = f;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = t; v != s; v = PreV[v])d = <span class="built_in">min</span>(d, G[PreV[v]][PreE[v]].capacity);</span><br><span class="line">            f -= d;</span><br><span class="line">            flow += d;</span><br><span class="line">            res += d * H[t];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = t; v != s; v = PreV[v]) &#123;</span><br><span class="line">                edge &amp;e = G[PreV[v]][PreE[v]];</span><br><span class="line">                e.capacity -= d;</span><br><span class="line">                G[v][e.rev].capacity += d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; MCMF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, s1, s2, t, a[N], flow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> cas = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">        n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">        s1 = <span class="number">0</span>, s2 = <span class="number">1</span>, t = <span class="number">2</span> * n + <span class="number">2</span>;</span><br><span class="line">        MCMF.Init(t);</span><br><span class="line">        MCMF.Add_Edge(s1, s2, k, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line">            MCMF.Add_Edge(s2, i &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            MCMF.Add_Edge(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            MCMF.Add_Edge(i &lt;&lt; <span class="number">1</span>, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">1</span>, -a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt;= a[j]) &#123;</span><br><span class="line">                    MCMF.Add_Edge(j &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, i &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(-MCMF.Min_cost_max_flow(s1, t, INF, flow));</span><br><span class="line">        putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">flush</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HUD多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 Multi-University Training Contest 2</title>
    <url>/2019/07/24/2019-Multi-University-Training-Contest-2/</url>
    <content><![CDATA[<h2 id="B-Beauty-Of-Unimodal-Sequence"><a href="#B-Beauty-Of-Unimodal-Sequence" class="headerlink" title="B. Beauty Of Unimodal Sequence"></a>B. Beauty Of Unimodal Sequence</h2><h2 id="E-Everything-Is-Generated-In-Equal-Probability"><a href="#E-Everything-Is-Generated-In-Equal-Probability" class="headerlink" title="E. Everything Is Generated In Equal Probability"></a>E. Everything Is Generated In Equal Probability</h2><p>题意：给定一个$N$，等概率从$N$中选取一个$n$，等概率生成一个$n$的序列，然后执行伪代码，求逆序对期望</p>
<p>思路：打表得$\frac{n^ 2-1}{9}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % p;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll inv = qpow(<span class="number">9</span>, p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        ll ans = (n * n - <span class="number">1</span>) % p * inv % p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Harmonious-Army"><a href="#H-Harmonious-Army" class="headerlink" title="H. Harmonious Army"></a>H. Harmonious Army</h2><p>题意：有$n$个士兵，每个士兵两种身份$Mage\;or\;Warrior$，有$m$对关系，如果是两个$Warriors$，则属性增加$a$，如果是两个$Mages$，属性增加$c$，否则增加$b(b=\frac{a}{4}+\frac{c}{2})$，问最大属性值。</p>
<p>思路：将问题转换成，有$m$对关系，如果是两个$Warriors$，则属性较少$b+c$，如果是两个$Mages$，属性增加$a+b$，否则增加$a+c$，问最大属性值。</p>
<p>那么建立如下网络流，可以得到 $ a = b =（A + B）/ 2， c = d = (C + B) / 2, e = -B + (A + C) / 2$ </p>
<p><img src="/upload/2019 Multi-University Training Contest 2/1008.png" alt="1008"></p>
<p>答案为总的$a+b+c$减去最小割</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 510</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dicnic</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line">        db flow;</span><br><span class="line"></span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, db flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">    &#125; edge[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> head[N], dep[N];</span><br><span class="line">    <span class="keyword">int</span> S, T, tot;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, db w, db rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u], w);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(S);</span><br><span class="line">        dep[S] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[T] &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, db f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">        db w, used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &gt; <span class="number">0</span> &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">                edge[i].flow -= w;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">                used += w;</span><br><span class="line">                <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">db <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        db ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            ans += DFS(S, INFLL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dicnic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> u, v, a, b, c;</span><br><span class="line">ll w1[N], w2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(w1, <span class="number">0</span>, <span class="keyword">sizeof</span> w1);</span><br><span class="line">        <span class="built_in">memset</span>(w2, <span class="number">0</span>, <span class="keyword">sizeof</span> w2);</span><br><span class="line">        dicnic.Init();</span><br><span class="line">        dicnic.S = <span class="number">0</span>, dicnic.T = n + <span class="number">1</span>;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;u, &amp;v, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            w1[u] += a + b;</span><br><span class="line">            w1[v] += a + b;</span><br><span class="line">            w2[u] += b + c;</span><br><span class="line">            w2[v] += b + c;</span><br><span class="line">            dicnic.addedge(u, v, -b * <span class="number">1.0</span> + a / <span class="number">2.0</span> + c / <span class="number">2.0</span>);</span><br><span class="line">            dicnic.addedge(v, u, -b * <span class="number">1.0</span> + a / <span class="number">2.0</span> + c / <span class="number">2.0</span>);</span><br><span class="line">            ans += a + b + c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dicnic.addedge(dicnic.S, i, w1[i] / <span class="number">2.0</span>);</span><br><span class="line">            dicnic.addedge(i, dicnic.T, w2[i] / <span class="number">2.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ll) round(ans - dicnic.solve());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Just-Skip-The-Problem"><a href="#J-Just-Skip-The-Problem" class="headerlink" title="J. Just Skip The Problem"></a>J. Just Skip The Problem</h2><p>签到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = (ll) <span class="number">1e6</span> + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] * i % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[<span class="built_in">min</span>(<span class="number">1l</span>l * n, p)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="K-Keen-On-Everything-But-Triangle"><a href="#K-Keen-On-Everything-But-Triangle" class="headerlink" title="K. Keen On Everything But Triangle"></a>K. Keen On Everything But Triangle</h2><p>题意：问区间$[L,R]$内能组成的三角形最大周长</p>
<p>思路：线段树维护区间内最大的$50$个数，求三角形周长。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n, q, a[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">55</span>]; </span><br><span class="line">        node() &#123;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            a[++a[<span class="number">0</span>]] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">            node res = node();</span><br><span class="line">            <span class="keyword">int</span> it = <span class="number">1</span>, it2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (res.a[<span class="number">0</span>] &lt;= <span class="number">50</span> &amp;&amp; (it &lt;= a[<span class="number">0</span>] || it2 &lt;= other.a[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it &gt; a[<span class="number">0</span>]) &#123;</span><br><span class="line">                    res.add(other.a[it2]);</span><br><span class="line">                    ++it2;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it2 &gt; other.a[<span class="number">0</span>]) &#123;</span><br><span class="line">                    res.add(a[it]);</span><br><span class="line">                    ++it;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[it] &gt; other.a[it2]) &#123;</span><br><span class="line">                        res.add(a[it]);</span><br><span class="line">                        ++it;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.add(other.a[it2]);</span><br><span class="line">                        ++it2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N &lt;&lt; <span class="number">2</span>], res;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[id] = node();</span><br><span class="line">            t[id].add(a[l]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        t[id] = t[id &lt;&lt; <span class="number">1</span>] + t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            res = res + t[id];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid) query(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid) query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            ll res = <span class="number">-1</span>;</span><br><span class="line">            seg.res = SEG::node();</span><br><span class="line">            seg.query(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">            <span class="keyword">int</span> sze = seg.res.a[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sze - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">                ll A = seg.res.a[i], B = seg.res.a[i + <span class="number">1</span>], C = seg.res.a[i + <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (A &lt; B + C) &#123;</span><br><span class="line">                    res = A + B + C;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L-Longest-Subarray"><a href="#L-Longest-Subarray" class="headerlink" title="L. Longest Subarray"></a>L. Longest Subarray</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HDU多校</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 69 (Rated for Div. 2)</title>
    <url>/2019/07/23/Educational-Codeforces-Round-69-(Rated-for-Div.-2)/</url>
    <content><![CDATA[<h2 id="A-DIY-Wooden-Ladder"><a href="#A-DIY-Wooden-Ladder" class="headerlink" title="A. DIY Wooden Ladder"></a>A. DIY Wooden Ladder</h2><p>签到。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> ans = n - <span class="number">2</span>;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, a[n] - <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, a[n - <span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Pillars"><a href="#B-Pillars" class="headerlink" title="B.Pillars"></a>B.Pillars</h2><p>题意：有$n$根柱子，每根柱子上有一个磁盘，每个磁盘都有自己的半径，第$i$根柱子上的磁盘能移动到第$j$根柱子上的前提是：</p>
<ul>
<li>$i$和$j$相邻</li>
<li>第$i$根柱子上只有一个磁盘</li>
<li>第$j$根柱子没有磁盘或者顶部磁盘半径大于第$i$根柱子</li>
</ul>
<p>问能否将所有磁盘移动到一根柱子上。</p>
<p>思路：很显然只能先递增后递减的形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; Max) &#123;</span><br><span class="line">            Max = a[i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= pos; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i + <span class="number">1</span>] &gt; a[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(solve() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Array-Splitting"><a href="#C-Array-Splitting" class="headerlink" title="C.Array Splitting"></a>C.Array Splitting</h2><p>题意：有一个长度为$n$的序列$a$，将序列分成$k$段，使得$\sum_{i=1}^{k}(max(i)-min(i))$最小，其中$max(i)$表示第$i$段最大值，$min(i)$表示第$i$段最小值，且保证$a_i$非降序。</p>
<p>思路：$\sum<em>{i=1}^k (max(i)-min(i))=a_n-a_1+\sum</em>{i=1}^{k-1} a<em>{b_i}-a</em>{b_i+1} $其中$b_i$表示第$i$段末尾下标，很显然贪心选取$k-1$个即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k) != EOF) &#123;</span><br><span class="line">        vec.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">                vec.push_back(a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        ll ans = a[n] - a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = vec.<span class="built_in">size</span>(), i = len - <span class="number">1</span>; i &gt;= len - k + <span class="number">1</span>; --i) &#123;</span><br><span class="line">            ans -= vec[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Yet-Another-Subarray-Problem"><a href="#D-Yet-Another-Subarray-Problem" class="headerlink" title="D.Yet Another Subarray Problem"></a>D.Yet Another Subarray Problem</h2><p>题意：给出一个长度为$n$的序列$a$，以及$m,k$，求$\sum_{i=l}^{r}a_i-k\lceil \frac{r-l+1}{m}\rceil$的最大值</p>
<p>思路：$dp[i]$表示到$i$节点作为末尾的最大值，对于每个节点$i$很显然只能选取$i$前面不到$m$个数，或者选满$m$个数后再加上$dp[i-m]$，由此转移下去去中间值最大值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll a[N];</span><br><span class="line">ll dp[N];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ll Max = a[i], sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span> &amp;&amp; j &gt;= i - m + <span class="number">1</span>; --j) &#123;</span><br><span class="line">                sum += a[j];</span><br><span class="line">                Max = <span class="built_in">max</span>(Max, sum);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>(Max - k, sum - k + dp[<span class="built_in">max</span>(i - m, <span class="number">0</span>)]));</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Culture-Code"><a href="#E-Culture-Code" class="headerlink" title="E.Culture Code"></a>E.Culture Code</h2><p>题意：有$n$个俄罗斯套娃，每个套娃有两个属性$in,out(out&gt;in)$，套娃$i$能放在$j$对的前提是$out_i&lt;=in_j$。</p>
<ul>
<li>定义一组套娃的额外空间为$in<em>{i_1}+(in</em>{i<em>2}-out</em>{i<em>1})+(in</em>{i<em>3}-out</em>{i<em>2})+\cdots+(in</em>{i<em>k}-out</em>{i_{k-1}})$，其中$i_1,i_2,\cdots,i_k$为这组套娃的下标。</li>
<li>定义一组套娃是个极大套娃组：当且仅当不能再有另外一个套娃套在他们身上了。</li>
</ul>
<p>询问有多少种极大套娃组的额外空间最小</p>
<p>思路：$f[i]$表示使用$i$的最小额外空间，$g[i]$为使用$i$的方案数。对于每个套娃，比它大的最小的俄罗斯套娃。如果和$i+1$套娃的额外空间相同，则加上$i+1$的方案数，如果比$i+1$套娃的额外空间大，则舍弃当前套娃的方案数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = (ll) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pll a[N];</span><br><span class="line">ll f[N], g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;x, ll y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= p) &#123;</span><br><span class="line">        x -= p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;a[i].second, &amp;a[i].first);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        f[n + <span class="number">1</span>] = INFLL;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = lower_bound(a + i, a + <span class="number">1</span> + n, pll(a[i].second, <span class="number">-1</span>)) - a;</span><br><span class="line">            <span class="keyword">if</span> (pos == n + <span class="number">1</span>) &#123;</span><br><span class="line">                f[i] = a[i].first;</span><br><span class="line">                g[i] = <span class="number">1l</span>l;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i] = a[i].first - a[i].second + f[pos];</span><br><span class="line">                g[i] = g[pos];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f[i] == f[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                add(g[i], g[i + <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f[i] &gt; f[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                f[i] = f[i + <span class="number">1</span>];</span><br><span class="line">                g[i] = g[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, g[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 Multi-University Training Contest 1</title>
    <url>/2019/07/22/2019-Multi-University-Training-Contest-1/</url>
    <content><![CDATA[<h2 id="D-Vacation"><a href="#D-Vacation" class="headerlink" title="D. Vacation"></a>D. Vacation</h2><p>题意：有$n+1$辆车，每辆车有自己的长度，距离终点时间，速度。求第$0$辆车到达终点时间。其中不能超车，且车过终点后依旧向前行驶</p>
<p>思路：枚举每个车作为某个连续段的队头，然后取$Max$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    db l, s, v;</span><br><span class="line">&#125; a[N];</span><br><span class="line">db sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i].l);</span><br><span class="line">            sum += a[i].l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i].s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">        sum -= a[n].l;</span><br><span class="line">        db ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (sum + a[i].s) / a[i].v);</span><br><span class="line">            sum -= a[i].l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Path"><a href="#E-Path" class="headerlink" title="E. Path"></a>E. Path</h2><p>题意：破坏一条路径的代价为路径长度，求破坏所有最短路的最小代价</p>
<p>思路：跑一边最短路后重建图跑最大流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dicnic</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line">        ll flow;</span><br><span class="line"></span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, ll flow) : to(to), nxt(nxt), flow(flow) &#123;&#125;</span><br><span class="line">    &#125; edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> head[N], tot;</span><br><span class="line">    <span class="keyword">int</span> dep[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = Edge(v, head[u], w);</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = Edge(u, head[v], rw);</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(<span class="number">1</span>);</span><br><span class="line">        dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dep[edge[i].to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[n] &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ll <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, ll f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == n || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">        ll w, used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].flow &amp;&amp; dep[edge[i].to] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                w = DFS(edge[i].to, <span class="built_in">min</span>(f - used, edge[i].flow));</span><br><span class="line">                edge[i].flow -= w;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].flow += w;</span><br><span class="line">                used += w;</span><br><span class="line">                <span class="keyword">if</span> (used == f) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!used) dep[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ll <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            ans += DFS(<span class="number">1</span>, INFLL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dicnic;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, to, nxt, w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> u, <span class="keyword">int</span> to, <span class="keyword">int</span> nxt, <span class="keyword">int</span> w) : u(u), to(to), nxt(nxt), w(w) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    qnode() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    qnode(<span class="keyword">int</span> u, ll w) : u(u), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line">ll dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(u, v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;qnode&gt; q;</span><br><span class="line">    q.push(qnode(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            ll w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(qnode(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            addedge(u, v, w);</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra();</span><br><span class="line">        dicnic.Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[i].u;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            ll w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] == dis[u] + w) &#123;</span><br><span class="line">                dicnic.addedge(u, v, w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dicnic.solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-String"><a href="#I-String" class="headerlink" title="I. String"></a>I. String</h2><p>题意：构造一个子序列，长度为$k$，且各个字母$i$，出现次数在$l_i-r_i$之间</p>
<p>思路：贪心从小到大枚举每一位能否放在答案中，检查放入后剩余后缀串能否满足限制</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">char</span> s[N], ans[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N][<span class="number">26</span>], used[N], l[N], r[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">            cnt[i][j] = cnt[i + <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i][s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        G[s[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator head[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">        head[i] = G[i].<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[j] == r[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (head[j] == G[j].<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (head[j] != G[j].<span class="built_in">end</span>() &amp;&amp; *head[j] &lt;= lst) head[j]++;</span><br><span class="line">            <span class="keyword">if</span> (head[j] == G[j].<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            used[j]++;</span><br><span class="line">            <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> now = *head[j], need = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; <span class="number">26</span>; ++o) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[now + <span class="number">1</span>][o] + used[o] &lt; l[o]) &#123;</span><br><span class="line">                    f = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                need += <span class="built_in">max</span>(l[o] - used[o], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (need &gt; k - i) &#123;</span><br><span class="line">                f = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">0</span>) &#123;</span><br><span class="line">                used[j]--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[i] = j + <span class="string">'a'</span>;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                lst = now;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[k + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, s + <span class="number">1</span>, &amp;k) != EOF) &#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, l + i, r + i);</span><br><span class="line">            G[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span> used);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HUD多校</tag>
      </tags>
  </entry>
  <entry>
    <title>黑科技</title>
    <url>/2019/07/20/%E9%BB%91%E7%A7%91%E6%8A%80/</url>
    <content><![CDATA[<h2 id="BM线性递推"><a href="#BM线性递推" class="headerlink" title="BM线性递推"></a>BM线性递推</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//O(n^2) n是传入的数</span></span><br><span class="line"><span class="comment">//输入的n是第几个数 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a,ll b)</span> </span>&#123;ll res=<span class="number">1</span>;a%=mod; assert(b&gt;=<span class="number">0</span>); <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line">ll _,n;</span><br><span class="line"><span class="keyword">namespace</span> linear_seq&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10010</span>;</span><br><span class="line">    ll res[N],base[N],_c[N],_md[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; Md;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,k+k) _c[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (a[i]) rep(j,<span class="number">0</span>,k) _c[i+j]=(_c[i+j]+a[i]*b[j])%mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k+k<span class="number">-1</span>;i&gt;=k;i--) <span class="keyword">if</span> (_c[i])</span><br><span class="line">            rep(j,<span class="number">0</span>,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) a[i]=_c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n,VI a,VI b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>,pnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k=SZ(a);</span><br><span class="line">        assert(SZ(a)==SZ(b));</span><br><span class="line">        rep(i,<span class="number">0</span>,k) _md[k<span class="number">-1</span>-i]=-a[i];_md[k]=<span class="number">1</span>;</span><br><span class="line">        Md.<span class="built_in">clear</span>();</span><br><span class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (_md[i]!=<span class="number">0</span>) Md.push_back(i);</span><br><span class="line">        rep(i,<span class="number">0</span>,k) res[i]=base[i]=<span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l&lt;&lt;pnt)&lt;=n) pnt++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p=pnt;p&gt;=<span class="number">0</span>;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            mul(res,res,k);</span><br><span class="line">            <span class="keyword">if</span> ((n&gt;&gt;p)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) res[i+<span class="number">1</span>]=res[i];res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                rep(j,<span class="number">0</span>,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) ans=(ans+res[i]*b[i])%mod;</span><br><span class="line">        <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span> </span>&#123;</span><br><span class="line">        VI C(1,1),B(1,1);</span><br><span class="line">        <span class="keyword">int</span> L=<span class="number">0</span>,m=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">        rep(n,<span class="number">0</span>,SZ(s)) &#123;</span><br><span class="line">            ll d=<span class="number">0</span>;</span><br><span class="line">            rep(i,<span class="number">0</span>,L+<span class="number">1</span>) d=(d+(ll)C[i]*s[n-i])%mod;</span><br><span class="line">            <span class="keyword">if</span> (d==<span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span>*L&lt;=n) &#123;</span><br><span class="line">                VI T=C;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                L=n+<span class="number">1</span>-L; B=T; b=d; m=<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a,ll n)</span></span>&#123;</span><br><span class="line">        VI c=BM(a);</span><br><span class="line">        c.erase(c.<span class="built_in">begin</span>());</span><br><span class="line">        rep(i,<span class="number">0</span>,SZ(c)) c[i]=(mod-c[i])%mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n,c,VI(a.<span class="built_in">begin</span>(),a.<span class="built_in">begin</span>()+SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">40</span>,<span class="number">52</span>,<span class="number">67</span>,<span class="number">86</span>,<span class="number">110</span>,<span class="number">141</span>,<span class="number">181</span>,<span class="number">233</span>,<span class="number">300</span>,<span class="number">386</span>,<span class="number">496</span>,<span class="number">637</span>&#125;;</span><br><span class="line">        <span class="comment">// n = v.size();</span></span><br><span class="line">        <span class="comment">// v.push_back(&#123;2,3,4,5,7,9,12,15,19,24,31,40,52,67,86,110,141,181,233,300,386,496,637&#125;);      //至少8项，越多越好。 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,linear_seq::gao(v,n<span class="number">-1</span>)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自适应辛普森积分"><a href="#自适应辛普森积分" class="headerlink" title="自适应辛普森积分"></a>自适应辛普森积分</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Simpson公式用到的函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span><span class="comment">//三点Simpson法，这里要求F是一个全局函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> c = a + (b - a) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> (F(a) + <span class="number">4</span> * F(c) + F(b))*(b - a) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps, <span class="keyword">double</span> A)</span><span class="comment">//自适应Simpson公式（递归过程）。已知整个区间[a,b]上的三点Simpson值A</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> c = a + (b - a) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">double</span> L = simpson(a, c), R = simpson(c, b);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">fabs</span>(L + R - A) &lt;= <span class="number">15</span> * eps)<span class="keyword">return</span> L + R + (L + R - A) / <span class="number">15.0</span>;</span><br><span class="line">	<span class="keyword">return</span> asr(a, c, eps / <span class="number">2</span>, L) + asr(c, b, eps / <span class="number">2</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps)</span><span class="comment">//自适应Simpson公式（主过程）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> asr(a, b, eps, simpson(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拉格朗日插指"><a href="#拉格朗日插指" class="headerlink" title="拉格朗日插指"></a>拉格朗日插指</h2><p>// 适用范围，求n次多项式第x项的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> polysum &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> D=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">    ll a[D],f[D],g[D],p[D],p1[D],p2[D],b[D],h[D][<span class="number">2</span>],C[D];</span><br><span class="line">    <span class="function">ll <span class="title">powmod</span><span class="params">(ll a,ll b)</span></span>&#123;ll res=<span class="number">1</span>;a%=mod;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line">    <span class="comment">//..........................</span></span><br><span class="line">   <span class="comment">// 已知a_i 的d次多项式，求第n项</span></span><br><span class="line">    <span class="function">ll <span class="title">calcn</span><span class="params">(<span class="keyword">int</span> d,ll *a,ll n)</span> </span>&#123; <span class="comment">// a[0].. a[d]  a[n] </span></span><br><span class="line">        <span class="keyword">if</span> (n&lt;=d) <span class="keyword">return</span> a[n];</span><br><span class="line">        p1[<span class="number">0</span>]=p2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,d+<span class="number">1</span>) &#123;</span><br><span class="line">            ll t=(n-i+mod)%mod;</span><br><span class="line">            p1[i+<span class="number">1</span>]=p1[i]*t%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,d+<span class="number">1</span>) &#123;</span><br><span class="line">            ll t=(n-d+i+mod)%mod;</span><br><span class="line">            p2[i+<span class="number">1</span>]=p2[i]*t%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,d+<span class="number">1</span>) &#123;</span><br><span class="line">            ll t=g[i]*g[d-i]%mod*p1[i]%mod*p2[d-i]%mod*a[i]%mod;</span><br><span class="line">            <span class="keyword">if</span> ((d-i)&amp;<span class="number">1</span>) ans=(ans-t+mod)%mod;</span><br><span class="line">            <span class="keyword">else</span> ans=(ans+t)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化，初始化的时候记得将D的值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">        f[<span class="number">0</span>]=f[<span class="number">1</span>]=g[<span class="number">0</span>]=g[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,M+<span class="number">5</span>) f[i]=f[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        g[M+<span class="number">4</span>]=powmod(f[M+<span class="number">4</span>],mod<span class="number">-2</span>);</span><br><span class="line">        per(i,<span class="number">1</span>,M+<span class="number">4</span>) g[i]=g[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 已知a_i，并且知道a_i是m次多项式</span></span><br><span class="line">   <span class="function">ll <span class="title">polysum</span><span class="params">(ll m,ll *a,ll n)</span> </span>&#123; <span class="comment">// a[0].. a[m] \sum_&#123;i=0&#125;^&#123;n&#125; a[i]</span></span><br><span class="line">        ll b[D];</span><br><span class="line">        ll b[D];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) b[i]=a[i];</span><br><span class="line">        b[m+<span class="number">1</span>]=calcn(m,b,m+<span class="number">1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,m+<span class="number">2</span>) b[i]=(b[i<span class="number">-1</span>]+b[i])%mod;</span><br><span class="line">        <span class="keyword">return</span> calcn(m+<span class="number">1</span>,b,n);<span class="comment">// m次多项式的和是m+1 次多项式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">qpolysum</span><span class="params">(ll R,ll n,ll *a,ll m)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// a[0].. a[m] \sum_&#123;i=0&#125;^&#123;n-1&#125; a[i]*R^i</span></span><br><span class="line">        <span class="keyword">if</span> (R==<span class="number">1</span>) <span class="keyword">return</span> polysum(n,a,m);</span><br><span class="line">        a[m+<span class="number">1</span>]=calcn(m,a,m+<span class="number">1</span>);</span><br><span class="line">        ll r=powmod(R,mod<span class="number">-2</span>),p3=<span class="number">0</span>,p4=<span class="number">0</span>,c,ans;</span><br><span class="line">        h[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;h[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,m+<span class="number">2</span>) &#123;</span><br><span class="line">            h[i][<span class="number">0</span>]=(h[i<span class="number">-1</span>][<span class="number">0</span>]+a[i<span class="number">-1</span>])*r%mod;</span><br><span class="line">            h[i][<span class="number">1</span>]=h[i<span class="number">-1</span>][<span class="number">1</span>]*r%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,m+<span class="number">2</span>) &#123;</span><br><span class="line">            ll t=g[i]*g[m+<span class="number">1</span>-i]%mod;</span><br><span class="line">            <span class="keyword">if</span> (i&amp;<span class="number">1</span>) p3=((p3-h[i][<span class="number">0</span>]*t)%mod+mod)%mod,p4=((p4-h[i][<span class="number">1</span>]*t)%mod+mod)%mod;</span><br><span class="line">            <span class="keyword">else</span> p3=(p3+h[i][<span class="number">0</span>]*t)%mod,p4=(p4+h[i][<span class="number">1</span>]*t)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        c=powmod(p4,mod<span class="number">-2</span>)*(mod-p3)%mod;</span><br><span class="line">        rep(i,<span class="number">0</span>,m+<span class="number">2</span>) h[i][<span class="number">0</span>]=(h[i][<span class="number">0</span>]+h[i][<span class="number">1</span>]*c)%mod;</span><br><span class="line">        rep(i,<span class="number">0</span>,m+<span class="number">2</span>) C[i]=h[i][<span class="number">0</span>];</span><br><span class="line">        ans=(calcn(m,C,n)*powmod(R,n)-c)%mod;</span><br><span class="line">        <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// polysum::init();</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第二场）</title>
    <url>/2019/07/20/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-Eddy-Walker"><a href="#A-Eddy-Walker" class="headerlink" title="A. Eddy Walker"></a>A. Eddy Walker</h2><p>题意：有$n$个点，刚开始在$0$号点，每次等概率的往左右走，为最终停留在$m$点的概率</p>
<p>思路：打表后发现概率为$\frac{1}{n - 1}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = (ll) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % p;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            ans *= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = ans * qpow(n - <span class="number">1</span>, p - <span class="number">2</span>) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Eddy-Walker-2"><a href="#B-Eddy-Walker-2" class="headerlink" title="B. Eddy Walker 2"></a>B. Eddy Walker 2</h2><p>题意：从$0$开始，每次有$\frac{1}{k}$的概率走$1,2,\cdots.k$步，问最后停留在$n$的概率</p>
<p>思路：$f[i]$表示最后停留在$i$点的概率，那么$f[i]=\frac{1}{k} \cdot \sum_{j=1}^{k} f[i - j]$，BM递推即可…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll n, m, k, inv2, invk;</span><br><span class="line">ll f[N], g[N], fac[N], inv[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qmod</span><span class="params">(ll base, ll n)</span> </span>&#123;</span><br><span class="line">    base %= p;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * base % p;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * base % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;x, ll y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= p) x -= p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, n) for (int i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="comment">// head</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _;</span><br><span class="line"><span class="keyword">namespace</span> linear_seq &#123;</span><br><span class="line">    ll res[N], base[N], _c[N], _md[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Md;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        rep(i, <span class="number">0</span>, k + k) _c[i] = <span class="number">0</span>;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (a[i]) rep(j, <span class="number">0</span>, k) _c[i + j] = (_c[i + j] + a[i] * b[j]) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k + k - <span class="number">1</span>; i &gt;= k; i--)</span><br><span class="line">            <span class="keyword">if</span> (_c[i])</span><br><span class="line">                rep(j, <span class="number">0</span>, SZ(Md)) _c[i - k + Md[j]] = (_c[i - k + Md[j]] - _c[i] * _md[Md[j]]) % mod;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) a[i] = _c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n, VI a, VI b)</span> </span>&#123; <span class="comment">// a 系数 b 初值 b[n+1]=a[0]*b[n]+...</span></span><br><span class="line">        <span class="comment">//        printf("%d\n",SZ(b));</span></span><br><span class="line">        ll ans = <span class="number">0</span>, pnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = SZ(a);</span><br><span class="line">        assert(SZ(a) == SZ(b));</span><br><span class="line">        rep(i, <span class="number">0</span>, k) _md[k - <span class="number">1</span> - i] = -a[i];</span><br><span class="line">        _md[k] = <span class="number">1</span>;</span><br><span class="line">        Md.<span class="built_in">clear</span>();</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (_md[i] != <span class="number">0</span>) Md.push_back(i);</span><br><span class="line">        rep(i, <span class="number">0</span>, k) res[i] = base[i] = <span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l &lt;&lt; pnt) &lt;= n) pnt++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = pnt; p &gt;= <span class="number">0</span>; p--) &#123;</span><br><span class="line">            mul(res, res, k);</span><br><span class="line">            <span class="keyword">if</span> ((n &gt;&gt; p) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) res[i + <span class="number">1</span>] = res[i];</span><br><span class="line">                res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                rep(j, <span class="number">0</span>, SZ(Md)) res[Md[j]] = (res[Md[j]] - res[k] * _md[Md[j]]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) ans = (ans + res[i] * b[i]) % mod;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; <span class="number">0</span>) ans += mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span> </span>&#123;</span><br><span class="line">        VI C(1, 1), B(1, 1);</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, m = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        rep(n, <span class="number">0</span>, SZ(s)) &#123;</span><br><span class="line">            ll d = <span class="number">0</span>;</span><br><span class="line">            rep(i, <span class="number">0</span>, L + <span class="number">1</span>) d = (d + (ll) C[i] * s[n - i]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> * L &lt;= n) &#123;</span><br><span class="line">                VI T = C;</span><br><span class="line">                ll c = mod - d * qmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                L = n + <span class="number">1</span> - L;</span><br><span class="line">                B = T;</span><br><span class="line">                b = d;</span><br><span class="line">                m = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ll c = mod - d * qmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a, ll n)</span> </span>&#123;</span><br><span class="line">        VI c = BM(a);</span><br><span class="line">        c.erase(c.<span class="built_in">begin</span>());</span><br><span class="line">        rep(i, <span class="number">0</span>, SZ(c)) c[i] = (mod - c[i]) % mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n, c, VI(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;k, &amp;n);</span><br><span class="line">        invk = qmod(k, p - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">2l</span>l * qmod(k + <span class="number">1</span>, p - <span class="number">2</span>) % p);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) f[i] = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * k; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; k) &#123;</span><br><span class="line">                add(f[i], invk * (g[i - <span class="number">1</span>] - g[i - k - <span class="number">1</span>] + p) % p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                add(f[i], invk * g[i - <span class="number">1</span>] % p);</span><br><span class="line">            &#125;</span><br><span class="line">            g[i] = (g[i - <span class="number">1</span>] + f[i]) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * k; ++i) vec.push_back(f[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, linear_seq::gao(vec, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Kth-Minimum-Clique"><a href="#D-Kth-Minimum-Clique" class="headerlink" title="D.Kth Minimum Clique"></a>D.Kth Minimum Clique</h2><p>题意：输出第$k$个$Clique$</p>
<p>思路：每次取最小权值的$Clique$，增加$Clique$的点，重新丢到优先队列中，重复$k$次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;110&gt; bs;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    bs S;</span><br><span class="line">    ll sum;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    node(bs S, ll sum) : S(S), sum(sum) &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum &gt; other.sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K;</span><br><span class="line">ll v[N];</span><br><span class="line">bs e[N];</span><br><span class="line">priority_queue&lt;node&gt; pq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, v + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">                e[i].<span class="built_in">set</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    bs s;</span><br><span class="line">    s.reset();</span><br><span class="line">    pq.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</span><br><span class="line">        node u = pq.top();</span><br><span class="line">        pq.pop();</span><br><span class="line">        K--;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, u.sum);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = u.S;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i]) &#123;</span><br><span class="line">                pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s[i] &amp;&amp; ((s &amp; e[i]) == s)) &#123;</span><br><span class="line">                s.<span class="built_in">set</span>(i);</span><br><span class="line">                pq.push(node(s, u.sum + v[i]));</span><br><span class="line">                s.reset(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Partition-problem"><a href="#F-Partition-problem" class="headerlink" title="F. Partition problem"></a>F. Partition problem</h2><p>题意：有$2\cdot N$个人，将这$2\cdot N$个人分为两个集合，每个集合为$N$个人，总的贡献是每对属于两个集合的人的贡献</p>
<p>思路：爆搜$C<em>{2\cdot N} ^ {N}$，所以总复杂度为$O(N \cdot C</em>{2 \cdot N} ^ {N})$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> v[N][N];</span><br><span class="line">ll ans, tnow;</span><br><span class="line"><span class="keyword">int</span> arr[N], brr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            res += v[arr[i]][brr[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> cnt, ll now)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == n - pos + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">        tnow = now;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = pos; i &lt;= n; ++i) &#123;</span><br><span class="line">            arr[++arr[<span class="number">0</span>]] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                tnow += v[i][brr[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, tnow);</span><br><span class="line">        arr[<span class="number">0</span>] = tmp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">        arr[++arr[<span class="number">0</span>]] = pos;</span><br><span class="line">        tnow = now;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= brr[<span class="number">0</span>]; ++j) &#123;</span><br><span class="line">            tnow += v[pos][brr[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            DFS(pos + <span class="number">1</span>, cnt - <span class="number">1</span>, tnow);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, tnow);</span><br><span class="line">        &#125;</span><br><span class="line">        --arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//0</span></span><br><span class="line">    brr[++brr[<span class="number">0</span>]] = pos;</span><br><span class="line">    tnow = now;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= arr[<span class="number">0</span>]; ++i) &#123;</span><br><span class="line">        tnow += v[arr[i]][pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">        DFS(pos + <span class="number">1</span>, cnt, tnow);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, tnow);</span><br><span class="line">    &#125;</span><br><span class="line">    --brr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = n;</span><br><span class="line">    n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">1</span>, m, <span class="number">0l</span>l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Second-Large-Rectangle"><a href="#H-Second-Large-Rectangle" class="headerlink" title="H.Second Large Rectangle"></a>H.Second Large Rectangle</h2><p>题意：找第二大的全为$1$的矩阵</p>
<p>思路：找出第一个最大的矩阵，然后将四个角分别赋值为$0$，然后找最大的矩阵，取$MAX$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> G[N][N], T[N][N], l[N][N], r[N][N], up[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> G[][N], <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y, <span class="keyword">int</span> &amp;row, <span class="keyword">int</span> &amp;col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            l[i][j] = r[i][j] = j;</span><br><span class="line">            up[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] == <span class="number">1</span> &amp;&amp; G[i][j] == G[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                l[i][j] = l[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] == <span class="number">1</span> &amp;&amp; G[i][j] == G[i][j + <span class="number">1</span>]) &#123;</span><br><span class="line">                r[i][j] = r[i][j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; G[i][j] == <span class="number">1</span> &amp;&amp; G[i][j] == G[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                l[i][j] = <span class="built_in">max</span>(l[i][j], l[i - <span class="number">1</span>][j]);</span><br><span class="line">                r[i][j] = <span class="built_in">min</span>(r[i][j], r[i - <span class="number">1</span>][j]);</span><br><span class="line">                up[i][j] = up[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tcol = r[i][j] - l[i][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> trow = up[i][j];</span><br><span class="line">                <span class="keyword">if</span> (tcol * trow &gt; row * col) &#123;</span><br><span class="line">                    col = tcol;</span><br><span class="line">                    row = trow;</span><br><span class="line">                    x = i - up[i][j] + <span class="number">1</span>;</span><br><span class="line">                    y = l[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%1d"</span>, G[i] + j);</span><br><span class="line">                T[i][j] = G[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x, y, tx, ty, row = <span class="number">0</span>, col = <span class="number">0</span>, trow = <span class="number">0</span>, tcol = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">get</span>(G, x, y, row, col);</span><br><span class="line">        <span class="comment">//  cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; row &lt;&lt; " " &lt;&lt; col &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (row == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T[x][y] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">get</span>(T, tx, ty, trow, tcol);</span><br><span class="line">            T[x][y] = <span class="number">1</span>;</span><br><span class="line">            T[x + row - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">get</span>(T, tx, ty, trow, tcol);</span><br><span class="line">            T[x + row - <span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">            T[x][y + col - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">get</span>(T, tx, ty, trow, tcol);</span><br><span class="line">            T[x][y + col - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            T[x + row - <span class="number">1</span>][y + col - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">get</span>(T, tx, ty, trow, tcol);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, trow * tcol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第一场）</title>
    <url>/2019/07/18/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A. Equivalent Prefixes"></a>A. Equivalent Prefixes</h2><p>题意：定义$RMQ(u, l, r)$表示$u<em>l,u</em>{l+1},\cdots,u_r$中最小的数的下标，而两个数组相似指的是对于任意的$1\leq l \leq r \leq m(m$表示数组长度$)$都相等，问$a, b$两个数组最长的相似前缀长度</p>
<p>思路：二分数组长度，通过建立笛卡尔树，比较两者的前缀笛卡尔树</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cartesian_Tree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> id, val, fa;</span><br><span class="line">        <span class="keyword">int</span> son[<span class="number">2</span>];</span><br><span class="line">        node() &#123;&#125;</span><br><span class="line">        node (<span class="keyword">int</span> id, <span class="keyword">int</span> val, <span class="keyword">int</span> fa) : id(id), val(val), fa(fa) &#123;</span><br><span class="line">            son[<span class="number">0</span>] = son[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;t[N];</span><br><span class="line">    <span class="keyword">int</span> root, l[N], r[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t[<span class="number">0</span>] = node(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            t[i] = node(i, a[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (t[k].val &gt; t[i].val) &#123;</span><br><span class="line">                k = t[k].fa;</span><br><span class="line">            &#125;</span><br><span class="line">            t[i].son[<span class="number">0</span>] = t[k].son[<span class="number">1</span>];</span><br><span class="line">            t[k].son[<span class="number">1</span>] = i;</span><br><span class="line">            t[i].fa = k;</span><br><span class="line">            t[t[i].son[<span class="number">0</span>]].fa = i;</span><br><span class="line">        &#125;</span><br><span class="line">        root = t[<span class="number">0</span>].son[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        l[t[u].id] = DFS(t[u].son[<span class="number">0</span>]);</span><br><span class="line">        r[t[u].id] = DFS(t[u].son[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> l[t[u].id] + r[t[u].id] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    t[<span class="number">0</span>].init();</span><br><span class="line">    t[<span class="number">1</span>].init();</span><br><span class="line">    t[<span class="number">0</span>].build(x, a);</span><br><span class="line">    t[<span class="number">1</span>].build(x, b);</span><br><span class="line">    t[<span class="number">0</span>].DFS(t[<span class="number">0</span>].root);</span><br><span class="line">    t[<span class="number">1</span>].DFS(t[<span class="number">1</span>].root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[<span class="number">0</span>].l[i] != t[<span class="number">1</span>].l[i] || t[<span class="number">0</span>].r[i] != t[<span class="number">1</span>].r[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B.  Integration"></a>B.  Integration</h2><p>题意:求$\frac{1}{\pi} \cdot \int<em>{0}^{\infty}\frac{1}{\prod</em>{i=1}^{n} (a_i^2+x^2)}\mathrm{d}x$</p>
<p>思路:</p>
<ul>
<li><p>$\frac{1}{\pi} \cdot \int_{0}^{\infty} \frac{1}{a^2+x^2} \mathrm{d}x = \frac{1}{2\cdot a}$</p>
</li>
<li><p>当$n=2$</p>
<ul>
<li><script type="math/tex; mode=display">
\frac{1}{\pi} \cdot \int_{0}^{\infty} \frac{1}{(a_1^2+x^2) \cdot (a_2^2+x^2)} \mathrm{d}x
= \frac{1}{\pi} \cdot \int_{0}^{\infty} \frac{A}{a_1^2+x^2}+\frac{B}{a_2^2+x^2} \mathrm{d}x</script></li>
</ul>
</li>
</ul>
<ul>
<li>发现$A=\frac{1}{a_2^2-a_1^2}, B = \frac{1}{a_1^2-a_2^2}$</li>
</ul>
<ul>
<li><p>当$n=3$</p>
<ul>
<li><script type="math/tex; mode=display">
\frac{1}{\pi} \cdot \int_{0}^{\infty} \frac{1}{(a_1^2+x^2) \cdot (a_2^2+x^2) \cdot (a_3^2+x^2)} \mathrm{d}x
= \frac{1}{\pi} \cdot \int_{0}^{\infty} \frac{A}{a_1^2+x^2}+\frac{B}{a_2^2+x^2} + \frac{C}{a_3^2+x^2} \mathrm{d}x</script></li>
<li><p>发现$A=\frac{1}{(a_2^2-a_1^2)\cdot(a_3^2-a_1^2)}, B = \frac{1}{(a_1^2-a_2^2)\cdot(a_3^2-a_2^2)}, C=\frac{1}{(a_1^2-a_3^2)\cdot(a_2^2-a_3^2)}$</p>
</li>
</ul>
</li>
<li><p>大胆推测</p>
<script type="math/tex; mode=display">
\frac{1}{\pi} \cdot \int_{0}^{\infty}\frac{1}{\prod_{i=1}^{n} (a_i^2+x^2)} \mathrm{d}x=\frac{1}{\pi}\sum_{i=1}^n\frac{1}{2\cdot \prod_{j\neq i}(a_j^2-a_i^2)\cdot a_i}</script></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll P = (ll) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % P;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % P;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, arr + i);</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ll tmp = <span class="number">2l</span>l * arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp * (arr[j] * arr[j] % P - arr[i] * arr[i] % P + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = (ans + qpow(tmp, P - <span class="number">2</span>)) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Euclidean-Distance"><a href="#C-Euclidean-Distance" class="headerlink" title="C. Euclidean Distance"></a>C. Euclidean Distance</h2><p>题意：求$\sum _{i=1}^{n}(\frac{a_i}{m} ^ 2- p_i^2)$，其中满足</p>
<ul>
<li>$p_1,p_2,\cdots, p_n\geq0$</li>
<li>$p_1 + p_2 + \cdots +  p_n = 1$</li>
</ul>
<p>思路：</p>
<p>将条件改为$p_1+p_2+\cdots +p_n=m$</p>
<p>此时$\sum<em>{i=1}^{n}(\frac{a_i}{m}^2-p_i^2)=\sum</em>{i=1}^{n} (\frac{a<em>i}{m}^2+\frac{p_i}{m}^2)=\frac{1}{m^2}\cdot \sum</em>{i=1}^{n}(a_i^2-p_i^2)$<br><img src="/upload/2019牛客暑期多校训练营（第一场）/1.png" alt=""></p>
<p>$\sum_{i=1}^{n}(a_i^2-p_i^2)$即矩形的高度平方。显然优先降低高度高的矩形。当$A_1$和$A_2$高度相同时看做一个矩形同时降低二者高度，直到不能降低位置，然后计算最后答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll m;</span><br><span class="line">ll arr[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Frac</span> &#123;</span></span><br><span class="line">    ll x, y;</span><br><span class="line"></span><br><span class="line">    Frac() &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    Frac(ll x, ll y) : x(x), y(y) &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    Frac <span class="keyword">operator</span>+(<span class="keyword">const</span> Frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll up = x * other.y + y * other.x;</span><br><span class="line">        ll down = y * other.y;</span><br><span class="line">        ll G = __gcd(up, down);</span><br><span class="line">        <span class="keyword">return</span> &#123;up / G, down / G&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    Frac <span class="keyword">operator</span>-(<span class="keyword">const</span> Frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll up = x * other.y - y * other.x;</span><br><span class="line">        ll down = y * other.y;</span><br><span class="line">        ll G = __gcd(up, down);</span><br><span class="line">        <span class="keyword">return</span> &#123;up / G, down / G&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    Frac <span class="keyword">operator</span>*(<span class="keyword">const</span> Frac &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll up = x * other.x;</span><br><span class="line">        ll down = y * other.y;</span><br><span class="line">        ll G = __gcd(up, down);</span><br><span class="line">        <span class="keyword">return</span> &#123;up / G, down / G&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, arr + i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, greater&lt;ll&gt;());</span><br><span class="line">        ll need = m;</span><br><span class="line">        Frac ans = Frac(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n &amp;&amp; (arr[i] - arr[i + <span class="number">1</span>]) * i &lt;= need) &#123;</span><br><span class="line">                need -= (arr[i] - arr[i + <span class="number">1</span>]) * i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = ans + Frac((i * arr[i] - need) * (i * arr[i] - need), <span class="number">1l</span>l * i * m * m);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                    ans = ans + Frac(arr[j] * arr[j], m * m);</span><br><span class="line">                &#125;</span><br><span class="line">                ans.out();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-ABBA"><a href="#F-ABBA" class="headerlink" title="F. ABBA"></a>F. ABBA</h2><p>题意：对于一个长度为$2\cdot (n+m)$的$AB$串，有多少种方案可以构造出这个$AB$串中有$n$个$AB$子序列，$m$个$BA$子序列</p>
<p>思路：$f[i][j]$表示已经用了$i$个$A$，$j$个$B$</p>
<ul>
<li><p>$f[0]][0]=1$</p>
</li>
<li><p>考虑如果加了一个$A$，首先满足$i+1&lt;=n+m$那么优先给$AB$贡献，也就是说$i+1-n\leq j$，意思是即使满足$AB$串后，剩余的$A$要小于$B$的数量，同样的$B$要优先给$BA$串贡献，需要满足$j-m\leq i+1$</p>
</li>
<li>考虑如果加了一个$B$，首先满足$j+1&lt;=n+m$那么优先给$BA$贡献，也就是说$j+1-m\leq i$，意思是即使满足$BA$串后，剩余的$B$要小于$A$的数量，同样的$A$要优先给$AB$串贡献，需要满足$i-n\leq j+1$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = (ll) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll dp[N][N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n + m; ++j) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0l</span>l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n + m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> - n &lt;= j &amp;&amp; j - m &lt;= i + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i + <span class="number">1</span>][j] = (dp[i + <span class="number">1</span>][j] + dp[i][j]) % p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> - m &lt;= i &amp;&amp; i - n &lt;= j + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j + <span class="number">1</span>] = (dp[i][j + <span class="number">1</span>] + dp[i][j]) % p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[n + m][n + m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Random-Point-in-Triangle"><a href="#F-Random-Point-in-Triangle" class="headerlink" title="F. Random Point in Triangle"></a>F. Random Point in Triangle</h2><p>题意：在$\triangle ABC $内等概率分布点$P$,定义$E=max(S<em>{PAB}, S</em>{PBC},S_{PCA})$，求$E$的期望的$36$倍，保证为整数</p>
<p>思路：同时乱打表发现$36E=22\cdot S_{ABC}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll x, y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    ll <span class="keyword">operator</span> ^ (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * other.y - y * other.x;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - other.x, y - other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;p[<span class="number">1</span>].x, &amp;p[<span class="number">1</span>].y)) &#123;</span><br><span class="line">        p[<span class="number">2</span>].input();</span><br><span class="line">        p[<span class="number">3</span>].input();</span><br><span class="line">        ll ans = <span class="built_in">abs</span>((p[<span class="number">1</span>] - p[<span class="number">2</span>]) ^ (p[<span class="number">1</span>] - p[<span class="number">3</span>]));</span><br><span class="line">        ans *= <span class="number">11</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Fraction-Comparision"><a href="#J-Fraction-Comparision" class="headerlink" title="J. Fraction Comparision"></a>J. Fraction Comparision</h2><p>题意：比较$\frac{x}{a}$和$\frac{y}{b}$的大小</p>
<p>思路：签到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        x, a, y, b = map(int, input().split())</span><br><span class="line">        A = x * b</span><br><span class="line">        B = y * a</span><br><span class="line">        <span class="keyword">if</span> A == B :</span><br><span class="line">            print(<span class="string">'='</span>)</span><br><span class="line">        <span class="keyword">elif</span> A &lt; B :</span><br><span class="line">            print(<span class="string">'&lt;'</span>)</span><br><span class="line">        <span class="keyword">elif</span> A &gt; B :</span><br><span class="line">            print(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError :</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>2019牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex命令</title>
    <url>/2019/07/18/Latex/</url>
    <content><![CDATA[<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\alpha</td>
<td>$\alpha$</td>
</tr>
<tr>
<td>\beta</td>
<td>$\beta$</td>
</tr>
<tr>
<td>\gamma</td>
<td>$\gamma$</td>
</tr>
<tr>
<td>\Delta, \delta</td>
<td>$\Delta, \delta$</td>
</tr>
<tr>
<td>\epsilon, \varepsilon</td>
<td>$\epsilon, \varepsilon$</td>
</tr>
<tr>
<td>\zeta</td>
<td>$\zeta$</td>
</tr>
<tr>
<td>\eta</td>
<td>$\eta$</td>
</tr>
<tr>
<td>\theta,\vartheta</td>
<td>$\theta,\vartheta$</td>
</tr>
<tr>
<td>\iota</td>
<td>$\iota$</td>
</tr>
<tr>
<td>\kappa</td>
<td>$\kappa$</td>
</tr>
<tr>
<td>\lambda</td>
<td>$\lambda$</td>
</tr>
<tr>
<td>\mu</td>
<td>$\mu$</td>
</tr>
<tr>
<td>\nu</td>
<td>$\nu$</td>
</tr>
<tr>
<td>\Xi,\xi</td>
<td>$\Xi,\xi$</td>
</tr>
<tr>
<td>\pi, \varpi</td>
<td>$\pi, \varpi$</td>
</tr>
<tr>
<td>\rho,\varrho</td>
<td>$\rho,\varrho$</td>
</tr>
<tr>
<td>\sum,\sigma,\varsigma</td>
<td>$\sum,\sigma,\varsigma$</td>
</tr>
<tr>
<td>\tau</td>
<td>$\tau$</td>
</tr>
<tr>
<td>\upsilon</td>
<td>$\upsilon$</td>
</tr>
<tr>
<td>\phi,\varphi</td>
<td>$\phi,\varphi$</td>
</tr>
<tr>
<td>\psi</td>
<td>$\psi$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="二元关系符号"><a href="#二元关系符号" class="headerlink" title="二元关系符号"></a>二元关系符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\leq,\le</td>
<td>$\leq,\le$</td>
</tr>
<tr>
<td>\in</td>
<td>$\in$</td>
</tr>
<tr>
<td>\mid</td>
<td>$\mid$</td>
</tr>
<tr>
<td>\geq,\ge</td>
<td>$\geq,\ge$</td>
</tr>
<tr>
<td>\supset</td>
<td>$\supset$</td>
</tr>
<tr>
<td>\parallel</td>
<td>$\parallel$</td>
</tr>
<tr>
<td>\notin</td>
<td>$\notin$</td>
</tr>
<tr>
<td>\equiv</td>
<td>$\equiv$</td>
</tr>
<tr>
<td>\sim</td>
<td>$\sim$</td>
</tr>
<tr>
<td>\approx</td>
<td>$\approx$</td>
</tr>
<tr>
<td>\cong</td>
<td>$\cong$</td>
</tr>
<tr>
<td>\bowtie</td>
<td>$\bowtie$</td>
</tr>
<tr>
<td>\perp</td>
<td>$\perp$</td>
</tr>
<tr>
<td>\neq,\ne</td>
<td>$\neq,\ne$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\pm</td>
<td>$\pm$</td>
</tr>
<tr>
<td>\cdot</td>
<td>$\cdot$</td>
</tr>
<tr>
<td>\times</td>
<td>$\times$</td>
</tr>
<tr>
<td>\cup</td>
<td>$\cup$</td>
</tr>
<tr>
<td>\oplus</td>
<td>$\oplus$</td>
</tr>
<tr>
<td>\odot</td>
<td>$\odot$</td>
</tr>
<tr>
<td>\otimes</td>
<td>$\otimes$</td>
</tr>
<tr>
<td>\wedge,\land</td>
<td>$\wedge,\land$</td>
</tr>
<tr>
<td>\star</td>
<td>$\star$</td>
</tr>
<tr>
<td>\ast</td>
<td>$\ast$</td>
</tr>
<tr>
<td>\sum</td>
<td>$\sum $</td>
</tr>
<tr>
<td>\prod</td>
<td>$\prod$</td>
</tr>
<tr>
<td>\int</td>
<td>$\int$</td>
</tr>
<tr>
<td>\bigcup</td>
<td>$\bigcup$</td>
</tr>
<tr>
<td>\bigcap</td>
<td>$\bigcap$</td>
</tr>
<tr>
<td>\oint</td>
<td>$\oint$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\leftarrow,\gets</td>
<td>$\leftarrow,\gets$</td>
</tr>
<tr>
<td>\rightarrow,\to</td>
<td>$\rightarrow,\to$</td>
</tr>
<tr>
<td>\leftrightarrow</td>
<td>$\leftrightarrow$</td>
</tr>
<tr>
<td>\Leftarrow</td>
<td>$\Leftarrow$</td>
</tr>
<tr>
<td>\Rightarrow</td>
<td>$\Rightarrow$</td>
</tr>
<tr>
<td>\Leftrightarrow</td>
<td>$\Leftrightarrow$</td>
</tr>
<tr>
<td>\rightleftharpoons</td>
<td>$\rightleftharpoons$</td>
</tr>
<tr>
<td>\hookleftarrow, \hookrightarrow</td>
<td>$\hookleftarrow, \hookrightarrow$</td>
</tr>
<tr>
<td>\Longleftarrow,\Longrightarrow</td>
<td>$\Longleftarrow,\Longrightarrow$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\nabla</td>
<td>$\nabla$</td>
</tr>
<tr>
<td>\partial x</td>
<td>$\partial x$</td>
</tr>
<tr>
<td>\mathrm{d}x</td>
<td>$\mathrm{d}x$</td>
</tr>
<tr>
<td>\dot x</td>
<td>$\dot x$</td>
</tr>
<tr>
<td>\ddot y</td>
<td>$\ddot y$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\Delta,\triangle</td>
<td>$\Delta,\triangle$</td>
</tr>
<tr>
<td>\vec{c}</td>
<td>$\vec{c}$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="分数、矩阵和多行列式"><a href="#分数、矩阵和多行列式" class="headerlink" title="分数、矩阵和多行列式"></a>分数、矩阵和多行列式</h2><div class="table-container">
<table>
<thead>
<tr>
<th>latex命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>\frac{2}{4}=0.5</td>
<td>$\frac{2}{4}=0.5$</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>HZNU 2019 winter camp</title>
    <url>/2019/02/15/HZNU-2019-winter-camp/</url>
    <content><![CDATA[<h2 id="POJ-1330-Nearest-Common-Ancestors"><a href="#POJ-1330-Nearest-Common-Ancestors" class="headerlink" title="POJ 1330 Nearest Common Ancestors"></a>POJ 1330 Nearest Common Ancestors</h2><p>题意： 给出一棵树，查询两个点$LCA$</p>
<p>思路：$LCA$模板题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="title">Edge</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	inline Edge(int to, int nxt) :to(to), nxt(nxt) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u]); head[u] = tot++;</span><br><span class="line">	edge[tot] = Edge(u, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u];</span><br><span class="line">	<span class="keyword">int</span> hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">		Init();</span><br><span class="line">		<span class="built_in">memset</span>(flag, <span class="literal">false</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			ll w;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">			addedge(u, v);</span><br><span class="line">			flag[v] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag[i])</span><br><span class="line">			&#123;</span><br><span class="line">				root = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(root);</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, LCA(u, v));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="POJ-1470-Closest-Common-Ancestors"><a href="#POJ-1470-Closest-Common-Ancestors" class="headerlink" title="POJ 1470 Closest Common Ancestors"></a>POJ 1470 Closest Common Ancestors</h2><p>题意：给出一棵树，然后给出几组询问，记录每个点作为询问中的最近公共祖先的次数并输出，如果次数为0则不输出</p>
<p>思路：$LCA$模板题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">	Edge() &#123;&#125;</span><br><span class="line">	Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt) :to(to), nxt(nxt) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u]);</span><br><span class="line">	head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u];</span><br><span class="line">	<span class="keyword">int</span> hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		Init();</span><br><span class="line">		<span class="built_in">memset</span>(flag, <span class="literal">false</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">		<span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span> arr);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> id, m;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>, &amp;id, &amp;m);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> id2;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id2);</span><br><span class="line">				addedge(id, id2);</span><br><span class="line">				flag[id2] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag[i])</span><br><span class="line">			&#123;</span><br><span class="line">				root = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(root);</span><br><span class="line">		<span class="keyword">int</span> q;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">		<span class="keyword">while</span> (q--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">" (%d %d)"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">int</span> root = LCA(u, v);</span><br><span class="line">			arr[root]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>, i, arr[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-2586-How-far-away-？"><a href="#HDU-2586-How-far-away-？" class="headerlink" title="HDU 2586 How far away ？"></a>HDU 2586 How far away ？</h2><p>题意：给出一棵树，每条边有边权，然后给出几组询问，每组询问需要输出$u, v$之间的最短路径。</p>
<p>思路：</p>
<p>对于一棵树，两个点的路径唯一。</p>
<p>这两个点的路径长度为u到根的路径长度加上v到根的路径长度减去两倍LCA(u, v)到根的路径长度。</p>
<p>即$dis<em>u+dis_v-2 \cdot dis</em>{LCA_{u, v}}$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span>  to;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	Edge() &#123;&#125;</span><br><span class="line">	Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> next, <span class="keyword">int</span> w) :to(to), next(next), w(w) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u], w);</span><br><span class="line">	head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	dis[root] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			dis[v] = dis[tmp] + edge[i].w;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v])</span><br><span class="line">		swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u], hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u;</span><br><span class="line">	<span class="keyword">int</span> tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">int</span> n, q;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v, w;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">			addedge(u, v, w);</span><br><span class="line">			addedge(v, u, w);</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (q--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">int</span> root = LCA(u, v);</span><br><span class="line">			<span class="keyword">int</span> ans = dis[u] + dis[v] - <span class="number">2</span> * dis[root];</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-2874-Connections-between-cities"><a href="#HDU-2874-Connections-between-cities" class="headerlink" title="HDU 2874 Connections between cities"></a>HDU 2874 Connections between cities</h2><p>题意：给出一张图，保证无环，但是不保证连通，求出两个点的最短距离，如果不连通就输出$”Not \quad connected”$。</p>
<p>思路：</p>
<p>由于保证无环，那么给出的图就是一颗或者多颗树。</p>
<p>那么可以用并查集来维护两点是否在一个集合中，也就是一棵树中。</p>
<p>对于在一棵树上的$u,v$两点，距离就是$dis<em>u+dis_v-2 \cdot dis</em>{LCA_{u, v}}$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> Fa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x == Fa[x] ? Fa[x] : Fa[x] = <span class="built_in">find</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = <span class="built_in">find</span>(x);</span><br><span class="line">	y = <span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (x != y)</span><br><span class="line">	&#123;</span><br><span class="line">		Fa[x] = y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span>  to;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	Edge() &#123;&#125;</span><br><span class="line">	Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> next, <span class="keyword">int</span> w) :to(to), next(next), w(w) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u], w);</span><br><span class="line">	head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		Fa[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">find</span>(i) == i)</span><br><span class="line">		&#123;</span><br><span class="line">			deg[i] = <span class="number">0</span>;</span><br><span class="line">			fa[i][<span class="number">0</span>] = i;</span><br><span class="line">			dis[i] = <span class="number">0</span>;</span><br><span class="line">			q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			dis[v] = dis[tmp] + edge[i].w;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v])</span><br><span class="line">		swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u], hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u;</span><br><span class="line">	<span class="keyword">int</span> tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">	<span class="keyword">int</span> rootu = <span class="built_in">find</span>(u);</span><br><span class="line">	<span class="keyword">int</span> rootv = <span class="built_in">find</span>(v);</span><br><span class="line">	<span class="keyword">if</span> (rootu != rootv)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"Not connected"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> root = LCA(u, v);</span><br><span class="line">	<span class="keyword">int</span> ans = dis[u] + dis[v] - <span class="number">2</span> * dis[root];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v, w;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">			addedge(u, v, w);</span><br><span class="line">			addedge(v, u, w);</span><br><span class="line">			mix(u, v);</span><br><span class="line">		&#125;</span><br><span class="line">		BFS();</span><br><span class="line">		<span class="keyword">while</span> (q--)</span><br><span class="line">		&#123;</span><br><span class="line">			solve();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="POJ-3417-Network"><a href="#POJ-3417-Network" class="headerlink" title="POJ - 3417 Network"></a>POJ - 3417 Network</h2><p>题意：给出一棵树和一些非树边，你可以选择破坏一条树边以及一条非树边，问有多少种方式可以破坏这棵树。</p>
<p>思路：</p>
<p>对于每条非树边$u-v$都可以形成一个$u-LCA_{u, v}-v-u$的环，如果破坏这个这个环则只能选择环上一个树边以及新加入的非树边。</p>
<p>如果某条树边被多个环覆盖那么无法通过破坏这条边以及非树边来破坏整棵树。</p>
<p>如果某条树边没有被环覆盖那么可以通过破坏这条树边以及任意一条非树边来破坏整棵树。</p>
<p>最后可以通过$LCA$以及树上差分(前缀和？)来优化求出每条树边被多少个环覆盖。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">	Edge() &#123;&#125;</span><br><span class="line">	Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt) :to(to), nxt(nxt) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u]);</span><br><span class="line">	head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u];</span><br><span class="line">	<span class="keyword">int</span> hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll arr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == pre) <span class="keyword">continue</span>;</span><br><span class="line">		DFS(v, u);</span><br><span class="line">		arr[u] += arr[v];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m))</span><br><span class="line">	&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span> arr);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">			addedge(u, v);</span><br><span class="line">			addedge(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">			arr[u]++;</span><br><span class="line">			arr[v]++;</span><br><span class="line">			arr[LCA(u, v)] -= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DFS(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">		ll ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!arr[i])</span><br><span class="line">			&#123;</span><br><span class="line">				ans += m;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (arr[i] == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UVALive-8196-Imperial-roads"><a href="#UVALive-8196-Imperial-roads" class="headerlink" title="UVALive - 8196 Imperial roads"></a>UVALive - 8196 Imperial roads</h2><p>题意：给出一张图，然后询问给出一条边，求有这条边的最小生成树的权值和。</p>
<p>思路：</p>
<p>先求最小生成树，然后询问的边如果在最小生成树里面那么就是原来的最小生成树的权值和。</p>
<p>否则在原来的最小生成树里面的加入一条边，形成个环，然后去掉这个环里面除了加入的边之外的边权最大的边即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w) : u(u), v(v), w(w) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> nxt;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, ll w) : to(to), nxt(nxt), w(w) &#123;&#125;</span><br><span class="line">&#125; edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn][DEG];</span><br><span class="line"><span class="keyword">bool</span> inMST[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">    edge[tot] = Edge(v, head[u], w);</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">    edge[tot] = Edge(u, head[v], w);</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    G.<span class="built_in">clear</span>();</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == father[x] ? father[x] : father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">find</span>(x);</span><br><span class="line">    y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">        father[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">MST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    sort(G.<span class="built_in">begin</span>(), G.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">memset</span>(inMST,<span class="literal">false</span>, <span class="keyword">sizeof</span> inMST);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it: G) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = it.u;</span><br><span class="line">        <span class="keyword">int</span> v = it.v;</span><br><span class="line">        mp[make_pair(v, u)] =cnt;</span><br><span class="line">        mp[make_pair(u, v)] = cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it: G) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = it.u;</span><br><span class="line">        <span class="keyword">int</span> v = it.v;</span><br><span class="line">        <span class="keyword">if</span> (same(u, v))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        mix(u, v);</span><br><span class="line">        inMST[mp[make_pair(u, v)]] = <span class="literal">true</span>;</span><br><span class="line">        addedge(u, v, it.w);</span><br><span class="line">        res += it.w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    deg[root] = <span class="number">0</span>;</span><br><span class="line">    fa[root][<span class="number">0</span>] =root;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; DEG;++i) &#123;</span><br><span class="line">            dis[tmp][i] =<span class="built_in">max</span>(dis[tmp][i - <span class="number">1</span>], dis[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">            fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp];~i;i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">            fa[v][<span class="number">0</span>] =tmp;</span><br><span class="line">            <span class="keyword">int</span> id = mp[make_pair(tmp, v)];</span><br><span class="line">            dis[v][<span class="number">0</span>] = G[id].w;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[u] &gt; deg[v])swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> hu = deg[u], hv = deg[v];</span><br><span class="line">    <span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>;det;det &gt;&gt;= <span class="number">1</span>, ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (det &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, dis[tv][i]);</span><br><span class="line">            tv = fa[tv][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tu == tv)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>;i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[tu][i] == fa[tv][i]) <span class="keyword">continue</span>;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(dis[tu][i], dis[tv][i]));</span><br><span class="line">        tu = fa[tu][i];</span><br><span class="line">        tv = fa[tv][i];</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(dis[tu][<span class="number">0</span>], dis[tv][<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;=m;++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            ll w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            G.push_back(node(u, v, w));</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = MST();</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="keyword">int</span> id = mp[make_pair(u, v)];</span><br><span class="line">            ll w = G[id].w;</span><br><span class="line">            <span class="keyword">if</span> (inMST[id]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ll res = LCA(u, v);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans + w - res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">    </span><br><span class="line">    RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line"></span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-4547-CD操作"><a href="#HDU-4547-CD操作" class="headerlink" title="HDU - 4547 CD操作"></a>HDU - 4547 CD操作</h2><p>题意：</p>
<p>思路：</p>
<p>从$u-v$的操作数为$dis<em>u-dis</em>{LCA{u, v}}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="title">Edge</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	inline Edge(int to, int nxt) :to(to), nxt(nxt) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u]);</span><br><span class="line">	head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	dis[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; i != <span class="number">-1</span>; i = edge[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			dis[v] = dis[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u];</span><br><span class="line">	<span class="keyword">int</span> hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i];</span><br><span class="line">		tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		init();</span><br><span class="line">		mp.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">memset</span>(flag, <span class="literal">false</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">string</span> s1, s2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">			<span class="keyword">if</span> (mp[s1] == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				mp[s1] = cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (mp[s2] == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				mp[s2] = cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			addedge(mp[s2], mp[s1]);</span><br><span class="line">			addedge(mp[s1], mp[s2]);</span><br><span class="line">			flag[mp[s1]] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag[i])</span><br><span class="line">			&#123;</span><br><span class="line">				root = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(root);</span><br><span class="line">		<span class="keyword">while</span> (m--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">string</span> s1, s2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">			<span class="keyword">int</span> u = mp[s1];</span><br><span class="line">			<span class="keyword">int</span> v = mp[s2];</span><br><span class="line">			<span class="keyword">int</span> tmp = LCA(u, v);</span><br><span class="line">			<span class="keyword">int</span> ans = dis[u] - dis[tmp];</span><br><span class="line">			<span class="keyword">if</span> (tmp != v)</span><br><span class="line">			&#123;</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ZOJ-4048-Red-Black-Tree"><a href="#ZOJ-4048-Red-Black-Tree" class="headerlink" title="ZOJ - 4048 Red Black Tree"></a>ZOJ - 4048 Red Black Tree</h2><p>题意：有一个树，上面有红点和黑点，有边权，每个点的花费定义为它到离它最近的红点的距离，每次询问给出一些点，能够将这棵树中的一个黑点变为红点，使得这些点中的最大花费最小</p>
<p>思路：</p>
<p>二分答案，符合条件的点不管，将不符合条件的点LCA求出来，变红，然后算距离</p>
<p>ST表求LCA可直接过，复杂度为$O(n \cdot log_n)$。</p>
<p>倍增求LCA复杂度为$O(n \cdot log_n \cdot log_n)$。</p>
<p>倍增求LCA可先根据深度排序，当有两个不符合的点上方的红点不同时则不能通过修改一个点使得所有不符合的点都产生改变，从而剪枝。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFLL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = (<span class="keyword">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="keyword">int</span>)<span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">	ll w;</span><br><span class="line">	Edge() &#123;&#125;</span><br><span class="line">	Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> nxt, ll w) :to(to), nxt(nxt), w(w) &#123;&#125;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"><span class="keyword">int</span> red[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[tot] = Edge(v, head[u], w); head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		red[i] = <span class="number">0</span>;</span><br><span class="line">		head[i] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn][DEG];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	dis[root] = <span class="number">0</span>;</span><br><span class="line">	deg[root] = <span class="number">0</span>;</span><br><span class="line">	fa[root][<span class="number">0</span>] = root;</span><br><span class="line">	pre[root] = root;</span><br><span class="line">	q.push(root);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; DEG; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[tmp][i] = fa[fa[tmp][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[tmp]; ~i; i = edge[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			ll w = edge[i].w;</span><br><span class="line">			<span class="keyword">if</span> (v == fa[tmp][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">			deg[v] = deg[tmp] + <span class="number">1</span>;</span><br><span class="line">			fa[v][<span class="number">0</span>] = tmp;</span><br><span class="line">			<span class="keyword">if</span> (red[v])</span><br><span class="line">			&#123;</span><br><span class="line">				pre[v] = v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				pre[v] = pre[tmp];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (red[v])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				dis[v] = dis[tmp] + w;</span><br><span class="line">			&#125;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deg[u] &gt; deg[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">int</span> hu = deg[u], hv = deg[v];</span><br><span class="line">	<span class="keyword">int</span> tu = u, tv = v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> det = hv - hu, i = <span class="number">0</span>; det; det &gt;&gt;= <span class="number">1</span>, ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (det &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tv = fa[tv][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tu == tv) <span class="keyword">return</span> tu;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = DEG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[tu][i] == fa[tv][i]) <span class="keyword">continue</span>;</span><br><span class="line">		tu = fa[tu][i], tv = fa[tv][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[tu][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, k;</span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> dis[a] &gt; dis[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> root = arr[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (dis[arr[i]] &gt; mid)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pre[root] != pre[arr[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			root = LCA(root, arr[i]);</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt == <span class="number">1</span> || cnt == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (dis[arr[i]] &gt; mid)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (dis[arr[i]] - dis[root] &gt; mid) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RUN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">		Init(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">			red[u] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			ll w;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">			addedge(u, v, w);</span><br><span class="line">			addedge(v, u, w);</span><br><span class="line">		&#125;</span><br><span class="line">		BFS(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (q--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + k, cmp);</span><br><span class="line">			ll l = <span class="number">0</span>;</span><br><span class="line">			ll r = INFLL;</span><br><span class="line">			ll ans = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (r - l &gt;= <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ll mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (check(mid))</span><br><span class="line">				&#123;</span><br><span class="line">					r = mid - <span class="number">1</span>;</span><br><span class="line">					ans = mid;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					l = mid + <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	freopen(<span class="string">"Text.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line"></span><br><span class="line">	RUN();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_JUDGE</span></span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL_JUDGE</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>讲课</tag>
      </tags>
  </entry>
</search>
